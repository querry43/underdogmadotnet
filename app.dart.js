// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
(function($) {
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
// Bound closures
$$.Bound__setValue__FutureImpl = {"": "BoundClosure;_self,_target,_receiver",
  call$1: function(p0) {
    return this._self[this._target](p0);
  },
  $signature: function() {
    return $.computeSignature(function(T) {
      return {func: "void__T4", void: true, args: [T]};
    }, this._self, "_FutureImpl");
  }
};

$$.Bound__setError__FutureImpl = {"": "BoundClosure;_self,_target,_receiver",
  call$1: function(p0) {
    return this._self[this._target](p0);
  },
  $signature: function() {
    return {func: "void__Object", void: true, args: [$.Object]};
  }
};

$$.Bound__onPause__BufferingStreamSubscription = {"": "BoundClosure;_self,_target,_receiver",
  call$0: function() {
    return this._self[this._target]();
  },
  $is_void_: true,
  $is_dynamic_: true
};

$$.Bound__onResume__BufferingStreamSubscription = {"": "BoundClosure;_self,_target,_receiver",
  call$0: function() {
    return this._self[this._target]();
  },
  $is_void_: true,
  $is_dynamic_: true
};

$$.Bound__onPause__ForwardingStreamSubscription = {"": "BoundClosure;_self,_target,_receiver",
  call$0: function() {
    return this._self[this._target]();
  },
  $is_void_: true,
  $is_dynamic_: true
};

$$.Bound__onResume__ForwardingStreamSubscription = {"": "BoundClosure;_self,_target,_receiver",
  call$0: function() {
    return this._self[this._target]();
  },
  $is_void_: true,
  $is_dynamic_: true
};

$$.Bound__handleData__ForwardingStreamSubscription = {"": "BoundClosure;_self,_target,_receiver",
  call$1: function(p0) {
    return this._self[this._target](p0);
  },
  $signature: function() {
    return $.computeSignature(function(S, T) {
      return {func: "void__S", void: true, args: [S]};
    }, this._self, "_ForwardingStreamSubscription");
  }
};

$$.Bound__handleError__ForwardingStreamSubscription = {"": "BoundClosure;_self,_target,_receiver",
  call$1: function(p0) {
    return this._self[this._target](p0);
  },
  $signature: function() {
    return {func: "void__dynamic", void: true, args: [null]};
  }
};

$$.Bound__handleDone__ForwardingStreamSubscription = {"": "BoundClosure;_self,_target,_receiver",
  call$0: function() {
    return this._self[this._target]();
  },
  $is_void_: true,
  $is_dynamic_: true
};

$$.Bound__run__ZoneTimer = {"": "BoundClosure;_self,_target,_receiver",
  call$0: function() {
    return this._self[this._target]();
  },
  $is_void_: true,
  $is_dynamic_: true
};

$$.Closure$_processWorkerMessage = {"": "Closure;call$2,$name", $is_void__K_V: true, $is_void__dynamic_SendPort: true, $is_dynamic__dynamic_dynamic: true, $is_void__String_String: true, $is_void__K_V0: true};

$$.Closure$wrapException = {"": "Closure;call$1,$name",
  $signature: function() {
    return {func: "dynamic__dynamic", args: [null]};
  }
};

$$.Closure$toStringWrapper = {"": "Closure;call$0,$name", $is_void_: true, $is_dynamic_: true};

$$.Closure$invokeClosure = {"": "Closure;call$5,$name"};

$$.Closure$isAssignable = {"": "Closure;call$2,$name", $is_void__K_V: true, $is_void__dynamic_SendPort: true, $is_dynamic__dynamic_dynamic: true, $is_void__String_String: true, $is_void__K_V0: true};

$$.Closure$typeNameInChrome = {"": "Closure;call$1,$name",
  $signature: function() {
    return {func: "String__dynamic", ret: $.JSString, args: [null]};
  }
};

$$.Closure$typeNameInSafari = {"": "Closure;call$1,$name",
  $signature: function() {
    return {func: "String__dynamic", ret: $.JSString, args: [null]};
  }
};

$$.Closure$typeNameInOpera = {"": "Closure;call$1,$name",
  $signature: function() {
    return {func: "String__dynamic", ret: $.JSString, args: [null]};
  }
};

$$.Closure$typeNameInFirefox = {"": "Closure;call$1,$name",
  $signature: function() {
    return {func: "String__dynamic", ret: $.JSString, args: [null]};
  }
};

$$.Closure$typeNameInIE = {"": "Closure;call$1,$name",
  $signature: function() {
    return {func: "String__dynamic", ret: $.JSString, args: [null]};
  }
};

$$.Closure$constructorNameFallback = {"": "Closure;call$1,$name",
  $signature: function() {
    return {func: "String__dynamic", ret: $.JSString, args: [null]};
  }
};

$$.Closure$callDartFunctionWith1Arg = {"": "Closure;call$2,$name", $is_void__K_V: true, $is_void__dynamic_SendPort: true, $is_dynamic__dynamic_dynamic: true, $is_void__String_String: true, $is_void__K_V0: true};

$$.Closure$main = {"": "Closure;call$0,$name", $is_void_: true, $is_dynamic_: true};

$$.Closure$onActivityDataLoaded = {"": "Closure;call$1,$name",
  $signature: function() {
    return {func: "void__String", void: true, args: [$.JSString]};
  }
};

$$.Closure$addActivity = {"": "Closure;call$1,$name",
  $signature: function() {
    return {func: "void__Map", void: true, args: [$.Map]};
  }
};

$$.Closure$_asyncRunCallback = {"": "Closure;call$0,$name", $is_void_: true, $is_dynamic_: true};

$$.Closure$_nullDataHandler = {"": "Closure;call$1,$name",
  $signature: function() {
    return {func: "void__dynamic", void: true, args: [null]};
  }
};

$$.Closure$_nullErrorHandler = {"": "Closure;call$1,$name",
  $signature: function() {
    return {func: "void__dynamic", void: true, args: [null]};
  }
};

$$.Closure$_nullDoneHandler = {"": "Closure;call$0,$name", $is_void_: true, $is_dynamic_: true};

(function (reflectionData) {
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = {};
  if (!init.mangledGlobalNames) init.mangledGlobalNames = {};
  if (!init.statics) init.statics = {};
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var descriptor = data[3];
    var isRoot = !!data[4];
    var fields = descriptor && descriptor[""];
    var classes = [];
    var functions = [];
    function processStatics(descriptor) {
      for (var property in descriptor) {
        if (!hasOwnProperty.call(descriptor, property)) continue;
        if (property === "") continue;
        var element = descriptor[property];
        var firstChar = property.substring(0, 1);
        var previousProperty;
        if (firstChar === "+") {
          mangledGlobalNames[previousProperty] = property.substring(1);
        } else if (firstChar === "@") {
          property = property.substring(1);
          $[property]["@"] = element;
        } else if (typeof element === "function") {
          $[previousProperty = property] = element;
          functions.push(property);
        } else {
          previousProperty = property;
          var newDesc = {};
          var previousProp;
          for (var prop in element) {
            if (!hasOwnProperty.call(element, prop)) continue;
            firstChar = prop.substring(0, 1);
            if (prop === "static") {
              processStatics(init.statics[property] = element[prop]);
            } else if (firstChar === "+") {
              mangledNames[previousProp] = prop.substring(1);
            } else if (firstChar === "@" && prop !== "@") {
              newDesc[prop.substring(1)]["@"] = element[prop];
            } else {
              newDesc[previousProp = prop] = element[prop];
            }
          }
          $$[property] = newDesc;
          classes.push(property);
        }
      }
    }
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot]);
  }
})([
["_interceptors", "dart:_interceptors", , {
getInterceptor: function(object) {
  return $.getInterceptor(object);
},

getDispatchProperty: function(object) {
  return object[$.dispatchPropertyName];
},

setDispatchProperty: function(object, value) {
  var t1 = $.dispatchPropertyName;
  $.stringTypeCheck(t1);
  Object.defineProperty(object, t1, {value: value, enumerable: false, writable: true, configurable: true});
},

makeDispatchRecord: function(interceptor, proto, extension, indexability) {
  return {i: interceptor, p: proto, e: extension, x: indexability};
},

getNativeInterceptor: function(object) {
  var record, proto, objectProto;
  record = $.getDispatchProperty(object);
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      return proto(object, record);
  }
  record = $.lookupDispatchRecord(object);
  if (record == null)
    return $.C_UnknownJavaScriptObject;
  $.setDispatchProperty(Object.getPrototypeOf(object), record);
  return $.getNativeInterceptor(object);
},

initializeDispatchProperty: function(setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor) {
  var objectProto, i, property;
  if (typeof rootProperty !== "string")
    return $.initializeDispatchProperty$bailout(1, setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor);
  objectProto = Object.prototype;
  for (i = 0; true; ++i) {
    if (i > 0)
      property = rootProperty + "_" + i;
    else
      property = rootProperty;
    if (typeof objectProto[property] === "undefined") {
      $.dispatchPropertyName = property;
      setGetDispatchPropertyFn(new Function("a", "return a." + property));
      $.setDispatchProperty(objectProto, $.makeDispatchRecord(jsObjectInterceptor, objectProto, null, null));
      return;
    }
  }
},

initializeDispatchProperty$bailout: function(state0, setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor) {
  var objectProto, i, property;
  objectProto = Object.prototype;
  for (i = 0; true; ++i) {
    property = i > 0 ? rootProperty + "_" + i : rootProperty;
    if (typeof objectProto[property] === "undefined") {
      $.dispatchPropertyName = property;
      setGetDispatchPropertyFn(new Function("a", "return a." + property));
      $.setDispatchProperty(objectProto, $.makeDispatchRecord(jsObjectInterceptor, objectProto, null, null));
      return;
    }
  }
},

Interceptor: {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return $.Primitives_objectToString(receiver);
  }
},

JSBool: {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true,
  $asObject: null
},

JSNull: {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  },
  $asObject: null
},

JavaScriptObject: {"": "Interceptor;",
  get$hashCode: function(_) {
    return 0;
  },
  $asObject: null
},

PlainJavaScriptObject: {"": "JavaScriptObject;"},

UnknownJavaScriptObject: {"": "JavaScriptObject;"},

JSArray: {"": "List/Interceptor;",
  add$1: function(receiver, value) {
    var $arguments, t1;
    $arguments = $.substitute(receiver.$asJSArray, $.getRuntimeTypeInfo(receiver));
    if ($arguments == null)
      t1 = null;
    else {
      $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
      t1 = $arguments[0];
    }
    $.assertSubtypeOfRuntimeType(value, t1);
    if (!!receiver.fixed$length)
      $.throwExpression(new $.UnsupportedError("add"));
    receiver.push(value);
  },
  addAll$1: function(receiver, collection) {
    var t1, e, $arguments, t2;
    for (t1 = $.get$iterator$ax($.listSuperNativeTypeCheck(collection, "$isIterable")); $.boolConversionCheck(t1.moveNext$0());) {
      e = t1.get$current();
      $arguments = $.substitute(receiver.$asJSArray, $.getRuntimeTypeInfo(receiver));
      if ($arguments == null)
        t2 = null;
      else {
        $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
        t2 = $arguments[0];
      }
      this.add$1(receiver, $.assertSubtypeOfRuntimeType(e, t2));
    }
  },
  forEach$1: function(receiver, f) {
    return $.voidTypeCheck($.IterableMixinWorkaround_forEach(receiver, $.assertFunctionSubtype(f, "void__E0", "JSArray", receiver)));
  },
  elementAt$1: function(receiver, index) {
    return $.assertSubtypeOfRuntimeType(this.$index(receiver, index), $.getRuntimeTypeArgument(receiver, "JSArray", 0));
  },
  sublist$2: function(receiver, start, end) {
    var t1;
    if (start == null)
      $.throwExpression(new $.ArgumentError(null));
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw $.wrapException(new $.ArgumentError(start));
    if (start < 0 || start > receiver.length) {
      t1 = receiver.length;
      throw $.wrapException(new $.RangeError("value " + start + " not in range 0.." + t1));
    }
    if (end < start || end > receiver.length) {
      t1 = receiver.length;
      throw $.wrapException(new $.RangeError("value " + end + " not in range " + start + ".." + t1));
    }
    if (start === end)
      return $.interceptedTypeCheck([], "$isList");
    return $.interceptedTypeCheck(receiver.slice(start, end), "$isList");
  },
  get$last: function(receiver) {
    var t1 = receiver.length;
    if (t1 > 0)
      return $.assertSubtypeOfRuntimeType(receiver[t1 - 1], $.getRuntimeTypeArgument(receiver, "JSArray", 0));
    throw $.wrapException(new $.StateError("No elements"));
  },
  toString$0: function(receiver) {
    return $.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
  },
  toList$1$growable: function(receiver, growable) {
    return $.interceptedTypeCheck($.List_List$from(receiver, growable, $.getRuntimeTypeArgument(receiver, "JSArray", 0)), "$isList");
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$iterator: function(receiver) {
    var t1, t2;
    t1 = $.getRuntimeTypeArgument(receiver, "JSArray", 0);
    $.listSuperNativeTypeCheck(receiver, "$isIterable");
    t2 = receiver.length;
    t2 = new $.ListIterator($.listSuperNativeTypeCheck(receiver, "$isIterable"), t2, 0, $.assertSubtypeOfRuntimeType(null, t1));
    $.setRuntimeTypeInfo(t2, [t1]);
    return $.assertSubtype(t2, "$isIterator", [$.getRuntimeTypeArgument(receiver, "JSArray", 0)], "$asIterator");
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    $.intTypeCheck(newLength);
    if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
      throw $.wrapException(new $.ArgumentError(newLength));
    if (newLength < 0)
      throw $.wrapException(new $.RangeError("value " + newLength));
    if (!!receiver.fixed$length)
      $.throwExpression(new $.UnsupportedError("set length"));
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    var t1, $arguments, t2;
    $.intTypeCheck(index);
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + index));
    t1 = receiver[index];
    $arguments = $.substitute(receiver.$asJSArray, $.getRuntimeTypeInfo(receiver));
    if ($arguments == null)
      t2 = null;
    else {
      $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
      t2 = $arguments[0];
    }
    return $.assertSubtypeOfRuntimeType(t1, t2);
  },
  $indexSet: function(receiver, index, value) {
    var $arguments, t1;
    $arguments = $.substitute(receiver.$asJSArray, $.getRuntimeTypeInfo(receiver));
    if ($arguments == null)
      t1 = null;
    else {
      $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
      t1 = $arguments[0];
    }
    $.assertSubtypeOfRuntimeType(value, t1);
    if (!!receiver.immutable$list)
      $.throwExpression(new $.UnsupportedError("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + index));
    receiver[index] = value;
  },
  $isList: true,
  $asInterceptor: null,
  $asList: null,
  $asIterable: null,
  $asObject: null,
  $isList: true,
  $isIterable: true
},

JSMutableArray: {"": "JSArray;", $isJSMutableArray: true,
  $asJSArray: function() {
    return [null];
  },
  $asList: function() {
    return [null];
  },
  $asIterable: function() {
    return [null];
  },
  $asObject: null
},

JSFixedArray: {"": "JSMutableArray;"},

JSExtendableArray: {"": "JSMutableArray;", $isJSExtendableArray: true},

JSNumber: {"": "num/Interceptor;",
  remainder$1: function(receiver, b) {
    return receiver % b;
  },
  toInt$0: function(receiver) {
    var truncated;
    if (isNaN(receiver))
      throw $.wrapException(new $.UnsupportedError("NaN"));
    if (receiver == Infinity || receiver == -Infinity)
      throw $.wrapException(new $.UnsupportedError("Infinity"));
    truncated = receiver < 0 ? $.doubleTypeCheck(Math.ceil(receiver)) : $.doubleTypeCheck(Math.floor(receiver));
    return $.intTypeCheck(truncated == -0.0 ? 0 : truncated);
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver + other;
  },
  $tdiv: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return this.toInt$0(receiver / other);
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw $.wrapException(new $.ArgumentError(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return receiver >> other >>> 0;
  },
  $xor: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return (receiver ^ other) >>> 0;
  },
  $lt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver > other;
  },
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver >= other;
  },
  $isnum: true,
  $asObject: null
},

JSInt: {"": "int/JSNumber;", $isdouble: true, $isnum: true, $asObject: null, $isint: true},

JSDouble: {"": "double/JSNumber;", $isdouble: true, $isnum: true, $asObject: null},

JSString: {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw $.wrapException(new $.RangeError("value " + index));
    if (index >= receiver.length)
      throw $.wrapException(new $.RangeError("value " + index));
    return receiver.charCodeAt(index);
  },
  replaceAll$2: function(receiver, from, to) {
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    $.intTypeCheck(endIndex);
    if (endIndex == null)
      endIndex = receiver.length;
    if (typeof endIndex !== "number")
      $.throwExpression(new $.ArgumentError(endIndex));
    if (startIndex < 0)
      throw $.wrapException(new $.RangeError("value " + startIndex));
    if ($.JSInt_methods.$gt(startIndex, endIndex))
      throw $.wrapException(new $.RangeError("value " + startIndex));
    if (endIndex == null)
      throw endIndex.$gt();
    if (endIndex > receiver.length)
      throw $.wrapException(new $.RangeError("value " + endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  trim$0: function(receiver) {
    var endIndex, startIndex, codeUnit, endIndex0, endIndex1;
    for (endIndex = receiver.length, startIndex = 0; startIndex < endIndex;) {
      if (startIndex >= endIndex)
        $.throwExpression(new $.RangeError("value " + startIndex));
      codeUnit = receiver.charCodeAt(startIndex);
      if (codeUnit === 32 || codeUnit === 13 || $.JSString__isWhitespace(codeUnit))
        ++startIndex;
      else
        break;
    }
    if (startIndex === endIndex)
      return "";
    for (endIndex0 = endIndex; true; endIndex0 = endIndex1) {
      endIndex1 = endIndex0 - 1;
      if (endIndex1 < 0)
        $.throwExpression(new $.RangeError("value " + endIndex1));
      if (endIndex1 >= endIndex)
        $.throwExpression(new $.RangeError("value " + endIndex1));
      codeUnit = receiver.charCodeAt(endIndex1);
      if (codeUnit === 32 || codeUnit === 13 || $.JSString__isWhitespace(codeUnit))
        ;
      else
        break;
    }
    if (startIndex === 0 && endIndex0 === endIndex)
      return receiver;
    return receiver.substring(startIndex, endIndex0);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var t1, hash, i;
    for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    $.intTypeCheck(index);
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + index));
    return receiver[index];
  },
  $asObject: null,
  $isString: true,
  $isPattern: true,
  static: {
JSString__isWhitespace: function(codeUnit) {
  if (codeUnit < 256)
    switch (codeUnit) {
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 32:
      case 133:
      case 160:
        return true;
      default:
        return false;
    }
  switch (codeUnit) {
    case 5760:
    case 6158:
    case 8192:
    case 8193:
    case 8194:
    case 8195:
    case 8196:
    case 8197:
    case 8198:
    case 8199:
    case 8200:
    case 8201:
    case 8202:
    case 8232:
    case 8233:
    case 8239:
    case 8287:
    case 12288:
    case 65279:
      return true;
    default:
      return false;
  }
}}

}}],
["_isolate_helper", "dart:_isolate_helper", , {
_callInIsolate: function(isolate, $function) {
  var result = $.propertyTypeCheck(isolate, "$is_IsolateContext").eval$1($.propertyTypeCheck($function, "$isFunction"));
  $globalState.topEventLoop.run$0();
  return result;
},

startRootIsolate: function(entry) {
  var rootContext;
  $globalState = $._Manager$(entry);
  if ($.boolConversionCheck($globalState.isWorker))
    return;
  rootContext = $._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
},

IsolateNatives_computeThisScript: function() {
  var currentScript, stack, matches;
  currentScript = $.$currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  stack = new Error().stack;
  if (stack == null)
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw $.wrapException(new $.UnsupportedError("Cannot extract URI from \"" + stack + "\""));
},

IsolateNatives__processWorkerMessage: function(sender, e) {
  var msg, t1, functionName, entryPoint, replyTo, context, t2;
  msg = $._deserializeMessage(e.data);
  t1 = $.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $globalState.currentManagerId = $.intTypeCheck(t1.$index(msg, "id"));
      functionName = $.stringTypeCheck(t1.$index(msg, "functionName"));
      entryPoint = $.propertyTypeCheck(functionName == null ? $globalState.entry : $[functionName], "$isFunction");
      replyTo = $._deserializeMessage(t1.$index(msg, "replyTo"));
      context = $._IsolateContext$();
      t1 = $globalState.topEventLoop;
      t1.enqueue$3;
      t1 = t1.events;
      t2 = new $._IsolateEvent(context, new $.IsolateNatives__processWorkerMessage_closure(entryPoint, replyTo), "worker-start");
      $.assertSubtypeOfRuntimeType(t2, $.getRuntimeTypeArgument(t1, "ListQueue", 0));
      t1._add$1(t2);
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if ($.propertyTypeCheck(t1.$index(msg, "port"), "$isSendPort") != null)
        $.send$2$x(t1.$index(msg, "port"), t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      t1 = $globalState.managers;
      t2 = $.get$IsolateNatives_workerIds();
      t1.remove$1(t1, t2.$index(t2, sender));
      sender.terminate();
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($.boolConversionCheck($globalState.isWorker)) {
        t1 = $globalState.mainManager;
        t2 = $._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg]));
        t1.postMessage$1;
        self.postMessage(t2);
      } else
        $.Primitives_printString($.toString$0(t1.$index(msg, "msg")));
      break;
    case "error":
      throw $.wrapException(t1.$index(msg, "msg"));
  }
},

IsolateNatives__log: function(msg) {
  var trace, t1, t2, exception;
  if ($.boolConversionCheck($globalState.isWorker)) {
    t1 = $globalState.mainManager;
    t2 = $._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg]));
    t1.postMessage$1;
    self.postMessage(t2);
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $.getTraceFromException(exception);
      throw $.wrapException(new $._ExceptionImplementation(trace));
    }

},

IsolateNatives__startIsolate: function(topLevel, replyTo) {
  var t1;
  $.propertyTypeCheck(replyTo, "$isSendPort");
  $.lazyPort = $.ReceivePortImpl$();
  t1 = $._Isolate_port();
  t1.toSendPort$0;
  replyTo.send$2(replyTo, "spawned", new $._NativeJsSendPort(t1, $globalState.currentContext.id));
  topLevel.call$0();
},

IsolateNatives__spawnWorker: function(functionName, uri, replyPort) {
  var worker, t1, workerId;
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.onmessage = function(e) { $.IsolateNatives__processWorkerMessage$closure.call$2(worker, e); };
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  t1 = $.get$IsolateNatives_workerIds();
  t1.$indexSet(t1, worker, workerId);
  t1 = $globalState.managers;
  t1.$indexSet(t1, workerId, worker);
  worker.postMessage($._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
},

_waitForPendingPorts: function(message, callback) {
  var finder, t1;
  $.assertFunctionSubtype(callback, "void_");
  finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  t1 = finder.ports;
  $.listSuperNativeTypeCheck(t1, "$isIterable");
  $.assertSubtype($._FutureImpl__FutureImpl$wait(t1, $.JSArray), "$isFuture", [$.JSArray], "$asFuture").then$1(new $._waitForPendingPorts_closure(callback));
},

_serializeMessage: function(message) {
  var t1;
  if ($globalState.supportsWorkers) {
    t1 = new $._JsSerializer(0, new $._MessageTraverserVisitedMap());
    t1._visited = new $._JsVisitedMap(null);
    return t1.traverse$1(message);
  } else {
    t1 = new $._JsCopier(new $._MessageTraverserVisitedMap());
    t1._visited = new $._JsVisitedMap(null);
    return t1.traverse$1(message);
  }
},

_deserializeMessage: function(message) {
  if ($globalState.supportsWorkers)
    return new $._JsDeserializer($.assertSubtype(null, "$isMap", [$.JSInt, null], "$asMap")).deserialize$1(message);
  else
    return message;
},

CloseToken: {"": "Object;", $isCloseToken: true},

JsIsolateSink: {"": "EventSink;_isClosed,_port<",
  add$1: function(_, message) {
    var t1 = this._port;
    t1.send$1(t1, message);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$isIsolateSink && $.$eq(this._port, other.get$_port());
  },
  get$hashCode: function(_) {
    return $.get$hashCode$(this._port) + 499;
  },
  $isJsIsolateSink: true,
  $asIsolateSink: null,
  $asObject: null,
  $isIsolateSink: true
},

_Manager: {"": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
  set$isolates: function(v) {
    this.isolates = $.propertyTypeCheck(v, "$isMap");
  },
  set$managers: function(v) {
    this.managers = $.propertyTypeCheck(v, "$isMap");
  },
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    t2 = $.get$globalWorker();
    this.isWorker = t1 && $.boolConversionCheck($.get$globalPostMessageDefined());
    if (!$.boolConversionCheck(this.isWorker))
      if (t2 != null) {
        $.get$IsolateNatives_thisScript();
        t2 = true;
      } else
        t2 = false;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && !$.boolConversionCheck(this.isWorker);
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { $.IsolateNatives__processWorkerMessage$closure.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  _Manager$1: function(entry) {
    var t1, t2, t3;
    $.propertyTypeCheck(entry, "$isFunction");
    this._nativeDetectEnvironment$0();
    t1 = $._IsolateEvent;
    this.topEventLoop = new $._EventLoop($.assertSubtype($.assertSubtype($.ListQueue$(null, t1), "$isQueue", [t1], "$asQueue"), "$isQueue", [$._IsolateEvent], "$asQueue"), 0);
    t1 = $.JSInt;
    t2 = $._IsolateContext;
    t3 = new $.HashMap(0, null, null, null, null);
    $.setRuntimeTypeInfo(t3, [t1, t2]);
    this.set$isolates($.assertSubtype(t3, "$isMap", [t1, t2], "$asMap"));
    t2 = $.JSInt;
    t1 = new $.HashMap(0, null, null, null, null);
    $.setRuntimeTypeInfo(t1, [t2, null]);
    this.set$managers($.assertSubtype(t1, "$isMap", [t2, null], "$asMap"));
    if ($.boolConversionCheck(this.isWorker)) {
      this.mainManager = new $._MainManagerStub();
      this._nativeInitWorkerMessageHandler$0();
    }
  },
  $is_Manager: true,
  static: {
_Manager$: function(entry) {
  var t1;
  $.propertyTypeCheck(entry, "$isFunction");
  t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, $.assertSubtype(null, "$isMap", [$.JSInt, $._IsolateContext], "$asMap"), null, $.assertSubtype(null, "$isMap", [$.JSInt, null], "$asMap"), entry);
  t1._Manager$1(entry);
  return t1;
}}

},

_IsolateContext: {"": "Object;id,ports,isolateStatics<",
  set$ports: function(receiver, v) {
    this.ports = $.propertyTypeCheck(v, "$isMap");
  },
  eval$1: function(code) {
    var old, result, t1;
    $.propertyTypeCheck(code, "$isFunction");
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = $.propertyTypeCheck(old, "$is_IsolateContext");
      if (old != null) {
        t1 = old;
        t1._setGlobals$0;
        $ = t1.get$isolateStatics();
      }
    }
    return result;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return $.propertyTypeCheck(t1.$index(t1, portId), "$isReceivePort");
  },
  register$2: function(portId, port) {
    var t1;
    if (this.ports.containsKey$1(portId))
      throw $.wrapException(new $._ExceptionImplementation("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    if (this.ports._liblib1$_length === 0) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2, t3;
    t1 = $globalState;
    t2 = t1.nextIsolateId;
    t1.nextIsolateId = t2 + 1;
    this.id = t2;
    t2 = $.JSInt;
    t1 = $.ReceivePort;
    t3 = new $.HashMap(0, null, null, null, null);
    $.setRuntimeTypeInfo(t3, [t2, t1]);
    this.set$ports(this, $.assertSubtype(t3, "$isMap", [t2, t1], "$asMap"));
    this.isolateStatics = new Isolate();
  },
  $is_IsolateContext: true,
  $asObject: null,
  static: {
_IsolateContext$: function() {
  var t1 = new $._IsolateContext(null, $.assertSubtype(null, "$isMap", [$.JSInt, $.ReceivePort], "$asMap"), null);
  t1._IsolateContext$0();
  return t1;
}}

},

_EventLoop: {"": "Object;events,activeTimerCount",
  dequeue$0: function() {
    var t1 = this.events;
    if (t1._head === t1._tail)
      return;
    return $.propertyTypeCheck(t1.removeFirst$0(), "$is_IsolateEvent");
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null && $globalState.isolates.containsKey$1($globalState.rootContext.id) && $.boolConversionCheck($globalState.fromCommandLine) && $globalState.rootContext.ports._liblib1$_length === 0)
      throw $.wrapException(new $._ExceptionImplementation("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event, t1, t2;
    $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      t1 = $globalState;
      if ($.boolConversionCheck(t1.isWorker)) {
        t2 = t1.isolates;
        t2.get$isEmpty;
        t2 = t2._liblib1$_length === 0 && t1.topEventLoop.activeTimerCount === 0;
      } else
        t2 = false;
      if (t2) {
        t1 = t1.mainManager;
        t2 = $._serializeMessage($.makeLiteralMap(["command", "close"]));
        t1.postMessage$1;
        self.postMessage(t2);
      }
      return false;
    }
    $event.process$0;
    $event.isolate.eval$1($event.fn);
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1, t2;
    if (!$.boolConversionCheck($globalState.isWorker))
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        t1 = $globalState.mainManager;
        t2 = $._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)]));
        t1.postMessage$1;
        self.postMessage(t2);
      }

  },
  $is_EventLoop: true
},

_EventLoop__runHelper_next: {"": "Closure;this_0",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    $.assertFunctionSubtype(this, "void_");
    $.get$_Zone__current().createTimer$2($.Duration_0, this);
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true
},

_IsolateEvent: {"": "Object;isolate,fn,message", $is_IsolateEvent: true},

_MainManagerStub: {"": "Object;", $is_MainManagerStub: true},

IsolateNatives__processWorkerMessage_closure: {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    $.IsolateNatives__startIsolate(this.entryPoint_0, this.replyTo_1);
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true
},

_BaseSendPort: {"": "Object;_isolateId<",
  _checkReplyTo$1: function(replyTo) {
    if (replyTo != null && (typeof replyTo !== "object" || replyTo === null || !$.getInterceptor(replyTo).$is_NativeJsSendPort) && (typeof replyTo !== "object" || replyTo === null || !$.getInterceptor(replyTo).$is_WorkerSendPort) && true)
      throw $.wrapException(new $._ExceptionImplementation("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var t1, t2, t3, port;
    t1 = null;
    t2 = t1;
    t3 = new $._FutureImpl(0, $.get$_Zone__current().fork$0(), null);
    $.setRuntimeTypeInfo(t3, [t2]);
    t3 = new $._AsyncCompleter($.assertSubtype(t3, "$isFuture", [t2], "$asFuture"), false);
    $.setRuntimeTypeInfo(t3, [t1]);
    t3._Completer$0(t2);
    $.assertSubtype(t3, "$isCompleter", [null], "$asCompleter");
    port = $.ReceivePortImpl$();
    this.send$2(this, message, new $._NativeJsSendPort(port, $globalState.currentContext.id));
    t2 = new $._BaseSendPort_call_closure(t3, port);
    $.assertFunctionSubtype(t2, "void__dynamic_SendPort");
    port._callback = t2;
    return t3.get$future();
  },
  $isFunction: true,
  $asObject: null,
  $signature: function() {
    return {func: "Future__dynamic", ret: $.Future, args: [null]};
  },
  $isSendPort: true
},

_BaseSendPort_call_closure: {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1 = this.port_1;
    t1._callback = null;
    $globalState.currentContext.unregister$1(t1._id);
    t1 = this.completer_0;
    if (typeof value === "object" && value !== null && !!$.getInterceptor(value).$isException)
      t1.completeError$1(value);
    else
      t1.complete$1(t1, value);
  },
  $isFunction: true,
  $asObject: null,
  $is_void__K_V: true,
  $is_void__dynamic_SendPort: true,
  $is_dynamic__dynamic_dynamic: true,
  $is_void__String_String: true,
  $is_void__K_V0: true
},

_NativeJsSendPort: {"": "_BaseSendPort;_receivePort<,_isolateId",
  send$2: function(_, message, replyTo) {
    $.propertyTypeCheck(replyTo, "$isSendPort");
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_closure(this, message, replyTo));
  },
  send$1: function($receiver, message) {
    return this.send$2($receiver, message, null);
  },
  $eq: function(_, other) {
    var t1, t2;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_NativeJsSendPort) {
      t1 = this._receivePort;
      t2 = other._receivePort;
      t2 = t1 == null ? t2 == null : t1 === t2;
      t1 = t2;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    return this._receivePort._id;
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true,
  $asObject: null
},

_NativeJsSendPort_send_closure: {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    t4 = $globalState.isolates;
    isolate = t4.$index(t4, t2.get$_isolateId());
    if (isolate == null)
      return;
    if (t2.get$_receivePort()._callback == null)
      return;
    shouldSerialize = $globalState.currentContext != null && $globalState.currentContext.id !== t2.get$_isolateId();
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    t3 = $globalState.topEventLoop;
    t4 = "receive " + $.S(msg);
    t3.enqueue$3;
    t3 = t3.events;
    t4 = new $._IsolateEvent($.propertyTypeCheck(isolate, "$is_IsolateContext"), new $._NativeJsSendPort_send__closure(t1, t2, shouldSerialize), t4);
    $.assertSubtypeOfRuntimeType(t4, $.getRuntimeTypeArgument(t3, "ListQueue", 0));
    t3._add$1(t4);
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true
},

_NativeJsSendPort_send__closure: {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (t1.get$_receivePort()._callback != null) {
      if (this.shouldSerialize_5) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t2 = this.box_0;
      t1.get$_receivePort()._callback$2(t2.msg_0, t2.reply_1);
    }
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true
},

_WorkerSendPort: {"": "_BaseSendPort;_workerId<,_receivePortId,_isolateId",
  send$2: function(_, message, replyTo) {
    $.propertyTypeCheck(replyTo, "$isSendPort");
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_closure(this, message, replyTo));
  },
  send$1: function($receiver, message) {
    return this.send$2($receiver, message, null);
  },
  $eq: function(_, other) {
    var t1, t2;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_WorkerSendPort) {
      t1 = this._workerId;
      t2 = other._workerId;
      if (t1 == null ? t2 == null : t1 === t2) {
        t1 = this._isolateId;
        t2 = other._isolateId;
        if (t1 == null ? t2 == null : t1 === t2) {
          t1 = this._receivePortId;
          t2 = other._receivePortId;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2;
    t1 = this._workerId;
    if (t1 == null)
      throw t1.$shl();
    t2 = this._isolateId;
    if (t2 == null)
      throw t2.$shl();
    return $.JSInt_methods.$xor((t1 << 16 ^ t2 << 8) >>> 0, this._receivePortId);
  },
  $is_WorkerSendPort: true,
  $isSendPort: true,
  $asObject: null
},

_WorkerSendPort_send_closure: {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($.boolConversionCheck($globalState.isWorker)) {
      $globalState.mainManager.postMessage$1;
      self.postMessage(workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1.get$_workerId());
      if (manager != null)
        manager.postMessage(workerMessage);
    }
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true
},

ReceivePortImpl: {"": "Object;_id,_callback",
  _callback$2: function(arg0, arg1) {
    return this._callback.call$2(arg0, arg1);
  },
  ReceivePortImpl$0: function() {
    $globalState.currentContext.register$2(this._id, this);
  },
  $isReceivePortImpl: true,
  $isReceivePort: true,
  $asObject: null,
  static: {
"": "ReceivePortImpl__nextFreeId",
ReceivePortImpl$: function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = t1 + 1;
  t1 = new $.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
}}

},

_waitForPendingPorts_closure: {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  $isFunction: true,
  $asObject: null,
  $signature: function() {
    return {func: "dynamic__dynamic", args: [null]};
  }
},

_PendingSendPortFinder: {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1.$indexSet(t1, list, true);
    $.forEach$1$ax(list, new $._PendingSendPortFinder_visitList_closure(this));
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1.$indexSet(t1, map, true);
    $.forEach$1$ax(map.get$values(map), new $._PendingSendPortFinder_visitMap_closure(this));
  },
  visitSendPort$1: function(port) {
  },
  visitIsolateSink$1: function(sink) {
    this.visitSendPort$1(sink._port);
  },
  visitCloseToken$1: function(token) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = new $._JsVisitedMap(null);
  },
  static: {
_PendingSendPortFinder$: function() {
  var t1 = new $._PendingSendPortFinder($.interceptedTypeCheck([], "$isList"), new $._MessageTraverserVisitedMap());
  t1._PendingSendPortFinder$0();
  return t1;
}}

},

_PendingSendPortFinder_visitList_closure: {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function() {
    return {func: "dynamic__dynamic", args: [null]};
  }
},

_PendingSendPortFinder_visitMap_closure: {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function() {
    return {func: "dynamic__dynamic", args: [null]};
  }
},

_JsSerializer: {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    $.propertyTypeCheck(x, "$isSendPort");
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return ["sendport", $globalState.currentManagerId, x._isolateId, x._receivePort._id];
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    throw $.wrapException("Illegal underlying port " + $.S(x));
  },
  visitIsolateSink$1: function(sink) {
    var isClosed = sink._isClosed;
    return ["isolateSink", this.visitSendPort$1(sink._port), isClosed];
  },
  visitCloseToken$1: function(token) {
    return ["closeToken"];
  }
},

_JsCopier: {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    $.propertyTypeCheck(x, "$isSendPort");
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return new $._NativeJsSendPort(x._receivePort, x._isolateId);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return new $._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
    throw $.wrapException("Illegal underlying port " + $.S(x));
  },
  visitIsolateSink$1: function(sink) {
    var result = new $.JsIsolateSink(false, this.visitSendPort$1(sink._port));
    result._isClosed = sink._isClosed;
    return result;
  },
  visitCloseToken$1: function(token) {
    return token;
  }
},

_JsDeserializer: {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    $.listTypeCheck(list);
    t1 = $.getInterceptor$asx(list);
    managerId = $.intTypeCheck(t1.$index(list, 1));
    isolateId = $.intTypeCheck(t1.$index(list, 2));
    receivePortId = $.intTypeCheck(t1.$index(list, 3));
    t1 = $globalState.currentManagerId;
    if (managerId == null ? t1 == null : managerId === t1) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return new $._NativeJsSendPort($.propertyTypeCheck(receivePort, "$isReceivePortImpl"), isolateId);
    } else
      return new $._WorkerSendPort(managerId, receivePortId, isolateId);
  },
  deserializeIsolateSink$1: function(list) {
    var t1, port, result;
    $.listTypeCheck(list);
    t1 = $.getInterceptor$asx(list);
    port = this.deserializeSendPort$1(t1.$index(list, 1));
    result = new $.JsIsolateSink(false, port);
    result._isClosed = $.boolTypeCheck(t1.$index(list, 2));
    return result;
  },
  deserializeCloseToken$1: function(list) {
    $.listTypeCheck(list);
    return $.C_CloseToken;
  }
},

_JsVisitedMap: {"": "Object;tagged",
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  $indexSet: function(_, object, info) {
    $.add$1$ax(this.tagged, object);
    object.__MessageTraverser__attached_info__ = info;
  },
  reset$0: function(_) {
    $.assertHelper(this.tagged == null);
    this.tagged = $.List_List(null, null);
  },
  cleanup$0: function() {
    var $length, i, t1;
    for ($length = this.tagged.length, i = 0; i < $length; ++i) {
      t1 = this.tagged;
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i].__MessageTraverser__attached_info__ = null;
    }
    this.tagged = null;
  },
  $is_MessageTraverserVisitedMap: true,
  $asObject: null
},

_MessageTraverserVisitedMap: {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  },
  $is_MessageTraverserVisitedMap: true
},

_MessageTraverser: {"": "Object;_visited",
  traverse$1: function(x) {
    var result, t1;
    if ($._MessageTraverser_isPrimitive(x))
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!$.getInterceptor(x).$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isJsIsolateSink)
      return this.visitIsolateSink$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isCloseToken)
      return this.visitCloseToken$1(x);
    return this.visitObject$1(x);
  },
  visitObject$1: function(x) {
    throw $.wrapException("Message serialization: Illegal value " + $.S(x) + " passed");
  },
  static: {
_MessageTraverser_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
}}

},

_Copier: {"": "_MessageTraverser;_visited",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.isJsIndexable(list, list[$.dispatchPropertyName])))
      return this.visitList$1$bailout1(1, list);
    t1 = this._visited;
    copy = $.listTypeCheck(t1.$index(t1, list));
    if (copy != null)
      return copy;
    len = list.length;
    copy = $.List_List(len, null);
    t1 = this._visited;
    t1.$indexSet(t1, list, copy);
    for (t1 = copy.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw $.ioore(i);
      copy[i] = t2;
    }
    return copy;
  },
  visitList$1$bailout1: function(state0, list) {
    var t1, copy, len, t2, i, t3;
    t1 = this._visited;
    copy = $.listTypeCheck(t1.$index(t1, list));
    if (copy != null)
      return copy;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    copy = $.List_List(len, null);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    for (t2 = copy.length, i = 0; $.JSInt_methods.$lt(i, len); ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      copy[i] = t3;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = $.propertyTypeCheck(t2.$index(t2, map), "$isMap");
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t2 = new $.HashMap(0, null, null, null, null);
    $.setRuntimeTypeInfo(t2, [null, null]);
    t1.copy_0 = $.assertSubtype(t2, "$isMap", [null, null], "$asMap");
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    map.forEach$1(map, new $._Copier_visitMap_closure(t1, this));
    return t1.copy_0;
  }
},

_Copier_visitMap_closure: {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1, t2;
    t1 = this.box_0.copy_0;
    t2 = this.this_1;
    t1.$indexSet(t1, t2._dispatch$1(key), t2._dispatch$1(val));
  },
  $isFunction: true,
  $asObject: null,
  $is_void__K_V: true,
  $is_void__dynamic_SendPort: true,
  $is_dynamic__dynamic_dynamic: true,
  $is_void__String_String: true,
  $is_void__K_V0: true
},

_Serializer: {"": "_MessageTraverser;_nextFreeRefId,_visited",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = $.intTypeCheck(t1.$index(t1, list));
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = $.intTypeCheck(t1.$index(t1, map));
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    return ["map", id, this._serializeList$1($.toList$0$ax(map.get$keys())), this._serializeList$1($.toList$0$ax(map.get$values(map)))];
  },
  _serializeList$1: function(list) {
    var len, result, t1, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.isJsIndexable(list, list[$.dispatchPropertyName])))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len, null);
    for (t1 = result.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw $.ioore(i);
      result[i] = t2;
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, list) {
    var t1, len, result, t2, i, t3;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = $.List_List(len, null);
    for (t2 = result.length, i = 0; $.JSInt_methods.$lt(i, len); ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      result[i] = t3;
    }
    return result;
  }
},

_Deserializer: {"": "Object;_deserialized",
  set$_deserialized: function(v) {
    this._deserialized = $.propertyTypeCheck(v, "$isMap");
  },
  deserialize$1: function(x) {
    var t1;
    if ($._Deserializer_isPrimitive(x))
      return x;
    t1 = new $.HashMap(0, null, null, null, null);
    $.setRuntimeTypeInfo(t1, [null, null]);
    this.set$_deserialized(t1);
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    var t1, id, result;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    $.assertHelper(typeof x === "object" && x !== null && (x.constructor === Array || !!$.getInterceptor(x).$isList));
    t1 = $.getInterceptor$asx(x);
    switch (t1.$index(x, 0)) {
      case "ref":
        $.listTypeCheck(x);
        id = $.intTypeCheck(t1.$index(x, 1));
        t1 = this._deserialized;
        result = t1.$index(t1, id);
        $.assertHelper(result != null);
        return result;
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      case "isolateSink":
        return this.deserializeIsolateSink$1(x);
      case "closeToken":
        return this.deserializeCloseToken$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    $.listTypeCheck(x);
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    $.intTypeCheck(id);
    dartList = t1.$index(x, 2);
    $.listTypeCheck(dartList);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !$.isJsIndexable(dartList, dartList[$.dispatchPropertyName]))
      return this._deserializeList$1$bailout(1, dartList, id);
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, dartList, id) {
    var t1, len, i;
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = $.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    for (i = 0; $.JSInt_methods.$lt(i, len); ++i)
      t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var t1, t2, id, t3, keys, values, len, i, key;
    $.listTypeCheck(x);
    t1 = new $.HashMap(0, null, null, null, null);
    $.setRuntimeTypeInfo(t1, [null, null]);
    $.assertSubtype(t1, "$isMap", [null, null], "$asMap");
    t2 = $.getInterceptor$asx(x);
    id = $.intTypeCheck(t2.$index(x, 1));
    t3 = this._deserialized;
    t3.$indexSet(t3, id, t1);
    keys = t2.$index(x, 2);
    $.listTypeCheck(keys);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !$.isJsIndexable(keys, keys[$.dispatchPropertyName])))
      return this._deserializeMap$1$bailout(1, x, t2, keys, t1);
    values = t2.$index(x, 3);
    $.listTypeCheck(values);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !$.isJsIndexable(values, values[$.dispatchPropertyName])))
      return this._deserializeMap$1$bailout(2, 0, 0, keys, t1, values);
    len = keys.length;
    $.assertHelper(len === values.length);
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      t1.$indexSet(t1, key, this._deserializeHelper$1(values[i]));
    }
    return t1;
  },
  _deserializeMap$1$bailout: function(state0, x, t2, keys, t1, values) {
    switch (state0) {
      case 0:
        $.listTypeCheck(x);
        t1 = new $.HashMap(0, null, null, null, null);
        $.setRuntimeTypeInfo(t1, [null, null]);
        $.assertSubtype(t1, "$isMap", [null, null], "$asMap");
        t2 = $.getInterceptor$asx(x);
        id = $.intTypeCheck(t2.$index(x, 1));
        t3 = this._deserialized;
        t3.$indexSet(t3, id, t1);
        keys = t2.$index(x, 2);
        $.listTypeCheck(keys);
      case 1:
        state0 = 0;
        values = t2.$index(x, 3);
        $.listTypeCheck(values);
      case 2:
        var id, t3, len, t4, i;
        state0 = 0;
        t2 = $.getInterceptor$asx(keys);
        len = t2.get$length(keys);
        t3 = $.getInterceptor$asx(values);
        t4 = t3.get$length(values);
        $.assertHelper(len == null ? t4 == null : len === t4);
        for (i = 0; $.JSInt_methods.$lt(i, len); ++i)
          t1.$indexSet(t1, this._deserializeHelper$1(t2.$index(keys, i)), this._deserializeHelper$1(t3.$index(values, i)));
        return t1;
    }
  },
  deserializeObject$1: function(x) {
    $.listTypeCheck(x);
    throw $.wrapException("Unexpected serialized object");
  },
  static: {
_Deserializer_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
}}

},

TimerImpl: {"": "Object;_once,_inEventLoop,_handle",
  set$_handle: function(v) {
    this._handle = $.intTypeCheck(v);
  },
  TimerImpl$2: function(milliseconds, callback) {
    var t1, t2;
    $.assertFunctionSubtype(callback, "void_");
    if (milliseconds === 0)
      t1 = $.get$globalThis().setTimeout == null || $.boolConversionCheck($globalState.isWorker);
    else
      t1 = false;
    if (t1) {
      this._handle = 1;
      t1 = $globalState.topEventLoop;
      t2 = $globalState.currentContext;
      t1.enqueue$3;
      t1 = t1.events;
      t2 = new $._IsolateEvent(t2, new $.TimerImpl_internalCallback(this, callback), "timer");
      $.assertSubtypeOfRuntimeType(t2, $.getRuntimeTypeArgument(t1, "ListQueue", 0));
      t1._add$1(t2);
      this._inEventLoop = true;
    } else if ($.get$globalThis().setTimeout != null) {
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(new $.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
    } else {
      $.assertHelper(milliseconds > 0);
      throw $.wrapException(new $.UnsupportedError("Timer greater than 0."));
    }
  },
  $isTimer: true,
  $asObject: null,
  static: {
TimerImpl$: function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, $.assertFunctionSubtype(callback, "void_"));
  return t1;
}}

},

TimerImpl_internalCallback: {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.this_0.set$_handle(null);
    this.callback_1.call$0();
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true
},

TimerImpl_internalCallback0: {"": "Closure;this_2,callback_3",
  call$0: function() {
    this.this_2.set$_handle(null);
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
    this.callback_3.call$0();
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true
}}],
["_js_helper", "dart:_js_helper", , {
isJsIndexable: function(object, record) {
  var result;
  if (record != null) {
    result = record.x;
    if (result != null)
      return result;
  }
  return typeof object === "object" && object !== null && !!$.getInterceptor(object).$isJavaScriptIndexingBehavior;
},

S: function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = $.toString$0(value);
  if (typeof res !== "string")
    throw $.wrapException(new $.ArgumentError(value));
  return res;
},

Primitives_objectHashCode: function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = Math.random() * 0x3fffffff | 0;
    object.$identityHash = hash;
  }
  return hash;
},

Primitives_printString: function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof console == "object" && typeof console.log == "function") {
    console.log(string);
    return;
  }
  if (typeof window == "object")
    return;
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
},

Primitives_objectTypeName: function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback($.getInterceptor(object));
  if ($name === "Object") {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$s($name);
  if (t1.codeUnitAt$1($name, 0) === 36)
    $name = t1.substring$1($name, 1);
  t1 = $.getRuntimeTypeInfo(object);
  $.listTypeCheck(t1);
  return $name + $.joinArguments(t1, 0);
},

Primitives_objectToString: function(object) {
  return "Instance of '" + $.Primitives_objectTypeName(object) + "'";
},

Primitives_newFixedList: function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
},

Primitives_getProperty: function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException(new $.ArgumentError(object));
  return object[key];
},

Primitives_setProperty: function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException(new $.ArgumentError(object));
  object[key] = value;
},

iae: function(argument) {
  throw $.wrapException(new $.ArgumentError(argument));
},

ioore: function(index) {
  if (typeof index !== "number" || Math.floor(index) !== index)
    $.iae(index);
  $.numTypeCheck(index);
  throw $.wrapException(new $.RangeError("value " + $.S(index)));
},

wrapException: function(ex) {
  var wrapper = $.DartError$(ex == null ? new $.NullThrownError() : ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.wrapException$closure);
  else
    wrapper.stack = $.stringTypeCheck(new Error().stack);
  return wrapper;
},

throwExpression: function(ex) {
  throw $.wrapException(ex);
},

unwrapException: function(ex) {
  var message, number, ieErrorCode, t1, t2, t3, nullLiteralCall, t4, t5, t6, t7, t8, match;
  if (ex == null)
    return;
  if (typeof ex !== "object")
    return ex;
  if ("dartException" in ex)
    return ex.dartException;
  else if (!("message" in ex))
    return ex;
  message = ex.message;
  if ("number" in ex && typeof ex.number == "number") {
    number = ex.number;
    ieErrorCode = number & 65535;
    if (($.JSInt_methods.$shr(number, 16) & 8191) === 10)
      switch (ieErrorCode) {
        case 438:
          return $.JsNoSuchMethodError$($.S(message) + " (Error " + ieErrorCode + ")", null);
        case 445:
        case 5007:
          t1 = $.S(message) + " (Error " + ieErrorCode + ")";
          return new $.NullError(t1, $.stringTypeCheck(null));
      }
  }
  if (ex instanceof TypeError) {
    t1 = $.get$TypeErrorDecoder_noSuchMethodPattern();
    t2 = $.get$TypeErrorDecoder_notClosurePattern();
    t3 = $.get$TypeErrorDecoder_nullCallPattern();
    nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
    t4 = $.get$TypeErrorDecoder_undefinedCallPattern();
    t5 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
    t6 = $.get$TypeErrorDecoder_nullPropertyPattern();
    $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
    t7 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
    t8 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
    match = t1.matchTypeError$1(message);
    if (match != null)
      return $.JsNoSuchMethodError$(message, match);
    else {
      match = t2.matchTypeError$1(message);
      if (match != null) {
        match.method = "call";
        return $.JsNoSuchMethodError$(message, match);
      } else {
        match = t3.matchTypeError$1(message);
        if (match == null) {
          match = nullLiteralCall.matchTypeError$1(message);
          if (match == null) {
            match = t4.matchTypeError$1(message);
            if (match == null) {
              match = t5.matchTypeError$1(message);
              if (match == null) {
                match = t6.matchTypeError$1(message);
                if (match == null) {
                  match = nullLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = t7.matchTypeError$1(message);
                    if (match == null) {
                      match = t8.matchTypeError$1(message);
                      t1 = match != null;
                    } else
                      t1 = true;
                  } else
                    t1 = true;
                } else
                  t1 = true;
              } else
                t1 = true;
            } else
              t1 = true;
          } else
            t1 = true;
        } else
          t1 = true;
        if (t1) {
          $.stringTypeCheck(message);
          return new $.NullError(message, $.stringTypeCheck(match == null ? null : match.method));
        }
      }
    }
    return new $.UnknownJsTypeError($.stringTypeCheck(typeof message === "string" ? message : ""));
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return new $.StackOverflowError();
    return new $.ArgumentError(null);
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return new $.StackOverflowError();
  return ex;
},

getTraceFromException: function(exception) {
  if (exception == null)
    return;
  if (typeof exception !== "object")
    return;
  if ("stack" in exception)
    return new $._StackTrace(exception.stack);
  else
    return;
},

makeLiteralMap: function(keyValuePairs) {
  var iterator, result, key;
  iterator = $.get$iterator$ax($.listTypeCheck(keyValuePairs));
  result = new $.LinkedHashMap(0, null, null, null, null, null, 0);
  $.setRuntimeTypeInfo(result, [null, null]);
  for (; $.boolConversionCheck(iterator.moveNext$0());) {
    key = $.stringTypeCheck(iterator.get$current());
    iterator.moveNext$0();
    result.$indexSet(result, key, iterator.get$current());
  }
  return result;
},

invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2) {
  $.propertyTypeCheck(closure, "$isFunction");
  $.intTypeCheck(numberOfArguments);
  if (numberOfArguments === 0)
    return $._callInIsolate(isolate, new $.invokeClosure_closure(closure));
  else if (numberOfArguments === 1)
    return $._callInIsolate(isolate, new $.invokeClosure_closure0(closure, arg1));
  else if (numberOfArguments === 2)
    return $._callInIsolate(isolate, new $.invokeClosure_closure1(closure, arg1, arg2));
  else
    throw $.wrapException(new $._ExceptionImplementation("Unsupported number of arguments for wrapped closure"));
},

convertDartClosureToJS: function(closure, arity) {
  var $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($globalState.currentContext, $.invokeClosure$closure.call$5);
  closure.$identity = $function;
  return $function;
},

boolConversionCheck: function(value) {
  $.boolTypeCheck(value);
  $.assertHelper(value != null);
  return value;
},

stringTypeCheck: function(value) {
  if (value == null)
    return value;
  if (typeof value === "string")
    return value;
  throw $.wrapException($.TypeErrorImplementation$(value, "String"));
},

doubleTypeCheck: function(value) {
  if (value == null)
    return value;
  if (typeof value === "number")
    return value;
  throw $.wrapException($.TypeErrorImplementation$(value, "double"));
},

numTypeCheck: function(value) {
  if (value == null)
    return value;
  if (typeof value === "number")
    return value;
  throw $.wrapException($.TypeErrorImplementation$(value, "num"));
},

boolTypeCheck: function(value) {
  if (value == null)
    return value;
  if (typeof value === "boolean")
    return value;
  throw $.wrapException($.TypeErrorImplementation$(value, "bool"));
},

intTypeCheck: function(value) {
  if (value == null)
    return value;
  if (typeof value === "number" && Math.floor(value) === value)
    return value;
  throw $.wrapException($.TypeErrorImplementation$(value, "int"));
},

propertyTypeCheck: function(value, property) {
  var t1;
  if (value == null)
    return value;
  if (!!value[property])
    return value;
  t1 = $.getInterceptor$asx(property);
  $.throwExpression($.TypeErrorImplementation$(value, t1.substring$2(property, 3, t1.get$length(property))));
},

interceptedTypeCheck: function(value, property) {
  var t1;
  if (value == null)
    return value;
  if (typeof value === "object" && $.getInterceptor(value)[property])
    return value;
  t1 = $.getInterceptor$asx(property);
  $.throwExpression($.TypeErrorImplementation$(value, t1.substring$2(property, 3, t1.get$length(property))));
},

stringSuperTypeCheck: function(value, property) {
  var t1;
  if (value == null)
    return value;
  if (typeof value === "string")
    return value;
  if (!!value[property])
    return value;
  t1 = $.getInterceptor$asx(property);
  $.throwExpression($.TypeErrorImplementation$(value, t1.substring$2(property, 3, t1.get$length(property))));
},

stringSuperNativeTypeCheck: function(value, property) {
  var t1;
  if (value == null)
    return value;
  if (typeof value === "string")
    return value;
  if ($.getInterceptor(value)[property])
    return value;
  t1 = $.getInterceptor$asx(property);
  $.throwExpression($.TypeErrorImplementation$(value, t1.substring$2(property, 3, t1.get$length(property))));
},

listTypeCheck: function(value) {
  if (value == null)
    return value;
  if (typeof value === "object" && value !== null && (value.constructor === Array || !!$.getInterceptor(value).$isList))
    return value;
  throw $.wrapException($.TypeErrorImplementation$(value, "List"));
},

listSuperNativeTypeCheck: function(value, property) {
  var t1;
  if (value == null)
    return value;
  if (typeof value === "object" && value !== null && (value.constructor === Array || !!$.getInterceptor(value).$isList))
    return value;
  if ($.getInterceptor(value)[property])
    return value;
  t1 = $.getInterceptor$asx(property);
  $.throwExpression($.TypeErrorImplementation$(value, t1.substring$2(property, 3, t1.get$length(property))));
},

voidTypeCheck: function(value) {
  if (value == null)
    return value;
  throw $.wrapException($.TypeErrorImplementation$(value, "void"));
},

assertHelper: function(condition) {
  if (typeof condition === "object" && condition !== null && !!$.getInterceptor(condition).$isFunction)
    condition = condition.call$0();
  if (typeof condition !== "boolean")
    throw $.wrapException(new $.TypeErrorImplementation("type '" + $.Primitives_objectTypeName(condition) + "' is not a subtype of type 'bool'"));
  if (!condition)
    throw $.wrapException(new $.AssertionError());
},

throwCyclicInit: function(staticName) {
  throw $.wrapException(new $.CyclicInitializationError("Cyclic initialization for static " + $.stringTypeCheck(staticName)));
},

setRuntimeTypeInfo: function(target, typeInfo) {
  $.assertHelper(typeInfo == null || typeof typeInfo === "object" && typeInfo !== null && typeInfo.constructor === Array);
  if (target != null)
    target.$builtinTypeInfo = typeInfo;
  return target;
},

getRuntimeTypeInfo: function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
},

getRuntimeTypeArguments: function(target, substitutionName) {
  return $.substitute(target["$as" + $.S(substitutionName)], $.getRuntimeTypeInfo(target));
},

getRuntimeTypeArgument: function(target, substitutionName, index) {
  var $arguments, t1;
  $.stringTypeCheck(substitutionName);
  $.intTypeCheck(index);
  $arguments = $.getRuntimeTypeArguments(target, substitutionName);
  if ($arguments == null)
    t1 = null;
  else {
    $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
    t1 = $arguments[index];
  }
  return t1;
},

runtimeTypeToString: function(type) {
  if (type == null)
    return "dynamic";
  else if (typeof type === "object" && type !== null && type.constructor === Array) {
    $.assertHelper(true);
    $.assertHelper(true);
    return type[0].builtin$cls + $.joinArguments(type, 1);
  } else if (typeof type == "function")
    return type.builtin$cls;
  else
    return;
},

joinArguments: function(types, startIndex) {
  var t1, buffer, index, firstArgument, allDynamic, argument, str;
  if (types == null)
    return "";
  t1 = typeof types === "object" && types !== null && types.constructor === Array;
  $.assertHelper(t1);
  buffer = $.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; $.assertHelper(t1), index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    $.assertHelper(t1);
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    str = $.runtimeTypeToString(argument);
    str = typeof str === "string" ? str : str;
    buffer._contents = buffer._contents + str;
  }
  return allDynamic ? "" : "<" + $.S(buffer) + ">";
},

substitute: function(substitution, $arguments) {
  $.assertHelper(substitution == null || typeof substitution === "object" && substitution !== null && substitution.constructor === Array || typeof substitution == "function");
  $.assertHelper($arguments == null || typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
  if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
    $arguments = substitution;
  else if (typeof substitution == "function") {
    substitution = $.invokeOn(substitution, null, $arguments);
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function")
      $arguments = $.invokeOn(substitution, null, $arguments);
  }
  return $arguments;
},

checkSubtype: function(object, isField, checks, asField) {
  var $arguments, interceptor;
  if (object == null)
    return false;
  $arguments = $.getRuntimeTypeInfo(object);
  interceptor = $.getInterceptor(object);
  if (interceptor[isField] == null)
    return false;
  return $.areSubtypes($.substitute(interceptor[asField], $arguments), checks);
},

computeTypeName: function(isField, $arguments) {
  return $.substring$2$s(isField, 3, isField.length) + $.joinArguments($arguments, 0);
},

assertSubtype: function(object, isField, checks, asField) {
  $.stringTypeCheck(isField);
  $.listTypeCheck(checks);
  $.stringTypeCheck(asField);
  if (object != null && !$.checkSubtype(object, isField, checks, asField))
    throw $.wrapException($.TypeErrorImplementation$(object, $.computeTypeName(isField, checks)));
  return object;
},

areSubtypes: function(s, t) {
  var t1, t2, t3, len, i;
  if (s == null || t == null)
    return true;
  t1 = typeof s === "object" && s !== null && s.constructor === Array;
  $.assertHelper(t1);
  t2 = typeof t === "object" && t !== null && t.constructor === Array;
  $.assertHelper(t2);
  $.assertHelper(t1);
  t3 = s.length;
  $.assertHelper(t2);
  $.assertHelper(t3 === t.length);
  $.assertHelper(t1);
  len = s.length;
  for (i = 0; i < len; ++i) {
    $.assertHelper(t1);
    t3 = s[i];
    $.assertHelper(t2);
    if (!$.isSubtype(t3, t[i]))
      return false;
  }
  return true;
},

assertFunctionSubtype: function(object, signatureName, contextName, context, typeArguments) {
  $.stringTypeCheck(signatureName);
  if (!$.checkFunctionSubtype(object, signatureName, $.stringTypeCheck(contextName), context, typeArguments))
    throw $.wrapException($.TypeErrorImplementation$(object, signatureName));
  return object;
},

checkFunctionSubtype: function(target, signatureName, contextName, context, typeArguments) {
  var interceptor, signatureLocation, typeSignature, targetSignatureFunction, targetSignature;
  if (target == null)
    return true;
  interceptor = $.getInterceptor(target);
  if (interceptor["$is_" + signatureName] != null)
    return true;
  signatureLocation = $;
  if (contextName != null)
    signatureLocation = signatureLocation[contextName];
  typeSignature = signatureLocation["$signature_" + signatureName];
  if (typeSignature == null)
    return false;
  targetSignatureFunction = interceptor.$signature;
  if (targetSignatureFunction == null)
    return false;
  targetSignature = $.invokeOn(targetSignatureFunction, interceptor, null);
  if (typeof typeSignature == "function")
    if (typeArguments != null)
      typeSignature = $.invokeOn(typeSignature, null, typeArguments);
    else
      typeSignature = context != null ? $.invokeOn(typeSignature, null, $.getRuntimeTypeArguments(context, contextName)) : $.invokeOn(typeSignature, null, null);
  return $.isFunctionSubtype(targetSignature, typeSignature);
},

computeSignature: function(signature, context, contextName) {
  return $.invokeOn(signature, context, $.getRuntimeTypeArguments(context, contextName));
},

checkSubtypeOfRuntimeType: function(o, t) {
  var rti, type;
  if (o == null)
    return t == null || t.builtin$cls === "Object";
  if (t == null)
    return true;
  rti = $.getRuntimeTypeInfo(o);
  o = $.getInterceptor(o);
  if (rti != null) {
    type = rti.slice();
    type.splice(0, 0, o);
  } else
    type = o;
  return $.isSubtype(type, t);
},

assertSubtypeOfRuntimeType: function(object, type) {
  if (object != null && !$.checkSubtypeOfRuntimeType(object, type))
    throw $.wrapException($.TypeErrorImplementation$(object, $.runtimeTypeToString(type)));
  return object;
},

isSubtype: function(s, t) {
  var targetSignatureFunction, t1, typeOfS, t2, typeOfT, substitution;
  if (s === t)
    return true;
  if (s == null || t == null)
    return true;
  if (t.func != null) {
    if (s.func == null) {
      if (s["$is_" + $.S(t.func)] != null)
        return true;
      targetSignatureFunction = s.$signature;
      if (targetSignatureFunction == null)
        return false;
      $.assertHelper(typeof targetSignatureFunction == "function");
      $.assertHelper(null == null || false);
      s = targetSignatureFunction.apply(s, null);
    }
    return $.isFunctionSubtype(s, t);
  }
  if (t.builtin$cls === "Function" && s.func != null)
    return true;
  t1 = typeof s === "object" && s !== null && s.constructor === Array;
  if (t1) {
    $.assertHelper(true);
    typeOfS = s[0];
  } else
    typeOfS = s;
  t2 = typeof t === "object" && t !== null && t.constructor === Array;
  if (t2) {
    $.assertHelper(true);
    typeOfT = t[0];
  } else
    typeOfT = t;
  if (typeOfS["$is" + $.runtimeTypeToString(typeOfT)] == null)
    return false;
  substitution = typeOfT !== typeOfS ? typeOfS["$as" + $.runtimeTypeToString(typeOfT)] : null;
  if (!t1 && substitution == null || !t2)
    return true;
  t1 = t1 ? s.slice(1) : null;
  t2 = t2 ? t.slice(1) : null;
  return $.areSubtypes($.substitute(substitution, t1), t2);
},

isAssignable: function(s, t) {
  return $.isSubtype(s, t) || $.isSubtype(t, s);
},

areAssignable: function(s, t, allowShorter) {
  var t1, t2, sLength, tLength, i, t3, t4;
  $.listTypeCheck(s);
  $.listTypeCheck(t);
  if (t == null && s == null)
    return true;
  if (t == null)
    return allowShorter;
  if (s == null)
    return false;
  t1 = typeof s === "object" && s !== null && s.constructor === Array;
  $.assertHelper(t1);
  t2 = typeof t === "object" && t !== null && t.constructor === Array;
  $.assertHelper(t2);
  $.assertHelper(t1);
  sLength = s.length;
  $.assertHelper(t2);
  tLength = t.length;
  if (allowShorter) {
    if (sLength < tLength)
      return false;
  } else if (sLength !== tLength)
    return false;
  for (i = 0; i < tLength; ++i) {
    $.assertHelper(t1);
    t3 = s[i];
    $.assertHelper(t2);
    t4 = t[i];
    if (!($.isSubtype(t3, t4) || $.isSubtype(t4, t3)))
      return false;
  }
  return true;
},

areAssignableMaps: function(s, t) {
  if (t == null)
    return true;
  if (s == null)
    return false;
  $.assertHelper(typeof s == 'object');
  $.assertHelper(typeof t == 'object');
  return      function (t, s, isAssignable) {
       for (var $name in t) {
         if (!s.hasOwnProperty($name)) {
           return false;
         }
         var tType = t[$name];
         var sType = s[$name];
         if (!isAssignable.call$2(sType, tType)) {
          return false;
         }
       }
       return true;
     }(t, s, $.isAssignable$closure)
  ;
},

isFunctionSubtype: function(s, t) {
  var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, t1, t2, pos, t3, t4, tPos, sPos;
  $.assertHelper(t.func != null);
  if (s.func == null)
    return false;
  if (s.void != null) {
    if (t.void == null && t.ret != null)
      return false;
  } else if (t.void == null) {
    sReturnType = s.ret;
    tReturnType = t.ret;
    if (!($.isSubtype(sReturnType, tReturnType) || $.isSubtype(tReturnType, sReturnType)))
      return false;
  }
  sParameterTypes = s.args;
  tParameterTypes = t.args;
  sOptionalParameterTypes = s.opt;
  tOptionalParameterTypes = t.opt;
  if (sParameterTypes != null) {
    $.assertHelper(typeof sParameterTypes === "object" && sParameterTypes !== null && sParameterTypes.constructor === Array);
    sParametersLen = sParameterTypes.length;
  } else
    sParametersLen = 0;
  if (tParameterTypes != null) {
    $.assertHelper(typeof tParameterTypes === "object" && tParameterTypes !== null && tParameterTypes.constructor === Array);
    tParametersLen = tParameterTypes.length;
  } else
    tParametersLen = 0;
  if (sOptionalParameterTypes != null) {
    $.assertHelper(typeof sOptionalParameterTypes === "object" && sOptionalParameterTypes !== null && sOptionalParameterTypes.constructor === Array);
    sOptionalParametersLen = sOptionalParameterTypes.length;
  } else
    sOptionalParametersLen = 0;
  if (tOptionalParameterTypes != null) {
    $.assertHelper(typeof tOptionalParameterTypes === "object" && tOptionalParameterTypes !== null && tOptionalParameterTypes.constructor === Array);
    tOptionalParametersLen = tOptionalParameterTypes.length;
  } else
    tOptionalParametersLen = 0;
  if (sParametersLen > tParametersLen)
    return false;
  if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
    return false;
  if (sParametersLen === tParametersLen) {
    if (!$.areAssignable(sParameterTypes, tParameterTypes, false))
      return false;
    if (!$.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
      return false;
  } else {
    for (t1 = typeof sParameterTypes === "object" && sParameterTypes !== null && sParameterTypes.constructor === Array, t2 = typeof tParameterTypes === "object" && tParameterTypes !== null && tParameterTypes.constructor === Array, pos = 0; pos < sParametersLen; ++pos) {
      $.assertHelper(t1);
      t3 = sParameterTypes[pos];
      $.assertHelper(t2);
      t4 = tParameterTypes[pos];
      if (!($.isSubtype(t3, t4) || $.isSubtype(t4, t3)))
        return false;
    }
    for (t1 = typeof sOptionalParameterTypes === "object" && sOptionalParameterTypes !== null && sOptionalParameterTypes.constructor === Array, tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
      $.assertHelper(t1);
      t3 = sOptionalParameterTypes[sPos];
      $.assertHelper(t2);
      t4 = tParameterTypes[tPos];
      if (!($.isSubtype(t3, t4) || $.isSubtype(t4, t3)))
        return false;
    }
    for (t1 = typeof tOptionalParameterTypes === "object" && tOptionalParameterTypes !== null && tOptionalParameterTypes.constructor === Array, sPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
      $.assertHelper(t1);
      t2 = tOptionalParameterTypes[sPos];
      $.assertHelper(t1);
      t3 = tOptionalParameterTypes[tPos];
      if (!($.isSubtype(t2, t3) || $.isSubtype(t3, t2)))
        return false;
    }
  }
  return $.areAssignableMaps(s.named, t.named);
},

invokeOn: function($function, receiver, $arguments) {
  $.assertHelper(typeof $function == "function");
  $.assertHelper($arguments == null || typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
  return $function.apply(receiver, $arguments);
},

typeNameInChrome: function(obj) {
  return obj.constructor.name;
},

typeNameInSafari: function(obj) {
  return $.constructorNameFallback(obj);
},

typeNameInOpera: function(obj) {
  return $.constructorNameFallback(obj);
},

typeNameInFirefox: function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
},

typeNameInIE: function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && obj instanceof window.DataView)
      return "DataView";
  return $name;
},

constructorNameFallback: function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof $constructor === "function") {
    $name = $constructor.builtin$cls;
    if ($name != null)
      return $.stringTypeCheck($name);
    $name = $constructor.name;
    if (typeof $name === "string")
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    else
      t1 = false;
    if (t1)
      return $.stringTypeCheck($name);
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
},

alternateTag: function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
},

getFunctionForTypeNameOf: function() {
  var getTagFunction = $.getBaseFunctionForTypeNameOf();
  if (typeof dartExperimentalFixupGetTag == "function")
    return $.applyExperimentalFixup(dartExperimentalFixupGetTag, getTagFunction);
  return getTagFunction;
},

getBaseFunctionForTypeNameOf: function() {
  if (typeof navigator !== "object")
    return $.propertyTypeCheck($.typeNameInChrome$closure, "$isFunction");
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.propertyTypeCheck($.typeNameInChrome$closure, "$isFunction");
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.propertyTypeCheck($.typeNameInFirefox$closure, "$isFunction");
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.propertyTypeCheck($.typeNameInIE$closure, "$isFunction");
  else if (userAgent.indexOf("Opera") !== -1)
    return $.propertyTypeCheck($.typeNameInOpera$closure, "$isFunction");
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.propertyTypeCheck($.typeNameInSafari$closure, "$isFunction");
  else
    return $.propertyTypeCheck($.constructorNameFallback$closure, "$isFunction");
},

applyExperimentalFixup: function(fixupJSFunction, originalGetTagDartFunction) {
  return new $.applyExperimentalFixup_newGetTagDartFunction(fixupJSFunction((function(invoke, closure){return function(arg){ return invoke(closure, arg); };})($.callDartFunctionWith1Arg$closure.call$2, originalGetTagDartFunction)));
},

callDartFunctionWith1Arg: function(fn, arg) {
  return fn.call$1(arg);
},

toStringForNativeObject: function(obj) {
  return "Instance of " + $.get$getTypeNameOf().call$1(obj);
},

hashCodeForNativeObject: function(object) {
  return $.Primitives_objectHashCode(object);
},

defineProperty: function(obj, property, value) {
  Object.defineProperty(obj, $.stringTypeCheck(property), {value: value, enumerable: false, writable: true, configurable: true});
},

defineNativeMethods: function(tags, interceptorClass) {
  $.defineNativeMethodsCommon($.stringTypeCheck(tags), interceptorClass, true);
},

defineNativeMethodsNonleaf: function(tags, interceptorClass) {
  $.defineNativeMethodsCommon($.stringTypeCheck(tags), interceptorClass, false);
},

defineNativeMethodsCommon: function(tags, interceptorClass, isLeaf) {
  var methods, tagsList, i, tag;
  methods = interceptorClass.prototype;
  if ($.interceptorsByTag == null)
    $.interceptorsByTag = {};
  if ($.leafTags == null)
    $.leafTags = {};
  tagsList = tags.split("|");
  for (i = 0; i < tagsList.length; ++i) {
    tag = tagsList[i];
    $.interceptorsByTag[tag] = methods;
    $.leafTags[tag] = isLeaf;
  }
},

defineNativeMethodsFinish: function() {
},

lookupInterceptor: function(hasOwnPropertyFunction, tag) {
  var map = $.interceptorsByTag;
  if (map == null)
    return;
  return hasOwnPropertyFunction.call(map, tag) ? map[tag] : null;
},

lookupDispatchRecord: function(obj) {
  var hasOwnPropertyFunction, tag, interceptor, secondTag, t1;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  $.assertHelper(!(obj instanceof $.Object));
  tag = $.stringTypeCheck($.get$getTypeNameOf().call$1(obj));
  interceptor = $.lookupInterceptor(hasOwnPropertyFunction, tag);
  if (interceptor == null) {
    secondTag = $.alternateTag(obj, tag);
    if (secondTag != null)
      interceptor = $.lookupInterceptor(hasOwnPropertyFunction, secondTag);
  }
  if (interceptor == null)
    return;
  t1 = $.leafTags;
  if (t1 != null && t1[tag] === true)
    return $.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  else
    return $.makeDispatchRecord(interceptor, Object.getPrototypeOf(obj), null, null);
},

stringReplaceAllUnchecked: function(receiver, from, to) {
  var result, $length, i, t1;
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.StringBuffer$("");
      $length = receiver.length;
      result.write$1(to);
      for (i = 0; i < $length; ++i) {
        t1 = receiver[i];
        result._contents = result._contents + t1;
        result._contents = result._contents + to;
      }
      return result._contents;
    }
  else
    return receiver.replace(new RegExp(from.replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), "\\$&"), 'g'), to.replace("$", "$$$$"));
},

DartError: {"": "Object;",
  toString$0: function(_) {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || $.stringTypeCheck(this.stack) == null)
      return $.toString$0(dartException);
    else
      return $.S(dartException) + "\n" + $.stringTypeCheck(this.stack);
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper$closure.call$0;
  },
  static: {
DartError$: function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
},

DartError_toStringWrapper: function() {
  return $.toString$0(this);
}}

},

TypeErrorDecoder: {"": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
  matchTypeError$1: function(message) {
    var match, result, t1;
    match = new RegExp(this._pattern).exec(message);
    if (match == null)
      return;
    result = {};
    t1 = this._arguments;
    if (t1 !== -1)
      result.arguments = match[t1 + 1];
    t1 = this._argumentsExpr;
    if (t1 !== -1)
      result.argumentsExpr = match[t1 + 1];
    t1 = this._expr;
    if (t1 !== -1)
      result.expr = match[t1 + 1];
    t1 = this._method;
    if (t1 !== -1)
      result.method = match[t1 + 1];
    t1 = this._receiver;
    if (t1 !== -1)
      result.receiver = match[t1 + 1];
    return result;
  },
  $isTypeErrorDecoder: true,
  static: {
"": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern",
TypeErrorDecoder_extractPattern: function(message) {
  var match, $arguments, argumentsExpr, expr, method, receiver;
  message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
  match = $.interceptedTypeCheck(message.match(/\\\$[a-zA-Z]+\\\$/g), "$isList");
  if (match == null)
    match = $.interceptedTypeCheck([], "$isList");
  $arguments = match.indexOf("\\$arguments\\$");
  argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
  expr = match.indexOf("\\$expr\\$");
  method = match.indexOf("\\$method\\$");
  receiver = match.indexOf("\\$receiver\\$");
  return new $.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
},

TypeErrorDecoder_provokeCallErrorOn: function(expression) {
  return function($expr$) {
  var $argumentsExpr$ = '$arguments$'
  try {
    $expr$.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokeCallErrorOnNull: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    null.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokeCallErrorOnUndefined: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    (void 0).$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
  return function($expr$) {
  try {
    $expr$.$method$;
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokePropertyErrorOnNull: function() {
  return function() {
  try {
    null.$method$;
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOnUndefined: function() {
  return function() {
  try {
    (void 0).$method$;
  } catch (e) {
    return e.message;
  }
}();
}}

},

NullError: {"": "Object;_message,_method",
  toString$0: function(_) {
    var t1 = this._method;
    if (t1 == null)
      return "NullError: " + this._message;
    return "NullError: Cannot call \"" + t1 + "\" on null";
  },
  $asObject: null
},

JsNoSuchMethodError: {"": "Object;_message,_method,_receiver",
  toString$0: function(_) {
    var t1, t2;
    t1 = this._method;
    if (t1 == null)
      return "NoSuchMethodError: " + this._message;
    t2 = this._receiver;
    if (t2 == null)
      return "NoSuchMethodError: Cannot call \"" + t1 + "\" (" + this._message + ")";
    return "NoSuchMethodError: Cannot call \"" + t1 + "\" on \"" + t2 + "\" (" + this._message + ")";
  },
  $asObject: null,
  static: {
JsNoSuchMethodError$: function(_message, match) {
  var t1, t2;
  $.stringTypeCheck(_message);
  t1 = match == null;
  t2 = t1 ? null : match.method;
  t1 = t1 ? null : match.receiver;
  return new $.JsNoSuchMethodError(_message, t2, t1);
}}

},

UnknownJsTypeError: {"": "Object;_message",
  toString$0: function(_) {
    var t1 = this._message;
    return $.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
  },
  $asObject: null
},

_StackTrace: {"": "Object;_stack",
  toString$0: function(_) {
    var t1 = this._stack;
    return $.stringTypeCheck(t1 != null ? t1 : "");
  },
  $isStackTrace: true,
  $asObject: null
},

invokeClosure_closure: {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true
},

invokeClosure_closure0: {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true
},

invokeClosure_closure1: {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true
},

Closure: {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  },
  $isFunction: true,
  $asObject: null
},

BoundClosure: {"": "Closure;_self,_target,_receiver",
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (this === other)
      return true;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isBoundClosure)
      return false;
    return this._self === other._self && this._target === other._target && this._receiver === other._receiver;
  },
  get$hashCode: function(_) {
    return $.get$hashCode$(this._self) + $.get$hashCode$(this._target) + $.get$hashCode$(this._receiver) & 0x3ffffff;
  },
  $isBoundClosure: true
},

Creates: {"": "Object;types"},

Returns: {"": "Object;types"},

JSName: {"": "Object;name"},

Null: {"": "Object;"},

TypeErrorImplementation: {"": "Object;message",
  toString$0: function(_) {
    return this.message;
  },
  $asObject: null,
  static: {
TypeErrorImplementation$: function(value, type) {
  return new $.TypeErrorImplementation("type '" + $.Primitives_objectTypeName(value) + "' is not a subtype of type '" + type + "'");
}}

},

FallThroughErrorImplementation: {"": "FallThroughError;",
  toString$0: function(_) {
    return "Switch case fall-through.";
  }
},

applyExperimentalFixup_newGetTagDartFunction: {"": "Closure;newGetTagJSFunction_0",
  call$1: function(object) {
    return $.stringTypeCheck(this.newGetTagJSFunction_0(object));
  },
  $isFunction: true,
  $asObject: null,
  $signature: function() {
    return {func: "String__dynamic", ret: $.JSString, args: [null]};
  }
},

StringMatch: {"": "Object;start,str,pattern",
  $index: function(_, g) {
    $.intTypeCheck(g);
    if (g !== 0)
      $.throwExpression(new $.RangeError("value " + $.S(g)));
    return this.pattern;
  },
  $asObject: null
}}],
["app.dart", "app.dart", , {
main: function() {
  $.loadGooglePlusData();
},

loadGooglePlusData: function() {
  $.HttpRequest_getString("https://www.googleapis.com/plus/v1/people/104268957202871548605/activities/public?key=AIzaSyDjt9V66sWPDzuxoHhFZEZQGZR-0qySclI&maxResults=10", null, null).then$1($.onActivityDataLoaded$closure);
},

onActivityDataLoaded: function(req) {
  var data = $.propertyTypeCheck($.parse($.stringTypeCheck(req), null), "$isMap");
  $.forEach$1$ax($.listTypeCheck(data.$index(data, "items")), $.addActivity$closure);
},

addActivity: function(activity) {
  var activityBox, t1, date, originallyShared, t2, body, attachment, t3, iframe, t4, imageElement;
  $.propertyTypeCheck(activity, "$isMap");
  activityBox = $.interceptedTypeCheck($.HtmlDocument_methods.$$dom_createElement$1(document, "div"), "$isDivElement");
  activityBox.get$classes;
  t1 = new $._ElementCssClassSet(activityBox);
  t1.add$1(t1, "activity");
  date = $.interceptedTypeCheck($.HtmlDocument_methods.$$dom_createElement$1(document, "p"), "$isParagraphElement");
  date.get$classes;
  t1 = new $._ElementCssClassSet(date);
  t1.add$1(t1, "date");
  date.textContent = $.stringTypeCheck(activity.$index(activity, "published"));
  t1 = $.getInterceptor$x(activityBox);
  t1.append$1(activityBox, date);
  if ($.$eq(activity.$index(activity, "verb"), "share")) {
    originallyShared = $.interceptedTypeCheck($.HtmlDocument_methods.$$dom_createElement$1(document, "p"), "$isParagraphElement");
    originallyShared.textContent = "Originally shared by ";
    t2 = "<span class=\"originally-shared\">" + $.S($.$index$asx($.$index$asx(activity.$index(activity, "object"), "actor"), "displayName")) + "</span>";
    originallyShared.appendHtml$1;
    $.insertAdjacentHtml$2$x(originallyShared, "beforeend", t2);
    t1.append$1(activityBox, originallyShared);
    t1.append$1(activityBox, $.interceptedTypeCheck($.HtmlDocument_methods.$$dom_createElement$1(document, "hr"), "$isHRElement"));
  }
  body = $.interceptedTypeCheck($.HtmlDocument_methods.$$dom_createElement$1(document, "p"), "$isParagraphElement");
  t2 = $.$index$asx(activity.$index(activity, "object"), "content");
  body.appendHtml$1;
  $.stringTypeCheck(t2);
  $.insertAdjacentHtml$2$x(body, "beforeend", t2);
  t1.append$1(activityBox, body);
  for (t2 = $.get$iterator$ax($.$index$asx(activity.$index(activity, "object"), "attachments")); $.boolConversionCheck(t2.moveNext$0());) {
    attachment = t2.get$current();
    t3 = $.getInterceptor$asx(attachment);
    switch (t3.$index(attachment, "objectType")) {
      case "video":
        iframe = $.interceptedTypeCheck($.HtmlDocument_methods.$$dom_createElement$1(document, "iframe"), "$isIFrameElement");
        iframe.title = "YouTube video player";
        iframe.get$classes;
        t4 = new $._ElementCssClassSet(iframe);
        t4.add$1(t4, "youtube-player");
        iframe.width = $.toString$0($.$index$asx(t3.$index(attachment, "image"), "width"));
        iframe.height = $.toString$0($.$index$asx(t3.$index(attachment, "image"), "height"));
        iframe.src = $.stringTypeCheck($.$index$asx(t3.$index(attachment, "embed"), "url"));
        iframe.get$attributes;
        $.$$dom_setAttribute$2$x($.assertSubtype(new $._ElementAttributeMap(iframe), "$isMap", [$.JSString, $.JSString], "$asMap").get$_element(), "allowFullScreen", "");
        t1.append$1(activityBox, iframe);
        break;
      case "album":
        imageElement = $.ImageElement_ImageElement(null, null, null);
        imageElement.src = $.stringTypeCheck($.$index$asx($.$index$asx($.$index$asx(t3.$index(attachment, "thumbnails"), 0), "image"), "url"));
        t1.append$1(activityBox, imageElement);
        break;
      default:
        $.Primitives_printString(t3.toString$0(attachment));
    }
  }
  $.append$1$x($.HtmlDocument_methods.query$1(document, "#activities"), activityBox);
}},
1],
["dart._collection.dev", "dart:_collection-dev", , {
Arrays_copy: function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3, t4;
  if (typeof src !== "string" && (typeof src !== "object" || src === null || src.constructor !== Array && !$.isJsIndexable(src, src[$.dispatchPropertyName])))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !$.isJsIndexable(dst, dst[$.dispatchPropertyName]))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (dstStart == null)
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  $.intTypeCheck(count);
  if (count == null)
    return $.Arrays_copy$bailout(2, src, srcStart, dst, dstStart, count);
  if (srcStart == null)
    throw srcStart.$lt();
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = srcStart + count, t2 = src.length, t3 = dst.length, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
      if (i < 0 || i >= t2)
        throw $.ioore(i);
      t4 = src[i];
      if (j < 0 || j >= t3)
        throw $.ioore(j);
      dst[j] = t4;
    }
},

Arrays_copy$bailout: function(state0, src, srcStart, dst, dstStart, count) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      $.intTypeCheck(count);
    case 2:
      var t1, i, j, t2;
      state0 = 0;
      t1 = $.getInterceptor$n(srcStart);
      if (srcStart == null)
        throw srcStart.$lt();
      if (t1.$lt(srcStart, dstStart)) {
        i = t1.$add(srcStart, count) - 1;
        if (dstStart == null)
          throw dstStart.$add();
        j = $.JSInt_methods.$add(dstStart, count) - 1;
        t1 = $.getInterceptor$asx(src);
        for (; i >= srcStart; --i, --j)
          $.JSArray_methods.$indexSet(dst, j, t1.$index(src, i));
      } else {
        t2 = $.getInterceptor$asx(src);
        j = dstStart;
        i = srcStart;
        while (i < t1.$add(srcStart, count)) {
          $.JSArray_methods.$indexSet(dst, j, t2.$index(src, i));
          ++i;
          if (j == null)
            throw j.$add();
          ++j;
        }
      }
  }
},

IterableMixinWorkaround_forEach: function(iterable, f) {
  var t1, t2, $arguments, t3;
  $.assertFunctionSubtype(f, "void__dynamic");
  for (t1 = $.getRuntimeTypeArgument(iterable, "JSArray", 0), $.listSuperNativeTypeCheck(iterable, "$isIterable"), t2 = iterable.length, t2 = new $.ListIterator($.listSuperNativeTypeCheck(iterable, "$isIterable"), t2, 0, $.assertSubtypeOfRuntimeType(null, t1)), $.setRuntimeTypeInfo(t2, [t1]), $.assertSubtype(t2, "$isIterator", [$.getRuntimeTypeArgument(iterable, "JSArray", 0)], "$asIterator"); $.boolConversionCheck(t2.moveNext$0());) {
    t1 = t2.get$_liblib$_current();
    $arguments = $.substitute(t2.$asListIterator, $.getRuntimeTypeInfo(t2));
    if ($arguments == null)
      t3 = null;
    else {
      $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
      t3 = $arguments[0];
    }
    f.call$1($.assertSubtypeOfRuntimeType(t1, t3));
  }
},

IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
  var result, i, t1, t2;
  for (i = 0; i < $.get$IterableMixinWorkaround__toStringList().length; ++i) {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (i >= t1.length)
      throw $.ioore(i);
    if (t1[i] === iterable)
      return $.S(leftDelimiter) + "..." + $.S(rightDelimiter);
  }
  result = $.StringBuffer$("");
  try {
    $.JSArray_methods.add$1($.get$IterableMixinWorkaround__toStringList(), iterable);
    result.write$1(leftDelimiter);
    result.writeAll$2(iterable, ", ");
    result.write$1(rightDelimiter);
  } finally {
    t1 = $.JSArray_methods.get$last($.get$IterableMixinWorkaround__toStringList());
    t2 = iterable;
    $.assertHelper(t1 == null ? t2 == null : t1 === t2);
    t2 = $.get$IterableMixinWorkaround__toStringList();
    if (0 >= t2.length)
      throw $.ioore(0);
    t2.pop();
  }
  return result.get$_contents();
},

IterableMixinWorkaround__rangeCheck: function(list, start, end) {
  var t1;
  if (start < 0 || start > list.length) {
    t1 = list.length;
    throw $.wrapException(new $.RangeError("value " + start + " not in range 0.." + t1));
  }
  if (end < start || end > list.length) {
    t1 = list.length;
    throw $.wrapException(new $.RangeError("value " + end + " not in range " + start + ".." + t1));
  }
},

IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
  var $length, otherStart, otherList;
  $.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = end - start;
  if ($length === 0)
    return;
  if (skipCount < 0)
    throw $.wrapException(new $.ArgumentError(skipCount));
  otherStart = skipCount;
  otherList = from;
  if ($.JSInt_methods.$gt(otherStart + $length, $.get$length$asx(otherList)))
    throw $.wrapException(new $.StateError("Not enough elements"));
  $.Arrays_copy(otherList, otherStart, list, start, $length);
},

ListIterable: {"": "IterableBase;",
  get$iterator: function(_) {
    var t1, t2;
    t1 = $.getRuntimeTypeArgument(this, "ListIterable", 0);
    $.listSuperNativeTypeCheck(this, "$isIterable");
    t2 = this.get$length(this);
    t2 = new $.ListIterator($.listSuperNativeTypeCheck(this, "$isIterable"), t2, 0, $.assertSubtypeOfRuntimeType(null, t1));
    $.setRuntimeTypeInfo(t2, [t1]);
    return $.assertSubtype(t2, "$isIterator", [$.getRuntimeTypeArgument(this, "ListIterable", 0)], "$asIterator");
  },
  forEach$1: function(_, action) {
    var $length, i;
    $.assertFunctionSubtype(action, "void__E2", "ListIterable", this);
    $length = this.get$length(this);
    if ($length == null)
      return this.forEach$1$bailout1(1, action, $length);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw $.wrapException(new $.ConcurrentModificationError(this));
    }
  },
  forEach$1$bailout1: function(state0, action, $length) {
    var i, t1;
    for (i = 0; $.JSInt_methods.$lt(i, $length); ++i) {
      action.call$1(this.elementAt$1(this, i));
      t1 = this.get$length(this);
      if ($length == null ? t1 != null : $length !== t1)
        throw $.wrapException(new $.ConcurrentModificationError(this));
    }
  },
  $asIterableBase: null,
  $asIterableBase: null,
  $asIterable: null,
  $asObject: null
},

SubListIterable: {"": "ListIterable;_iterable,_start,_endOrLength",
  get$_endIndex: function() {
    var $length, t1, t2;
    $length = $.get$length$asx(this._iterable);
    t1 = this._endOrLength;
    if (t1 != null) {
      if (t1 == null)
        throw t1.$gt();
      t2 = $.JSInt_methods.$gt(t1, $length);
    } else
      t2 = true;
    if (t2)
      return $length;
    return t1;
  },
  get$_startIndex: function() {
    var $length, t1;
    $length = $.get$length$asx(this._iterable);
    t1 = this._start;
    if (t1 == null)
      throw t1.$gt();
    if ($.JSInt_methods.$gt(t1, $length))
      return $length;
    return t1;
  },
  get$length: function(_) {
    var $length, t1, t2;
    $length = $.get$length$asx(this._iterable);
    if ($length == null)
      return this.get$length$bailout2(1, $length);
    t1 = this._start;
    if (t1 == null)
      return this.get$length$bailout2(2, $length, t1);
    if (t1 >= $length)
      return 0;
    t2 = this._endOrLength;
    if (t2 == null)
      return this.get$length$bailout2(3, $length, t1, t2);
    if (t2 >= $length)
      return $length - t1;
    return t2 - t1;
  },
  get$length$bailout2: function(state0, $length, t1, t2) {
    switch (state0) {
      case 0:
        $length = $.get$length$asx(this._iterable);
      case 1:
        state0 = 0;
        t1 = this._start;
      case 2:
        state0 = 0;
        if (t1 == null)
          throw t1.$ge();
        if ($.JSInt_methods.$ge(t1, $length))
          return 0;
        t2 = this._endOrLength;
      case 3:
        var t3;
        state0 = 0;
        if (t2 != null) {
          if (t2 == null)
            throw t2.$ge();
          t3 = $.JSInt_methods.$ge(t2, $length);
        } else
          t3 = true;
        if (t3) {
          if ($length == null)
            throw $length.$sub();
          return $length - t1;
        }
        if (t2 == null)
          throw t2.$sub();
        return t2 - t1;
    }
  },
  elementAt$1: function(_, index) {
    var t1, t2, $arguments;
    $.intTypeCheck(index);
    if (index == null)
      return this.elementAt$1$bailout2(1, index);
    t1 = this.get$_startIndex();
    if (t1 == null)
      return this.elementAt$1$bailout2(2, index, t1);
    t1 += index;
    if (index >= 0) {
      t2 = this.get$_endIndex();
      if (t2 == null)
        return this.elementAt$1$bailout2(3, index, t1, t2);
      t2 = t1 >= t2;
    } else
      t2 = true;
    if (t2) {
      t1 = this.get$length(this);
      throw $.wrapException(new $.RangeError("value " + index + " not in range 0.." + t1));
    }
    t1 = $.elementAt$1$ax(this._iterable, t1);
    $arguments = $.substitute(this.$asSubListIterable, $.getRuntimeTypeInfo(this));
    if ($arguments == null)
      t2 = null;
    else {
      $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
      t2 = $arguments[0];
    }
    return $.assertSubtypeOfRuntimeType(t1, t2);
  },
  elementAt$1$bailout2: function(state0, index, t1, t2) {
    switch (state0) {
      case 0:
        $.intTypeCheck(index);
      case 1:
        state0 = 0;
        t1 = this.get$_startIndex();
      case 2:
        state0 = 0;
        if (t1 == null)
          throw t1.$add();
        t1 = $.JSInt_methods.$add(t1, index);
        if (index == null)
          throw index.$lt();
      case 3:
        var $arguments;
        if (state0 === 3 || state0 === 0 && index >= 0)
          switch (state0) {
            case 0:
              t2 = this.get$_endIndex();
            case 3:
              state0 = 0;
              t2 = $.$ge$n(t1, t2);
          }
        else
          t2 = true;
        if (t2) {
          t1 = this.get$length(this);
          throw $.wrapException(new $.RangeError("value " + index + " not in range 0.." + t1));
        }
        t1 = $.elementAt$1$ax(this._iterable, t1);
        $arguments = $.substitute(this.$asSubListIterable, $.getRuntimeTypeInfo(this));
        if ($arguments == null)
          t2 = null;
        else {
          $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
          t2 = $arguments[0];
        }
        return $.assertSubtypeOfRuntimeType(t1, t2);
    }
  },
  $asListIterable: null,
  $asIterableBase: null,
  $asIterable: null,
  $asObject: null
},

ListIterator: {"": "Object;_iterable,_liblib$_length,_index,_liblib$_current@",
  get$current: function() {
    var t1, $arguments, t2;
    t1 = this._liblib$_current;
    $arguments = $.substitute(this.$asListIterator, $.getRuntimeTypeInfo(this));
    if ($arguments == null)
      t2 = null;
    else {
      $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
      t2 = $arguments[0];
    }
    return $.assertSubtypeOfRuntimeType(t1, t2);
  },
  moveNext$0: function() {
    var t1, t2, $length, t3;
    t1 = this._iterable;
    t2 = $.getInterceptor$asx(t1);
    $length = t2.get$length(t1);
    if ($length == null)
      return this.moveNext$0$bailout(1, t2, t1, $length);
    if (this._liblib$_length !== $length)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    t3 = this._index;
    if (t3 >= $length) {
      this.set$_liblib$_current(null);
      return false;
    }
    this.set$_liblib$_current(t2.elementAt$1(t1, t3));
    this._index = this._index + 1;
    return true;
  },
  moveNext$0$bailout: function(state0, t2, t1, $length) {
    var t3 = this._liblib$_length;
    if (t3 == null ? $length != null : t3 !== $length)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    if ($.JSInt_methods.$ge(this._index, $length)) {
      this.set$_liblib$_current(null);
      return false;
    }
    this.set$_liblib$_current(t2.elementAt$1(t1, this._index));
    this._index = this._index + 1;
    return true;
  },
  $isIterator: true,
  $asObject: null
},

MappedIterable: {"": "IterableBase;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function(_) {
    var t1, t2, t3, t4;
    t1 = this._iterable;
    t1 = t1.get$iterator(t1);
    t2 = this._f;
    t3 = $.getRuntimeTypeArgument(this, "MappedIterable", 0);
    t4 = $.getRuntimeTypeArgument(this, "MappedIterable", 1);
    $.assertSubtype(t1, "$isIterator", [t3], "$asIterator");
    $.assertFunctionSubtype(t2, "T__S0", "MappedIterator", null, [t3, t4]);
    t2 = new $.MappedIterator($.assertSubtypeOfRuntimeType(null, t4), $.assertSubtype(t1, "$isIterator", [t3], "$asIterator"), $.assertFunctionSubtype(t2, "T__S0", "MappedIterator", null, [t3, t4]));
    $.setRuntimeTypeInfo(t2, [t3, t4]);
    return $.assertSubtype(t2, "$isIterator", [$.getRuntimeTypeArgument(this, "MappedIterable", 1)], "$asIterator");
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  elementAt$1: function(_, index) {
    var t1 = this._iterable;
    return $.assertSubtypeOfRuntimeType(this._f$1(t1.elementAt$1(t1, index)), $.getRuntimeTypeArgument(this, "MappedIterable", 1));
  },
  $asIterableBase: function(S, T) {
    return [T];
  },
  $asIterableBase: function(S, T) {
    return [T];
  },
  $asIterable: function(S, T) {
    return [T];
  },
  $asObject: null
},

MappedIterator: {"": "Iterator;_liblib$_current@,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if ($.boolConversionCheck(t1.moveNext$0())) {
      this.set$_liblib$_current(this._f$1(t1.get$current()));
      return true;
    }
    this.set$_liblib$_current(null);
    return false;
  },
  get$current: function() {
    var t1, $arguments, t2;
    t1 = this._liblib$_current;
    $arguments = $.substitute(this.$asMappedIterator, $.getRuntimeTypeInfo(this));
    if ($arguments == null)
      t2 = null;
    else {
      $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
      t2 = $arguments[1];
    }
    return $.assertSubtypeOfRuntimeType(t1, t2);
  },
  $asIterator: function(S, T) {
    return [T];
  },
  $asObject: null
},

MappedListIterable: {"": "ListIterable;_liblib$_source,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$length: function(_) {
    return $.get$length$asx(this._liblib$_source);
  },
  elementAt$1: function(_, index) {
    var t1, $arguments, t2;
    t1 = this._f$1($.elementAt$1$ax(this._liblib$_source, $.intTypeCheck(index)));
    $arguments = $.substitute(this.$asMappedListIterable, $.getRuntimeTypeInfo(this));
    if ($arguments == null)
      t2 = null;
    else {
      $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
      t2 = $arguments[1];
    }
    return $.assertSubtypeOfRuntimeType(t1, t2);
  },
  $asListIterable: function(S, T) {
    return [T];
  },
  $asIterableBase: function(S, T) {
    return [T];
  },
  $asIterable: function(S, T) {
    return [T];
  },
  $asObject: null
},

WhereIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    var t1, t2, t3;
    t1 = $.get$iterator$ax(this._iterable);
    t2 = $.getRuntimeTypeArgument(this, "WhereIterable", 0);
    $.assertSubtype(t1, "$isIterator", [t2], "$asIterator");
    t3 = $.assertFunctionSubtype(this._f, "bool__dynamic");
    t3 = new $.WhereIterator($.assertSubtype(t1, "$isIterator", [t2], "$asIterator"), t3);
    $.setRuntimeTypeInfo(t3, [t2]);
    return $.assertSubtype(t3, "$isIterator", [$.getRuntimeTypeArgument(this, "WhereIterable", 0)], "$asIterator");
  },
  $asIterableBase: null,
  $asIterableBase: null,
  $asIterable: null,
  $asObject: null
},

WhereIterator: {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; $.boolConversionCheck(t1.moveNext$0());)
      if ($.boolConversionCheck(this._f$1(t1.get$current())))
        return true;
    return false;
  },
  get$current: function() {
    var t1, $arguments, t2;
    t1 = this._iterator.get$current();
    $arguments = $.substitute(this.$asWhereIterator, $.getRuntimeTypeInfo(this));
    if ($arguments == null)
      t2 = null;
    else {
      $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
      t2 = $arguments[0];
    }
    return $.assertSubtypeOfRuntimeType(t1, t2);
  },
  $asIterator: null,
  $asObject: null
},

SkipIterable: {"": "IterableBase;_iterable,_skipCount",
  get$iterator: function(_) {
    var t1, t2, t3;
    t1 = $.get$iterator$ax(this._iterable);
    t2 = $.getRuntimeTypeArgument(this, "SkipIterable", 0);
    $.assertSubtype(t1, "$isIterator", [t2], "$asIterator");
    t3 = new $.SkipIterator($.assertSubtype(t1, "$isIterator", [t2], "$asIterator"), this._skipCount);
    $.setRuntimeTypeInfo(t3, [t2]);
    $.assertSubtype(t1, "$isIterator", [t2], "$asIterator");
    t1 = t3._skipCount;
    if (typeof t1 === "number" && Math.floor(t1) === t1) {
      if (t1 == null)
        throw t1.$ge();
      t1 = t1 >= 0;
    } else
      t1 = false;
    $.assertHelper(t1);
    return $.assertSubtype(t3, "$isIterator", [$.getRuntimeTypeArgument(this, "SkipIterable", 0)], "$asIterator");
  },
  $asIterableBase: null,
  $asIterableBase: null,
  $asIterable: null,
  $asObject: null
},

SkipIterator: {"": "Iterator;_iterator,_skipCount",
  moveNext$0: function() {
    var t1, i, t2;
    t1 = this._iterator;
    i = 0;
    while (true) {
      t2 = this._skipCount;
      if (t2 == null)
        return this.moveNext$0$bailout1(1, t2, t1, i);
      if (!(i < t2))
        break;
      t1.moveNext$0();
      ++i;
    }
    this._skipCount = 0;
    return t1.moveNext$0();
  },
  moveNext$0$bailout1: function(state0, t2, t1, i) {
    switch (state0) {
      case 0:
        t1 = this._iterator;
        i = 0;
      case 1:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = this._skipCount;
              case 1:
                state0 = 0;
                if (!$.JSInt_methods.$lt(i, t2))
                  break L0;
                t1.moveNext$0();
                ++i;
            }
        this._skipCount = 0;
        return t1.moveNext$0();
    }
  },
  get$current: function() {
    var t1, $arguments, t2;
    t1 = this._iterator.get$current();
    $arguments = $.substitute(this.$asSkipIterator, $.getRuntimeTypeInfo(this));
    if ($arguments == null)
      t2 = null;
    else {
      $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
      t2 = $arguments[0];
    }
    return $.assertSubtypeOfRuntimeType(t1, t2);
  },
  $asIterator: null,
  $asObject: null
},

FixedLengthListMixin: {"": "Object;",
  set$length: function(receiver, newLength) {
    $.intTypeCheck(newLength);
    throw $.wrapException(new $.UnsupportedError("Cannot change the length of a fixed-length list"));
  },
  add$1: function(receiver, value) {
    $.assertSubtypeOfRuntimeType(value, $.getRuntimeTypeArgument(receiver, "FixedLengthListMixin", 0));
    throw $.wrapException(new $.UnsupportedError("Cannot add to a fixed-length list"));
  },
  addAll$1: function(receiver, iterable) {
    $.listSuperNativeTypeCheck(iterable, "$isIterable");
    throw $.wrapException(new $.UnsupportedError("Cannot add to a fixed-length list"));
  }
}}],
["dart.async", "dart:async", , {
_attachStackTrace: function(o, st) {
  var t1;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  t1.$indexSet(t1, o, st);
},

getAttachedStackTrace: function(o) {
  var t1;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  return t1.$index(t1, o);
},

_asyncRunCallback: function() {
  var callback, t1, exception, milliseconds;
  for (; t1 = $.get$_asyncCallbacks(), t1._head !== t1._tail;) {
    callback = $.propertyTypeCheck($.get$_asyncCallbacks().removeFirst$0(), "$isFunction");
    try {
      callback.call$0();
    } catch (exception) {
      $.unwrapException(exception);
      $.assertFunctionSubtype($._asyncRunCallback$closure, "void_");
      milliseconds = $.JSInt_methods.$tdiv($.Duration_0._duration, 1000);
      $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, $._asyncRunCallback$closure);
      throw exception;
    }

  }
  $._callbacksAreEnqueued = false;
},

_scheduleAsyncCallback: function(callback) {
  var t1 = $.get$_asyncCallbacks();
  $.assertSubtypeOfRuntimeType(callback, $.getRuntimeTypeArgument(t1, "ListQueue", 0));
  t1._add$1(callback);
  if (!$._callbacksAreEnqueued) {
    $.assertFunctionSubtype($._asyncRunCallback$closure, "void_");
    $._createTimer($.Duration_0, $._asyncRunCallback$closure);
    $._callbacksAreEnqueued = true;
  }
},

runAsync: function(callback) {
  var currentZone;
  $.assertFunctionSubtype(callback, "void_");
  currentZone = $.get$_Zone__current();
  currentZone.runAsync$2(callback, currentZone);
},

_nullDataHandler: function(value) {
},

_nullErrorHandler: function(error) {
  $.get$_Zone__current().handleUncaughtError$1(error);
},

_nullDoneHandler: function() {
},

_asyncError: function(error, stackTrace) {
  if (stackTrace == null)
    return error;
  if ($.getAttachedStackTrace(error) != null)
    return error;
  $._attachStackTrace(error, stackTrace);
  return error;
},

_runUserCode: function(userCode, onSuccess, onError) {
  var e, s, exception, t1;
  $.assertFunctionSubtype(userCode, "dynamic_");
  $.assertFunctionSubtype(onSuccess, "dynamic__dynamic");
  $.assertFunctionSubtype(onError, "dynamic__dynamic");
  try {
    onSuccess.call$1(userCode.call$0());
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    s = $.getTraceFromException(exception);
    onError.call$1($._asyncError(e, s));
  }

},

_cancelAndError: function(subscription, future) {
  return new $._cancelAndError_closure(subscription, future);
},

_createTimer: function(duration, callback) {
  var milliseconds;
  $.assertFunctionSubtype(callback, "void_");
  milliseconds = $.JSInt_methods.$tdiv(duration._duration, 1000);
  return $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
},

Future: {"": "Object;", $isFuture: true},

_Completer: {"": "Object;future<",
  complete$1: function(_, value) {
    $.assertSubtypeOfRuntimeType(value, $.getRuntimeTypeArgument(this, "_Completer", 0));
    if (this._isComplete)
      throw $.wrapException(new $.StateError("Future already completed"));
    this._isComplete = true;
    this._setFutureValue$1(value);
  },
  completeError$2: function(error, stackTrace) {
    if (this._isComplete)
      throw $.wrapException(new $.StateError("Future already completed"));
    this._isComplete = true;
    this._setFutureError$1(error);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  },
  _Completer$0: function(T) {
    var t1 = this.future._zone;
    t1._openCallbacks = t1._openCallbacks + 1;
  },
  $isCompleter: true,
  $asObject: null
},

_AsyncCompleter: {"": "_Completer;future,_isComplete",
  _setFutureValue$1: function(value) {
    var future, t1;
    future = this.future;
    future._asyncSetValue$1($.assertSubtypeOfRuntimeType(value, $.getRuntimeTypeArgument(this, "_AsyncCompleter", 0)));
    t1 = future._zone;
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._checkIfDone$0();
  },
  _setFutureError$1: function(error) {
    var future, t1;
    future = this.future;
    future._asyncSetError$1(error);
    t1 = future._zone;
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._checkIfDone$0();
  },
  $as_Completer: null,
  $as_Completer: null,
  $asCompleter: null,
  $asObject: null
},

_FutureListenerWrapper: {"": "Object;future,_nextListener<",
  set$_nextListener: function(v) {
    this._nextListener = $.propertyTypeCheck(v, "$is_FutureListener");
  },
  _sendValue$1: function(value) {
    var $arguments, t1;
    $arguments = $.substitute(this.$as_FutureListenerWrapper, $.getRuntimeTypeInfo(this));
    if ($arguments == null)
      t1 = null;
    else {
      $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
      t1 = $arguments[0];
    }
    this.future._setValueUnchecked$1($.assertSubtypeOfRuntimeType(value, t1));
  },
  _sendError$1: function(error) {
    this.future._setErrorUnchecked$1(error);
  },
  _inSameErrorZone$1: function(otherZone) {
    var t1, t2;
    t1 = this.future._zone.get$_errorZone();
    t2 = otherZone.get$_errorZone();
    return t1 == null ? t2 == null : t1 === t2;
  },
  $is_FutureListener: true,
  $asObject: null
},

_ErrorZoneBoundaryListener: {"": "Object;_nextListener<,_listener",
  set$_nextListener: function(v) {
    this._nextListener = $.propertyTypeCheck(v, "$is_FutureListener");
  },
  _inSameErrorZone$1: function(otherZone) {
    throw $.wrapException(new $.UnsupportedError("A Zone boundary doesn't support the inSameErrorZone test."));
  },
  _sendValue$1: function(value) {
    this._listener._sendValue$1(value);
  },
  _sendError$1: function(error) {
    $.get$_Zone__current().handleUncaughtError$1(error);
  },
  $is_FutureListener: true,
  $as_FutureListener: function() {
    return [null];
  },
  $asObject: null
},

_FutureImpl: {"": "Object;_state<,_zone<,_resultOrListeners<",
  set$_state: function(v) {
    this._state = $.intTypeCheck(v);
  },
  then$2$onError: function(f, onError) {
    var t1, t2;
    $.assertFunctionSubtype(f, "dynamic__T", "_FutureImpl", this);
    $.assertFunctionSubtype(onError, "dynamic__dynamic");
    if (onError == null) {
      t1 = new $._ThenFuture(f, null, 0, $.get$_Zone__current().fork$0(), null);
      t2 = [null, null];
      if (!(t2 == null))
        ;
      $.assertHelper(true);
      t1.$builtinTypeInfo = t2;
      t2 = t1._zone;
      t2._openCallbacks = t2._openCallbacks + 1;
      t1._subscribeTo$1(this);
      return t1;
    }
    $.assertFunctionSubtype(f, "dynamic__S", "_SubscribeFuture", null, [null, null]);
    t1 = new $._SubscribeFuture(onError, f, null, 0, $.get$_Zone__current().fork$0(), null);
    t2 = [null, null];
    if (!(t2 == null))
      ;
    $.assertHelper(true);
    t1.$builtinTypeInfo = t2;
    t2 = t1._zone;
    t2._openCallbacks = t2._openCallbacks + 1;
    t1._subscribeTo$1(this);
    return t1;
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1, t2;
    $.assertFunctionSubtype(f, "dynamic__dynamic");
    t1 = new $._CatchErrorFuture($.assertFunctionSubtype(test, "bool__dynamic"), f, null, 0, $.get$_Zone__current().fork$0(), null);
    t2 = [null];
    if (!(t2 == null))
      ;
    $.assertHelper(true);
    t1.$builtinTypeInfo = t2;
    t2 = t1._zone;
    t2._openCallbacks = t2._openCallbacks + 1;
    t1._subscribeTo$1(this);
    return t1;
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  _inSameErrorZone$1: function(otherZone) {
    var t1, t2;
    t1 = this._zone.get$_errorZone();
    t2 = otherZone.get$_errorZone();
    return t1 == null ? t2 == null : t1 === t2;
  },
  _setValue$1: function(value) {
    $.assertSubtypeOfRuntimeType(value, $.getRuntimeTypeArgument(this, "_FutureImpl", 0));
    if (this._state !== 0)
      throw $.wrapException(new $.StateError("Future already completed"));
    this._setValueUnchecked$1(value);
  },
  get$_setValue: function() {
    return new $.Bound__setValue__FutureImpl(this, "_setValue$1", null);
  },
  _setValueUnchecked$1: function(value) {
    var listeners, listeners0;
    $.assertSubtypeOfRuntimeType(value, $.getRuntimeTypeArgument(this, "_FutureImpl", 0));
    listeners = (this._state & 2) !== 0 ? null : this._removeListeners$0();
    this._state = 8;
    this._resultOrListeners = value;
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  _setError$1: function(error) {
    if (this._state !== 0)
      throw $.wrapException(new $.StateError("Future already completed"));
    this._setErrorUnchecked$1(error);
  },
  get$_setError: function() {
    return new $.Bound__setError__FutureImpl(this, "_setError$1", null);
  },
  _setErrorUnchecked$1: function(error) {
    var t1, hasListeners, listeners, listeners0;
    t1 = this._state;
    if ((t1 & 2) !== 0) {
      hasListeners = t1 === 2;
      listeners = null;
    } else {
      listeners = this._removeListeners$0();
      hasListeners = listeners != null;
    }
    this._state = 12;
    this._resultOrListeners = error;
    if (!hasListeners) {
      this._scheduleUnhandledError$0();
      return;
    }
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
    }
  },
  _asyncSetValue$1: function(value) {
    $.assertSubtypeOfRuntimeType(value, $.getRuntimeTypeArgument(this, "_FutureImpl", 0));
    if (this._state !== 0)
      throw $.wrapException(new $.StateError("Future already completed"));
    this._state = 1;
    $.runAsync(new $._FutureImpl__asyncSetValue_closure(this, value));
  },
  _asyncSetError$1: function(error) {
    if (this._state !== 0)
      throw $.wrapException(new $.StateError("Future already completed"));
    this._state = 1;
    $.runAsync(new $._FutureImpl__asyncSetError_closure(this, error));
  },
  _scheduleUnhandledError$0: function() {
    $.assertHelper(this._state === 12);
    this._state = 28;
    $.runAsync(new $._FutureImpl__scheduleUnhandledError_closure(this));
  },
  _addListener$1: function(listener) {
    var t1, t2, future, t3, currentZone;
    t1 = {};
    t1.listener_0 = listener;
    $.assertHelper(t1.listener_0.get$_nextListener() == null);
    t2 = t1.listener_0;
    if (!t2._inSameErrorZone$1(this._zone))
      t1.listener_0 = new $._ErrorZoneBoundaryListener(null, t2);
    t2 = this._state;
    if ((t2 & 2) !== 0) {
      this._state = 2;
      $.assertHelper((this._state & 2) !== 0);
      future = $.propertyTypeCheck(this._resultOrListeners, "$is_FutureImpl");
      future.get$_isChained;
      if ((future._state & 2) !== 0) {
        future = future.get$_chainSource();
        this._resultOrListeners = future;
      }
      future._addListener$1(t1.listener_0);
      return;
    }
    t3 = t2 >= 8;
    if (t3) {
      this._state = (t2 & 4294967279) >>> 0;
      t1 = new $._FutureImpl__addListener_closure(t1, this);
      $.assertFunctionSubtype(t1, "void_");
      currentZone = $.get$_Zone__current();
      currentZone.runAsync$2(t1, currentZone);
    } else {
      $.assertHelper(!t3);
      t1.listener_0.set$_nextListener(this._resultOrListeners);
      this._resultOrListeners = t1.listener_0;
    }
  },
  _removeListeners$0: function() {
    var current, prev, next;
    $.assertHelper(this._state < 8);
    current = $.propertyTypeCheck(this._resultOrListeners, "$is_FutureListener");
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    var t1 = this._state;
    if (t1 < 8)
      future._chainFromFuture$1(this);
    else if (t1 === 8) {
      t1 = this._resultOrListeners;
      $.assertSubtypeOfRuntimeType(t1, $.getRuntimeTypeArgument(future, "_FutureImpl", 0));
      if (future._state !== 0)
        $.throwExpression(new $.StateError("Future already completed"));
      future._setValueUnchecked$1(t1);
    } else {
      $.assertHelper(t1 >= 12);
      this._state = (this._state & 4294967279) >>> 0;
      t1 = this._resultOrListeners;
      if (future._state !== 0)
        $.throwExpression(new $.StateError("Future already completed"));
      future._setErrorUnchecked$1(t1);
    }
  },
  get$_chainSource: function() {
    $.assertHelper((this._state & 2) !== 0);
    var future = $.propertyTypeCheck(this._resultOrListeners, "$is_FutureImpl");
    future.get$_isChained;
    if ((future._state & 2) !== 0) {
      future = future.get$_chainSource();
      this._resultOrListeners = future;
    }
    return future;
  },
  _chainFromFuture$1: function(resultSource) {
    var cursor, cursor0, cursor1, t1;
    $.assertHelper(this._state < 8);
    $.assertHelper((this._state & 2) === 0);
    if ((resultSource._state & 2) !== 0)
      resultSource = resultSource.get$_chainSource();
    resultSource.get$_isChained;
    $.assertHelper((resultSource._state & 2) === 0);
    if (this === resultSource) {
      if (this._state !== 0)
        $.throwExpression(new $.StateError("Future already completed"));
      this._setErrorUnchecked$1(new $.StateError("Cyclic future dependency."));
      return;
    }
    cursor = this._removeListeners$0();
    for (cursor0 = cursor; cursor0 != null; cursor0 = cursor1) {
      cursor1 = cursor0.get$_nextListener();
      cursor0.set$_nextListener(null);
      resultSource._addListener$1(cursor0);
    }
    t1 = new $._FutureListenerWrapper(this, null);
    $.setRuntimeTypeInfo(t1, [null]);
    resultSource._addListener$1($.assertSubtype(t1, "$is_FutureListener", [null], "$as_FutureListener"));
    this._resultOrListeners = resultSource;
    this._state = cursor != null ? 2 : 6;
  },
  _setOrChainValue$1: function(result) {
    $.assertHelper((this._state & 2) === 0);
    $.assertHelper(this._state < 8);
    if (typeof result === "object" && result !== null && !!$.getInterceptor(result).$isFuture)
      if (!!$.getInterceptor(result).$is_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_setValue(), this.get$_setError());
        return;
      }
    else {
      $.assertSubtypeOfRuntimeType(result, $.getRuntimeTypeArgument(this, "_FutureImpl", 0));
      if (this._state !== 0)
        $.throwExpression(new $.StateError("Future already completed"));
      this._setValueUnchecked$1(result);
    }
  },
  $is_FutureImpl: true,
  $isFuture: true,
  $asObject: null,
  static: {
"": "_FutureImpl__INCOMPLETE,_FutureImpl__PENDING_COMPLETE,_FutureImpl__CHAINED,_FutureImpl__CHAINED_UNLISTENED,_FutureImpl__VALUE,_FutureImpl__ERROR,_FutureImpl__UNHANDLED_ERROR",
_FutureImpl__FutureImpl$wait: function(futures, T) {
  var t1, t2, t3, t4, $arguments, t5, pos;
  t1 = {};
  $.listSuperNativeTypeCheck(futures, "$isIterable");
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new $._FutureImpl__FutureImpl$wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = $.getRuntimeTypeArgument(futures, "JSArray", 0), $.listSuperNativeTypeCheck(futures, "$isIterable"), t4 = $.get$length$asx(futures), t4 = new $.ListIterator($.listSuperNativeTypeCheck(futures, "$isIterable"), t4, 0, $.assertSubtypeOfRuntimeType(null, t3)), $.setRuntimeTypeInfo(t4, [t3]), $.assertSubtype(t4, "$isIterator", [$.getRuntimeTypeArgument(futures, "JSArray", 0)], "$asIterator"); $.boolConversionCheck(t4.moveNext$0());) {
    t3 = t4.get$_liblib$_current();
    $arguments = $.substitute(t4.$asListIterator, $.getRuntimeTypeInfo(t4));
    if ($arguments == null)
      t5 = null;
    else {
      $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
      t5 = $arguments[0];
    }
    t3 = $.propertyTypeCheck($.assertSubtypeOfRuntimeType(t3, t5), "$isFuture");
    pos = t1.remaining_2;
    t1.remaining_2 = pos + 1;
    t3.catchError$1(t2).then$1(new $._FutureImpl__FutureImpl$wait_closure(t1, pos));
  }
  t2 = t1.remaining_2;
  if (t2 === 0) {
    $.assertSubtypeOfRuntimeType($.List_empty, null);
    t1 = null;
    $.assertSubtypeOfRuntimeType($.List_empty, t1);
    t2 = new $._FutureImpl(0, $.get$_Zone__current().fork$0(), null);
    $.setRuntimeTypeInfo(t2, [t1]);
    t2._state = 8;
    t2._resultOrListeners = $.List_empty;
    return $.assertSubtype($.assertSubtype(t2, "$isFuture", [null], "$asFuture"), "$is_FutureImpl", [T], "$as_FutureImpl");
  }
  t1.values_1 = $.List_List(t2, null);
  t2 = $.JSArray;
  t3 = t2;
  t4 = t3;
  t5 = new $._FutureImpl(0, $.get$_Zone__current().fork$0(), null);
  $.setRuntimeTypeInfo(t5, [t4]);
  t5 = new $._AsyncCompleter($.assertSubtype(t5, "$isFuture", [t4], "$asFuture"), false);
  $.setRuntimeTypeInfo(t5, [t3]);
  t5._Completer$0(t4);
  t1.completer_0 = $.assertSubtype(t5, "$isCompleter", [t2], "$asCompleter");
  return $.assertSubtype(t1.completer_0.future, "$is_FutureImpl", [T], "$as_FutureImpl");
}}

},

_FutureImpl__FutureImpl$wait_handleError: {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1.completer_0.completeError$1(error);
    }
  },
  $isFunction: true,
  $asObject: null,
  $signature: function() {
    return {func: "void__dynamic", void: true, args: [null]};
  }
},

_FutureImpl__FutureImpl$wait_closure: {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    t3 = this.pos_1;
    if (t3 < 0 || t3 >= t2.length)
      throw $.ioore(t3);
    t2[t3] = value;
    t1.remaining_2 = t1.remaining_2 - 1;
    if (t1.remaining_2 === 0) {
      t2 = t1.completer_0;
      t2.complete$1(t2, t1.values_1);
    }
  },
  $isFunction: true,
  $asObject: null,
  $signature: function() {
    return {func: "dynamic__Object", args: [$.Object]};
  }
},

_FutureImpl__asyncSetValue_closure: {"": "Closure;this_0,value_1",
  call$0: function() {
    this.this_0._setValueUnchecked$1(this.value_1);
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true
},

_FutureImpl__asyncSetError_closure: {"": "Closure;this_0,error_1",
  call$0: function() {
    this.this_0._setErrorUnchecked$1(this.error_1);
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true
},

_FutureImpl__scheduleUnhandledError_closure: {"": "Closure;this_0",
  call$0: function() {
    var t1, t2, error;
    t1 = this.this_0;
    t2 = t1.get$_state();
    if (t2 >= 16) {
      t1.set$_state((t2 & 4294967279) >>> 0);
      error = t1.get$_resultOrListeners();
      t1.get$_zone().handleUncaughtError$1(error);
    }
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true
},

_FutureImpl__addListener_closure: {"": "Closure;box_0,this_1",
  call$0: function() {
    var t1, t2, t3, value;
    t1 = this.this_1;
    t2 = t1.get$_state();
    t3 = this.box_0;
    if (t2 === 8) {
      value = $.assertSubtypeOfRuntimeType(t1.get$_resultOrListeners(), $.getRuntimeTypeArgument(t1, "_FutureImpl", 0));
      t3.listener_0._sendValue$1(value);
    } else {
      $.assertHelper(t2 >= 12);
      t3.listener_0._sendError$1(t1.get$_resultOrListeners());
    }
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true
},

_TransformFuture: {"": "_FutureImpl;_nextListener<",
  set$_nextListener: function(v) {
    this._nextListener = $.propertyTypeCheck(v, "$is_FutureListener");
  },
  _sendValue$1: function(value) {
    var $arguments, t1, t2;
    $arguments = $.substitute(this.$as_TransformFuture, $.getRuntimeTypeInfo(this));
    if ($arguments == null)
      t1 = null;
    else {
      $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
      t1 = $arguments[0];
    }
    t2 = this._zone;
    t1 = new $._TransformFuture__sendValue_closure(this, $.assertSubtypeOfRuntimeType(value, t1));
    $.assertFunctionSubtype(t1, "void_");
    t2._openCallbacks = t2._openCallbacks - 1;
    t2._runInZone$2(t1, false);
  },
  _sendError$1: function(error) {
    var t1, t2;
    t1 = this._zone;
    t2 = new $._TransformFuture__sendError_closure(this, error);
    $.assertFunctionSubtype(t2, "void_");
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._runInZone$2(t2, false);
  },
  _subscribeTo$1: function(future) {
    future._addListener$1(this);
  },
  $as_FutureImpl: function(S, T) {
    return [T];
  },
  $as_FutureImpl: function(S, T) {
    return [T];
  },
  $as_FutureListener: function(S, T) {
    return [S];
  },
  $asFuture: function(S, T) {
    return [T];
  },
  $asObject: null,
  $is_FutureListener: true
},

_TransformFuture__sendValue_closure: {"": "Closure;this_0,value_1",
  call$0: function() {
    return this.this_0._zonedSendValue$1(this.value_1);
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true
},

_TransformFuture__sendError_closure: {"": "Closure;this_0,error_1",
  call$0: function() {
    return this.this_0._zonedSendError$1(this.error_1);
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true
},

_ThenFuture: {"": "_TransformFuture;_onValue,_nextListener,_state,_zone,_resultOrListeners",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _zonedSendValue$1: function(value) {
    var result, e, s, exception, t1;
    $.assertSubtypeOfRuntimeType(value, $.getRuntimeTypeArgument(this, "_ThenFuture", 0));
    $.assertHelper(true);
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      t1 = $._asyncError(e, s);
      if (this._state !== 0)
        $.throwExpression(new $.StateError("Future already completed"));
      this._setErrorUnchecked$1(t1);
      return;
    }

    this._setOrChainValue$1(result);
  },
  _zonedSendError$1: function(error) {
    if (this._state !== 0)
      $.throwExpression(new $.StateError("Future already completed"));
    this._setErrorUnchecked$1(error);
  },
  $as_TransformFuture: null,
  $as_TransformFuture: null,
  $as_FutureImpl: function(S, T) {
    return [T];
  },
  $as_FutureListener: function(S, T) {
    return [S];
  },
  $asFuture: function(S, T) {
    return [T];
  },
  $asObject: null
},

_CatchErrorFuture: {"": "_TransformFuture;_test,_onError,_nextListener,_state,_zone,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _zonedSendValue$1: function(value) {
    $.assertSubtypeOfRuntimeType(value, $.getRuntimeTypeArgument(this, "_CatchErrorFuture", 0));
    $.assertSubtypeOfRuntimeType(value, $.getRuntimeTypeArgument(this, "_FutureImpl", 0));
    if (this._state !== 0)
      $.throwExpression(new $.StateError("Future already completed"));
    this._setValueUnchecked$1(value);
  },
  _zonedSendError$1: function(error) {
    var matchesTest, e, s, result, e0, s0, exception, t1;
    $.assertHelper(true);
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e0 = t1;
      s0 = $.getTraceFromException(exception);
      t1 = $._asyncError(e0, s0);
      if (this._state !== 0)
        $.throwExpression(new $.StateError("Future already completed"));
      this._setErrorUnchecked$1(t1);
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_TransformFuture: function(T) {
    return [T, T];
  },
  $as_TransformFuture: function(T) {
    return [T, T];
  },
  $as_FutureImpl: null,
  $as_FutureListener: null,
  $asFuture: null,
  $asObject: null
},

_SubscribeFuture: {"": "_ThenFuture;_onError,_onValue,_nextListener,_state,_zone,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _zonedSendError$1: function(error) {
    var result, e, s, exception, t1;
    $.assertHelper(this._onError != null);
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      t1 = $._asyncError(e, s);
      if (this._state !== 0)
        $.throwExpression(new $.StateError("Future already completed"));
      this._setErrorUnchecked$1(t1);
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_ThenFuture: null,
  $as_ThenFuture: null,
  $as_TransformFuture: null,
  $as_FutureImpl: function(S, T) {
    return [T];
  },
  $as_FutureListener: function(S, T) {
    return [S];
  },
  $asFuture: function(S, T) {
    return [T];
  },
  $asObject: null
},

_WhenFuture: {"": "_TransformFuture;_action,_nextListener,_state,_zone,_resultOrListeners",
  _action$0: function() {
    return this._action.call$0();
  },
  _zonedSendValue$1: function(value) {
    var result, resultFuture, e, s, t1, exception;
    $.assertSubtypeOfRuntimeType(value, $.getRuntimeTypeArgument(this, "_WhenFuture", 0));
    try {
      result = this._action$0();
      t1 = result;
      if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isFuture) {
        resultFuture = $.propertyTypeCheck(result, "$isFuture");
        resultFuture.then$2$onError(new $._WhenFuture__zonedSendValue_closure(this, value), this.get$_setError());
        return;
      }
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      t1 = $._asyncError(e, s);
      if (this._state !== 0)
        $.throwExpression(new $.StateError("Future already completed"));
      this._setErrorUnchecked$1(t1);
      return;
    }

    t1 = value;
    $.assertSubtypeOfRuntimeType(t1, $.getRuntimeTypeArgument(this, "_FutureImpl", 0));
    if (this._state !== 0)
      $.throwExpression(new $.StateError("Future already completed"));
    this._setValueUnchecked$1(t1);
  },
  _zonedSendError$1: function(error) {
    var t1, result, resultFuture, e, s, t2, exception;
    t1 = {};
    t1.error_0 = error;
    try {
      result = this._action$0();
      t2 = result;
      if (typeof t2 === "object" && t2 !== null && !!$.getInterceptor(t2).$isFuture) {
        resultFuture = $.propertyTypeCheck(result, "$isFuture");
        resultFuture.then$2$onError(new $._WhenFuture__zonedSendError_closure(t1, this), this.get$_setError());
        return;
      }
    } catch (exception) {
      t2 = $.unwrapException(exception);
      e = t2;
      s = $.getTraceFromException(exception);
      t1.error_0 = $._asyncError(e, s);
    }

    t1 = t1.error_0;
    if (this._state !== 0)
      $.throwExpression(new $.StateError("Future already completed"));
    this._setErrorUnchecked$1(t1);
  },
  $as_TransformFuture: function(T) {
    return [T, T];
  },
  $as_TransformFuture: function(T) {
    return [T, T];
  },
  $as_FutureImpl: null,
  $as_FutureListener: null,
  $asFuture: null,
  $asObject: null
},

_WhenFuture__zonedSendValue_closure: {"": "Closure;this_0,value_1",
  call$1: function(_) {
    var t1, t2;
    t1 = this.this_0;
    t2 = this.value_1;
    $.assertSubtypeOfRuntimeType(t2, $.getRuntimeTypeArgument(t1, "_FutureImpl", 0));
    if (t1.get$_state() !== 0)
      $.throwExpression(new $.StateError("Future already completed"));
    t1._setValueUnchecked$1(t2);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function() {
    return {func: "dynamic__dynamic", args: [null]};
  }
},

_WhenFuture__zonedSendError_closure: {"": "Closure;box_0,this_1",
  call$1: function(_) {
    var t1, t2;
    t1 = this.this_1;
    t2 = this.box_0.error_0;
    if (t1.get$_state() !== 0)
      $.throwExpression(new $.StateError("Future already completed"));
    t1._setErrorUnchecked$1(t2);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function() {
    return {func: "dynamic__dynamic", args: [null]};
  }
},

Stream: {"": "Object;",
  forEach$1: function(_, action) {
    var t1, future;
    t1 = {};
    $.assertFunctionSubtype(action, "void__T3", "Stream", this);
    future = new $._FutureImpl(0, $.get$_Zone__current().fork$0(), null);
    $.setRuntimeTypeInfo(future, [null]);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_forEach_closure(t1, this, action, future), true, new $.Stream_forEach_closure0(future), future.get$_setError());
    return future;
  },
  get$length: function(_) {
    var t1, future;
    t1 = {};
    future = new $._FutureImpl(0, $.get$_Zone__current().fork$0(), null);
    $.setRuntimeTypeInfo(future, [$.JSInt]);
    $.assertSubtype(future, "$is_FutureImpl", [$.JSInt], "$as_FutureImpl");
    t1.count_0 = 0;
    this.listen$4$cancelOnError$onDone$onError(new $.Stream_length_closure(t1), true, new $.Stream_length_closure0(t1, future), future.get$_setError());
    return $.assertSubtype(future, "$isFuture", [$.JSInt], "$asFuture");
  },
  $isStream: true
},

Stream_forEach_closure: {"": "Closure;box_0,this_1,action_2,future_3",
  call$1: function(element) {
    $._runUserCode(new $.Stream_forEach__closure(this.action_2, $.assertSubtypeOfRuntimeType(element, $.getRuntimeTypeArgument(this.this_1, "Stream", 0))), new $.Stream_forEach__closure0(), $._cancelAndError(this.box_0.subscription_0, this.future_3));
  },
  $isFunction: true,
  $asObject: null,
  $signature: function() {
    return $.computeSignature(function(T) {
      return {func: "dynamic__T0", args: [T]};
    }, this.this_1, "Stream");
  }
},

Stream_forEach__closure: {"": "Closure;action_4,element_5",
  call$0: function() {
    return this.action_4.call$1(this.element_5);
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true
},

Stream_forEach__closure0: {"": "Closure;",
  call$1: function(_) {
  },
  $isFunction: true,
  $asObject: null,
  $signature: function() {
    return {func: "dynamic__dynamic", args: [null]};
  }
},

Stream_forEach_closure0: {"": "Closure;future_6",
  call$0: function() {
    var t1 = this.future_6;
    $.assertSubtypeOfRuntimeType(null, $.getRuntimeTypeArgument(t1, "_FutureImpl", 0));
    if (t1._state !== 0)
      $.throwExpression(new $.StateError("Future already completed"));
    t1._setValueUnchecked$1(null);
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true
},

Stream_length_closure: {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = t1.count_0 + 1;
  },
  $isFunction: true,
  $asObject: null,
  $signature: function() {
    return {func: "dynamic__dynamic", args: [null]};
  }
},

Stream_length_closure0: {"": "Closure;box_0,future_1",
  call$0: function() {
    var t1, t2;
    t1 = this.future_1;
    t2 = this.box_0.count_0;
    $.assertSubtypeOfRuntimeType(t2, $.getRuntimeTypeArgument(t1, "_FutureImpl", 0));
    if (t1._state !== 0)
      $.throwExpression(new $.StateError("Future already completed"));
    t1._setValueUnchecked$1(t2);
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true
},

StreamSubscription: {"": "Object;", $isStreamSubscription: true},

EventSink: {"": "Object;"},

_EventSink: {"": "Object;", $is_EventSink: true},

_BufferingStreamSubscription: {"": "Object;_liblib2$_onData,_onError,_onDone,_zone<,_state<,_pending",
  set$_state: function(v) {
    this._state = $.intTypeCheck(v);
  },
  _liblib2$_onData$1: function(arg0) {
    return this._liblib2$_onData.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  pause$1: function(_, resumeSignal) {
    var t1, t2;
    t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 + 64 | 4) >>> 0;
    if (t1 < 64 && this._pending != null) {
      t2 = this._pending;
      t2.cancelSchedule$0;
      if (t2._state === 1)
        t2._state = 3;
    }
    if ((t1 & 4) === 0 && (this._state & 16) === 0)
      this._guardCallback$1(this.get$_onPause());
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  resume$0: function() {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    t1 = t1 >= 64;
    if (t1) {
      $.assertHelper(t1);
      this._state = this._state - 64;
      t1 = this._state;
      if (t1 < 64) {
        if ((t1 & 32) !== 0) {
          t1 = this._pending;
          t1.get$isEmpty;
          t1 = t1.lastPendingEvent != null;
        } else
          t1 = false;
        if (t1)
          this._pending.schedule$1(this);
        else {
          $.assertHelper(this.get$_mayResumeInput());
          this._state = (this._state & 4294967291) >>> 0;
          if ((this._state & 16) === 0)
            this._guardCallback$1(this.get$_onResume());
        }
      }
    }
  },
  cancel$0: function() {
    if ((this._state & 8) !== 0)
      return;
    this._cancel$0();
    var t1 = this._state;
    if ((t1 & 16) === 0) {
      this._state = (t1 | 16) >>> 0;
      this._onCancel$0();
      this._pending = null;
      this._state = (this._state & 4294967279) >>> 0;
    }
  },
  get$_mayResumeInput: function() {
    if (this._state < 64) {
      var t1 = this._pending;
      if (t1 != null) {
        t1.get$isEmpty;
        t1 = t1.lastPendingEvent == null;
      } else
        t1 = true;
    } else
      t1 = false;
    return t1;
  },
  _cancel$0: function() {
    this._state = (this._state | 8) >>> 0;
    this._zone.cancelCallbackExpectation$0();
    if ((this._state & 32) !== 0) {
      var t1 = this._pending;
      t1.cancelSchedule$0;
      if (t1._state === 1)
        t1._state = 3;
    }
  },
  _liblib2$_add$1: function(data) {
    var t1;
    $.assertSubtypeOfRuntimeType(data, $.getRuntimeTypeArgument(this, "_BufferingStreamSubscription", 0));
    $.assertHelper((this._state & 2) === 0);
    t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 < 16)
      this._sendData$1(data);
    else {
      t1 = new $._DelayedData($.assertSubtypeOfRuntimeType(data, null), null);
      $.setRuntimeTypeInfo(t1, [null]);
      this._addPending$1(t1);
    }
  },
  _addError$1: function(error) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 < 16)
      this._sendError$1(error);
    else
      this._addPending$1(new $._DelayedError(error, null));
  },
  _close$0: function() {
    $.assertHelper((this._state & 2) === 0);
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 | 2) >>> 0;
    if (this._state < 16)
      this._sendDone$0();
    else
      this._addPending$1($.C__DelayedDone);
  },
  _onPause$0: function() {
    $.assertHelper((this._state & 4) !== 0);
  },
  get$_onPause: function() {
    return new $.Bound__onPause__BufferingStreamSubscription(this, "_onPause$0", null);
  },
  _onResume$0: function() {
    $.assertHelper((this._state & 4) === 0);
  },
  get$_onResume: function() {
    return new $.Bound__onResume__BufferingStreamSubscription(this, "_onResume$0", null);
  },
  _onCancel$0: function() {
    $.assertHelper((this._state & 8) !== 0);
  },
  _addPending$1: function($event) {
    var pending, t1;
    pending = this._pending;
    if (pending == null) {
      pending = new $._StreamImplEvents(null, null, 0);
      this._pending = pending;
    }
    pending.add$1(pending, $event);
    t1 = this._state;
    if ((t1 & 32) === 0) {
      this._state = (t1 | 32) >>> 0;
      if (this._state < 64)
        this._pending.schedule$1(this);
    }
  },
  _sendData$1: function(data) {
    var t1;
    $.assertSubtypeOfRuntimeType(data, $.getRuntimeTypeArgument(this, "_BufferingStreamSubscription", 0));
    $.assertHelper((this._state & 8) === 0);
    $.assertHelper(this._state < 64);
    $.assertHelper((this._state & 16) === 0);
    t1 = this._state;
    this._state = (t1 | 16) >>> 0;
    this._zone.executePeriodicCallbackGuarded$1(new $._BufferingStreamSubscription__sendData_closure(this, data));
    this._state = (this._state & 4294967279) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  _sendError$1: function(error) {
    var t1, t2;
    $.assertHelper((this._state & 8) === 0);
    $.assertHelper(this._state < 64);
    $.assertHelper((this._state & 16) === 0);
    t1 = this._state;
    this._state = (t1 | 16) >>> 0;
    t2 = this._zone;
    if (!t2.inSameErrorZone$1($.get$_Zone__current()))
      $.get$_Zone__current().handleUncaughtError$1(error);
    else
      t2.executePeriodicCallbackGuarded$1(new $._BufferingStreamSubscription__sendError_closure(this, error));
    this._state = (this._state & 4294967279) >>> 0;
    if ((this._state & 1) !== 0)
      this._cancel$0();
    this._checkState$1((t1 & 4) !== 0);
  },
  _sendDone$0: function() {
    $.assertHelper((this._state & 8) === 0);
    $.assertHelper(this._state < 64);
    $.assertHelper((this._state & 16) === 0);
    this._state = (this._state | 26) >>> 0;
    this._zone.executeCallbackGuarded$1(this._onDone);
    this._onCancel$0();
    this._state = (this._state & 4294967279) >>> 0;
  },
  _guardCallback$1: function(callback) {
    var t1;
    $.assertHelper((this._state & 16) === 0);
    t1 = this._state;
    this._state = (t1 | 16) >>> 0;
    callback.call$0();
    this._state = (this._state & 4294967279) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  _checkState$1: function(wasInputPaused) {
    var t1, t2, isInputPaused;
    $.assertHelper((this._state & 16) === 0);
    t1 = this._state;
    if ((t1 & 32) !== 0) {
      t2 = this._pending;
      t2.get$isEmpty;
      t2 = t2.lastPendingEvent == null;
    } else
      t2 = false;
    if (t2) {
      this._state = (t1 & 4294967263) >>> 0;
      if ((this._state & 4) !== 0 && this.get$_mayResumeInput())
        this._state = (this._state & 4294967291) >>> 0;
    }
    for (; true; wasInputPaused = isInputPaused) {
      t1 = this._state;
      if ((t1 & 8) !== 0) {
        this._onCancel$0();
        this._pending = null;
        return;
      }
      isInputPaused = (t1 & 4) !== 0;
      if (wasInputPaused === isInputPaused)
        break;
      this._state = (t1 ^ 16) >>> 0;
      if (isInputPaused)
        this._onPause$0();
      else
        this._onResume$0();
      this._state = (this._state & 4294967279) >>> 0;
    }
    t1 = this._state;
    if ((t1 & 32) !== 0 && t1 < 64)
      this._pending.schedule$1(this);
  },
  _BufferingStreamSubscription$4: function(_onData, _onError, _onDone, cancelOnError, T) {
    $.assertFunctionSubtype(_onData, "void__T1", "_BufferingStreamSubscription", this);
    $.assertFunctionSubtype(_onError, "void__dynamic");
    $.assertFunctionSubtype(_onDone, "void_");
    $.assertHelper(true);
    $.assertHelper(this._onError != null);
    $.assertHelper(true);
    this._zone.expectCallback$0();
  },
  $is_EventDispatch: true,
  $asObject: null,
  $is_EventSink: true,
  $isStreamSubscription: true,
  static: {
"": "_BufferingStreamSubscription__STATE_CANCEL_ON_ERROR,_BufferingStreamSubscription__STATE_CLOSED,_BufferingStreamSubscription__STATE_INPUT_PAUSED,_BufferingStreamSubscription__STATE_CANCELED,_BufferingStreamSubscription__STATE_IN_CALLBACK,_BufferingStreamSubscription__STATE_HAS_PENDING,_BufferingStreamSubscription__STATE_PAUSE_COUNT,_BufferingStreamSubscription__STATE_PAUSE_COUNT_SHIFT",
}

},

_BufferingStreamSubscription__sendData_closure: {"": "Closure;this_0,data_1",
  call$0: function() {
    return this.this_0._liblib2$_onData$1(this.data_1);
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true
},

_BufferingStreamSubscription__sendError_closure: {"": "Closure;this_0,error_1",
  call$0: function() {
    return this.this_0._onError$1(this.error_1);
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true
},

_DelayedEvent: {"": "Object;next<",
  set$next: function(v) {
    this.next = $.propertyTypeCheck(v, "$is_DelayedEvent");
  },
  $is_DelayedEvent: true
},

_DelayedData: {"": "_DelayedEvent;value,next",
  perform$1: function(dispatch) {
    $.assertSubtype(dispatch, "$is_EventDispatch", [$.getRuntimeTypeArgument(this, "_DelayedData", 0)], "$as_EventDispatch")._sendData$1(this.value);
  },
  $as_DelayedEvent: null,
  $asObject: null
},

_DelayedError: {"": "_DelayedEvent;error,next",
  perform$1: function(dispatch) {
    dispatch._sendError$1(this.error);
  }
},

_DelayedDone: {"": "Object;",
  perform$1: function(dispatch) {
    dispatch._sendDone$0();
  },
  get$next: function() {
    return;
  },
  set$next: function(_) {
    throw $.wrapException(new $.StateError("No events after a done."));
  },
  $is_DelayedEvent: true,
  $asObject: null
},

_PendingEvents: {"": "Object;_state<",
  set$_state: function(v) {
    this._state = $.intTypeCheck(v);
  },
  schedule$1: function(dispatch) {
    var t1;
    if (this._state === 1)
      return;
    $.assertHelper(!this.get$isEmpty(this));
    t1 = this._state;
    if (t1 >= 1) {
      $.assertHelper(t1 === 3);
      this._state = 1;
      return;
    }
    $.runAsync(new $._PendingEvents_schedule_closure(this, dispatch));
    this._state = 1;
  },
  $is_PendingEvents: true
},

_PendingEvents_schedule_closure: {"": "Closure;this_0,dispatch_1",
  call$0: function() {
    var t1, oldState;
    t1 = this.this_0;
    oldState = t1.get$_state();
    t1.set$_state(0);
    if (oldState === 3)
      return;
    t1.handleNext$1(this.dispatch_1);
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true
},

_StreamImplEvents: {"": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
  get$isEmpty: function(_) {
    return this.lastPendingEvent == null;
  },
  add$1: function(_, $event) {
    var t1;
    $.propertyTypeCheck($event, "$is_DelayedEvent");
    t1 = this.lastPendingEvent;
    if (t1 == null) {
      this.lastPendingEvent = $event;
      this.firstPendingEvent = $event;
    } else {
      t1.set$next($event);
      this.lastPendingEvent = $event;
    }
  },
  handleNext$1: function(dispatch) {
    var $event;
    $.assertHelper(this._state !== 1);
    $event = this.firstPendingEvent;
    this.firstPendingEvent = $event.get$next();
    if (this.firstPendingEvent == null)
      this.lastPendingEvent = null;
    $event.perform$1(dispatch);
  },
  $is_StreamImplEvents: true
},

_cancelAndError_closure: {"": "Closure;subscription_0,future_1",
  call$1: function(error) {
    var t1;
    this.subscription_0.cancel$0();
    t1 = this.future_1;
    if (t1._state !== 0)
      $.throwExpression(new $.StateError("Future already completed"));
    t1._setErrorUnchecked$1(error);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function() {
    return {func: "dynamic__dynamic", args: [null]};
  }
},

_ForwardingStream: {"": "Stream;",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    $.assertFunctionSubtype(onData, "void__T", "_ForwardingStream", this);
    $.assertFunctionSubtype(onDone, "void_");
    $.assertFunctionSubtype(onError, "void__dynamic");
    $.assertFunctionSubtype(onData, "void__T", "_ForwardingStream", this);
    $.assertFunctionSubtype(onError, "void__dynamic");
    $.assertFunctionSubtype(onDone, "void_");
    return $.assertSubtype($.assertSubtype($._ForwardingStreamSubscription$(this, onData, onError, onDone, true === cancelOnError, $.getRuntimeTypeArgument(this, "_ForwardingStream", 0), $.getRuntimeTypeArgument(this, "_ForwardingStream", 1)), "$isStreamSubscription", [$.getRuntimeTypeArgument(this, "_ForwardingStream", 1)], "$asStreamSubscription"), "$isStreamSubscription", [$.getRuntimeTypeArgument(this, "_ForwardingStream", 1)], "$asStreamSubscription");
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  _handleData$2: function(data, sink) {
    $.assertSubtypeOfRuntimeType(data, $.getRuntimeTypeArgument(this, "_ForwardingStream", 0));
    $.assertSubtype(sink, "$is_EventSink", [$.getRuntimeTypeArgument(this, "_ForwardingStream", 1)], "$as_EventSink")._liblib2$_add$1(data);
  },
  $is_ForwardingStream: true,
  $asStream: function(S, T) {
    return [T];
  },
  $asStream: function(S, T) {
    return [T];
  },
  $asObject: null
},

_ForwardingStreamSubscription: {"": "_BufferingStreamSubscription;_stream,_subscription,_liblib2$_onData,_onError,_onDone,_zone,_state,_pending",
  set$_subscription: function(v) {
    this._subscription = $.propertyTypeCheck(v, "$isStreamSubscription");
  },
  _liblib2$_add$1: function(data) {
    $.assertSubtypeOfRuntimeType(data, $.getRuntimeTypeArgument(this, "_ForwardingStreamSubscription", 1));
    if ((this._state & 2) !== 0)
      return;
    $._BufferingStreamSubscription.prototype._liblib2$_add$1.call(this, data);
  },
  _addError$1: function(error) {
    if ((this._state & 2) !== 0)
      return;
    $._BufferingStreamSubscription.prototype._addError$1.call(this, error);
  },
  _onPause$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      return;
    t1.pause$0(t1);
  },
  get$_onPause: function() {
    return new $.Bound__onPause__ForwardingStreamSubscription(this, "_onPause$0", null);
  },
  _onResume$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      return;
    t1.resume$0();
  },
  get$_onResume: function() {
    return new $.Bound__onResume__ForwardingStreamSubscription(this, "_onResume$0", null);
  },
  _onCancel$0: function() {
    var t1 = this._subscription;
    if (t1 != null) {
      this.set$_subscription(null);
      t1.cancel$0();
    }
  },
  _handleData$1: function(data) {
    this._stream._handleData$2($.assertSubtypeOfRuntimeType(data, $.getRuntimeTypeArgument(this, "_ForwardingStreamSubscription", 0)), this);
  },
  get$_handleData: function() {
    return new $.Bound__handleData__ForwardingStreamSubscription(this, "_handleData$1", null);
  },
  _handleError$1: function(error) {
    $.assertSubtype(this, "$is_EventSink", [$.getRuntimeTypeArgument(this._stream, "_ForwardingStream", 1)], "$as_EventSink");
    this._addError$1(error);
  },
  get$_handleError: function() {
    return new $.Bound__handleError__ForwardingStreamSubscription(this, "_handleError$1", null);
  },
  _handleDone$0: function() {
    $.assertSubtype(this, "$is_EventSink", [$.getRuntimeTypeArgument(this._stream, "_ForwardingStream", 1)], "$as_EventSink");
    this._close$0();
  },
  get$_handleDone: function() {
    return new $.Bound__handleDone__ForwardingStreamSubscription(this, "_handleDone$0", null);
  },
  _ForwardingStreamSubscription$5: function(_stream, onData, onError, onDone, cancelOnError, S, T) {
    var t1, t2;
    $.assertSubtype(_stream, "$is_ForwardingStream", [S, T], "$as_ForwardingStream");
    $.assertFunctionSubtype(onData, "void__T0", "_ForwardingStreamSubscription", this);
    $.assertFunctionSubtype(onError, "void__dynamic");
    $.assertFunctionSubtype(onDone, "void_");
    t1 = this.get$_handleData();
    t2 = this.get$_handleError();
    this.set$_subscription(this._stream._source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2));
  },
  $as_BufferingStreamSubscription: function(S, T) {
    return [T];
  },
  $as_BufferingStreamSubscription: function(S, T) {
    return [T];
  },
  $as_EventDispatch: function(S, T) {
    return [T];
  },
  $as_EventSink: function(S, T) {
    return [T];
  },
  $asStreamSubscription: function(S, T) {
    return [T];
  },
  $asObject: null,
  static: {
_ForwardingStreamSubscription$: function(_stream, onData, onError, onDone, cancelOnError, S, T) {
  var t1, t2, t3;
  $.assertSubtype(_stream, "$is_ForwardingStream", [S, T], "$as_ForwardingStream");
  $.assertFunctionSubtype(onData, "void__T0", "_ForwardingStreamSubscription", null, [S, T]);
  $.assertFunctionSubtype(onError, "void__dynamic");
  $.assertFunctionSubtype(onDone, "void_");
  t1 = T;
  t2 = $.get$_Zone__current();
  t3 = cancelOnError ? 1 : 0;
  t3 = new $._ForwardingStreamSubscription($.assertSubtype(_stream, "$is_ForwardingStream", [S, T], "$as_ForwardingStream"), $.assertSubtype(null, "$isStreamSubscription", [S], "$asStreamSubscription"), $.assertFunctionSubtype(onData, "void__T1", "_BufferingStreamSubscription", null, [t1]), onError, onDone, t2, t3, null);
  $.setRuntimeTypeInfo(t3, [S, T]);
  t3._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, t1);
  t3._ForwardingStreamSubscription$5(_stream, onData, onError, onDone, cancelOnError, S, T);
  return t3;
}}

},

_WhereStream: {"": "_ForwardingStream;_test,_source",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var satisfies, e, s, exception, t1;
    $.assertSubtypeOfRuntimeType(inputEvent, $.getRuntimeTypeArgument(this, "_WhereStream", 0));
    $.assertSubtype(sink, "$is_EventSink", [$.getRuntimeTypeArgument(this, "_WhereStream", 0)], "$as_EventSink");
    satisfies = null;
    try {
      satisfies = $.boolTypeCheck(this._test$1(inputEvent));
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      sink._addError$1($._asyncError(e, s));
      return;
    }

    if ($.boolConversionCheck(satisfies))
      sink._liblib2$_add$1(inputEvent);
  },
  $as_ForwardingStream: function(T) {
    return [T, T];
  },
  $as_ForwardingStream: function(T) {
    return [T, T];
  },
  $asStream: null,
  $asObject: null
},

_MapStream: {"": "_ForwardingStream;_transform,_source",
  _transform$1: function(arg0) {
    return this._transform.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var outputEvent, e, s, exception, t1;
    $.assertSubtypeOfRuntimeType(inputEvent, $.getRuntimeTypeArgument(this, "_MapStream", 0));
    $.assertSubtype(sink, "$is_EventSink", [$.getRuntimeTypeArgument(this, "_MapStream", 1)], "$as_EventSink");
    outputEvent = null;
    try {
      outputEvent = $.assertSubtypeOfRuntimeType(this._transform$1(inputEvent), $.getRuntimeTypeArgument(this, "_MapStream", 1));
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      sink._addError$1($._asyncError(e, s));
      return;
    }

    sink._liblib2$_add$1(outputEvent);
  },
  $as_ForwardingStream: null,
  $as_ForwardingStream: null,
  $asStream: function(S, T) {
    return [T];
  },
  $asObject: null
},

_SkipStream: {"": "_ForwardingStream;_remaining,_source",
  _handleData$2: function(inputEvent, sink) {
    var t1;
    $.assertSubtypeOfRuntimeType(inputEvent, $.getRuntimeTypeArgument(this, "_SkipStream", 0));
    $.assertSubtype(sink, "$is_EventSink", [$.getRuntimeTypeArgument(this, "_SkipStream", 0)], "$as_EventSink");
    t1 = this._remaining;
    if (t1 == null)
      throw t1.$gt();
    if (t1 > 0) {
      this._remaining = t1 - 1;
      return;
    }
    return $.voidTypeCheck(sink._liblib2$_add$1(inputEvent));
  },
  $as_ForwardingStream: function(T) {
    return [T, T];
  },
  $as_ForwardingStream: function(T) {
    return [T, T];
  },
  $asStream: null,
  $asObject: null
},

_Zone: {"": "Object;", $is_Zone: true},

_ZoneBase: {"": "Object;_parentZone,_children,_openCallbacks,_isExecutingCallback",
  get$_errorZone: function() {
    return this._parentZone.get$_errorZone();
  },
  handleUncaughtError$1: function(error) {
    this._parentZone.handleUncaughtError$1(error);
  },
  inSameErrorZone$1: function(otherZone) {
    var t1, t2;
    t1 = this.get$_errorZone();
    t2 = otherZone.get$_errorZone();
    return t1 == null ? t2 == null : t1 === t2;
  },
  fork$0: function() {
    return this;
  },
  expectCallback$0: function() {
    var t1 = this._openCallbacks;
    this._openCallbacks = t1 + 1;
    return t1;
  },
  cancelCallbackExpectation$0: function() {
    this._openCallbacks = this._openCallbacks - 1;
    this._checkIfDone$0();
  },
  _checkIfDone$0: function() {
    if (!$.boolConversionCheck(this._isExecutingCallback) && this._openCallbacks === 0 && this._children.length === 0)
      ;
  },
  executeCallbackGuarded$1: function(f) {
    $.assertFunctionSubtype(f, "void_");
    this._openCallbacks = this._openCallbacks - 1;
    this._runInZone$2(f, true);
  },
  executePeriodicCallbackGuarded$1: function(f) {
    this._runInZone$2($.assertFunctionSubtype(f, "void_"), true);
  },
  _runInZone$2: function(f, handleUncaught) {
    var oldZone, oldIsExecuting, e, s, t1, exception;
    $.assertFunctionSubtype(f, "dynamic_");
    if ($.get$_Zone__current() === this && !$.boolConversionCheck(handleUncaught) && $.boolConversionCheck(this._isExecutingCallback))
      return f.call$0();
    oldZone = $.get$_Zone__current();
    $._Zone__current = this;
    oldIsExecuting = this._isExecutingCallback;
    this._isExecutingCallback = true;
    try {
      try {
        t1 = f.call$0();
        return t1;
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        if ($.boolConversionCheck(handleUncaught))
          this.handleUncaughtError$1($._asyncError(e, s));
        else
          throw exception;
      }

    } finally {
      this._isExecutingCallback = $.boolTypeCheck(oldIsExecuting);
      $._Zone__current = $.propertyTypeCheck(oldZone, "$is_Zone");
      this._checkIfDone$0();
    }
  },
  runAsync$2: function(f, zone) {
    return this._parentZone.runAsync$2($.assertFunctionSubtype(f, "void_"), zone);
  },
  createTimer$2: function(duration, callback) {
    var t1, t2;
    t1 = new $._ZoneTimer(this, $.assertFunctionSubtype(callback, "void_"), null);
    t2 = t1._zone;
    t2._openCallbacks = t2._openCallbacks + 1;
    t1._timer = $._createTimer(duration, t1.get$_run());
    return t1;
  },
  $is_Zone: true,
  $asObject: null
},

_DefaultZone: {"": "_ZoneBase;_parentZone,_children,_openCallbacks,_isExecutingCallback",
  get$_errorZone: function() {
    return this;
  },
  handleUncaughtError$1: function(error) {
    $._scheduleAsyncCallback(new $._DefaultZone_handleUncaughtError_closure(error));
  },
  runAsync$2: function(f, zone) {
    $.assertFunctionSubtype(f, "void_");
    if (this === zone) {
      $._scheduleAsyncCallback(f);
      return;
    }
    zone.expectCallback$0();
    $._scheduleAsyncCallback(new $._DefaultZone_runAsync_closure(f, zone));
  }
},

_DefaultZone_handleUncaughtError_closure: {"": "Closure;error_0",
  call$0: function() {
    var t1, trace;
    t1 = this.error_0;
    $.Primitives_printString("Uncaught Error: " + $.S(t1));
    trace = $.getAttachedStackTrace(t1);
    $._attachStackTrace(t1, null);
    if (trace != null)
      $.Primitives_printString("Stack Trace:\n" + $.S(trace) + "\n");
    throw $.wrapException(t1);
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true
},

_DefaultZone_runAsync_closure: {"": "Closure;f_0,zone_1",
  call$0: function() {
    this.zone_1.executeCallbackGuarded$1(this.f_0);
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true
},

_ZoneTimer: {"": "Object;_zone<,_liblib2$_callback,_timer",
  _run$0: function() {
    var t1, t2;
    t1 = this._zone;
    t2 = this._liblib2$_callback;
    $.assertFunctionSubtype(t2, "void_");
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._runInZone$2(t2, true);
  },
  get$_run: function() {
    return new $.Bound__run__ZoneTimer(this, "_run$0", null);
  },
  $isTimer: true,
  $asObject: null
}}],
["dart.collection", "dart:collection", , {
Maps_mapToString: function(m) {
  var t1, result, i, t2;
  t1 = {};
  for (i = 0; i < $.get$Maps__toStringList().length; ++i) {
    t2 = $.get$Maps__toStringList();
    if (i >= t2.length)
      throw $.ioore(i);
    if (t2[i] === m)
      return "{...}";
  }
  result = $.StringBuffer$("");
  try {
    $.JSArray_methods.add$1($.get$Maps__toStringList(), m);
    result.write$1("{");
    t1.first_0 = true;
    $.forEach$1$ax(m, new $.Maps_mapToString_closure(t1, result));
    result.write$1("}");
  } finally {
    t1 = $.JSArray_methods.get$last($.get$Maps__toStringList());
    t2 = m;
    $.assertHelper(t1 == null ? t2 == null : t1 === t2);
    t2 = $.get$Maps__toStringList();
    if (0 >= t2.length)
      throw $.ioore(0);
    t2.pop();
  }
  return result.get$_contents();
},

HashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function() {
    return {func: "dynamic__dynamic", args: [null]};
  }
},

HashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._liblib1$_length;
  },
  get$iterator: function(_) {
    var t1, t2;
    t1 = this._map;
    t2 = $.getRuntimeTypeArgument(this, "HashMapKeyIterable", 0);
    t1 = new $.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, $.assertSubtypeOfRuntimeType(null, t2));
    $.setRuntimeTypeInfo(t1, [t2]);
    return $.assertSubtype(t1, "$isIterator", [$.getRuntimeTypeArgument(this, "HashMapKeyIterable", 0)], "$asIterator");
  },
  forEach$1: function(_, f) {
    var t1, keys, $length, i;
    $.assertFunctionSubtype(f, "void__E4", "HashMapKeyIterable", this);
    t1 = this._map;
    keys = t1._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      f.call$1(keys[i]);
      if (keys !== t1._keys)
        throw $.wrapException(new $.ConcurrentModificationError(t1));
    }
  },
  $asIterableBase: null,
  $asIterableBase: null,
  $asIterable: null,
  $asObject: null
},

HashMapKeyIterator: {"": "Object;_map,_keys,_offset,_liblib1$_current?",
  get$current: function() {
    var t1, $arguments, t2;
    t1 = this._liblib1$_current;
    $arguments = $.substitute(this.$asHashMapKeyIterator, $.getRuntimeTypeInfo(this));
    if ($arguments == null)
      t2 = null;
    else {
      $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
      t2 = $arguments[0];
    }
    return $.assertSubtypeOfRuntimeType(t1, t2);
  },
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._offset;
    t1 = this._map;
    if (keys !== t1._keys)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    else if (offset >= keys.length) {
      this.set$_liblib1$_current(null);
      return false;
    } else {
      this.set$_liblib1$_current(keys[offset]);
      this._offset = offset + 1;
      return true;
    }
  },
  $isIterator: true,
  $asObject: null
},

LinkedHashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function() {
    return {func: "dynamic__dynamic", args: [null]};
  }
},

LinkedHashMapCell: {"": "Object;_key,_value,_next,_previous", $isLinkedHashMapCell: true},

LinkedHashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._liblib1$_length;
  },
  get$iterator: function(_) {
    var t1, t2;
    t1 = this._map;
    t2 = $.getRuntimeTypeArgument(this, "LinkedHashMapKeyIterable", 0);
    t1 = new $.LinkedHashMapKeyIterator(t1, t1._modifications, null, $.assertSubtypeOfRuntimeType(null, t2));
    $.setRuntimeTypeInfo(t1, [t2]);
    t1._cell = t1._map._first;
    return $.assertSubtype(t1, "$isIterator", [$.getRuntimeTypeArgument(this, "LinkedHashMapKeyIterable", 0)], "$asIterator");
  },
  forEach$1: function(_, f) {
    var t1, cell, modifications;
    $.assertFunctionSubtype(f, "void__E3", "LinkedHashMapKeyIterable", this);
    t1 = this._map;
    cell = t1._first;
    modifications = t1._modifications;
    for (; cell != null;) {
      f.call$1(cell._key);
      if (modifications !== t1._modifications)
        throw $.wrapException(new $.ConcurrentModificationError(t1));
      cell = cell._next;
    }
  },
  $asIterableBase: null,
  $asIterableBase: null,
  $asIterable: null,
  $asObject: null
},

LinkedHashMapKeyIterator: {"": "Object;_map,_modifications,_cell,_liblib1$_current?",
  get$current: function() {
    var t1, $arguments, t2;
    t1 = this._liblib1$_current;
    $arguments = $.substitute(this.$asLinkedHashMapKeyIterator, $.getRuntimeTypeInfo(this));
    if ($arguments == null)
      t2 = null;
    else {
      $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
      t2 = $arguments[0];
    }
    return $.assertSubtypeOfRuntimeType(t1, t2);
  },
  moveNext$0: function() {
    var t1 = this._map;
    if (this._modifications !== t1._modifications)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this.set$_liblib1$_current(null);
        return false;
      } else {
        this.set$_liblib1$_current(t1._key);
        this._cell = this._cell._next;
        return true;
      }
    }
  },
  $isIterator: true,
  $asObject: null
},

LinkedHashSetCell: {"": "Object;_liblib1$_element,_next,_previous", $isLinkedHashSetCell: true},

LinkedHashSetIterator: {"": "Object;_set,_modifications,_cell,_liblib1$_current?",
  get$current: function() {
    var t1, $arguments, t2;
    t1 = this._liblib1$_current;
    $arguments = $.substitute(this.$asLinkedHashSetIterator, $.getRuntimeTypeInfo(this));
    if ($arguments == null)
      t2 = null;
    else {
      $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
      t2 = $arguments[0];
    }
    return $.assertSubtypeOfRuntimeType(t1, t2);
  },
  moveNext$0: function() {
    var t1 = this._set;
    if (this._modifications !== t1._modifications)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this.set$_liblib1$_current(null);
        return false;
      } else {
        this.set$_liblib1$_current(t1._liblib1$_element);
        this._cell = this._cell._next;
        return true;
      }
    }
  },
  $isIterator: true,
  $asObject: null
},

HashMap: {"": "Object;_liblib1$_length,_strings,_nums,_rest,_keys",
  get$length: function(_) {
    return this._liblib1$_length;
  },
  get$keys: function() {
    var t1 = new $.HashMapKeyIterable(this);
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(this, "HashMap", 0)]);
    return $.listSuperNativeTypeCheck(t1, "$isIterable");
  },
  get$values: function(_) {
    var t1, t2, t3;
    t1 = new $.HashMapKeyIterable(this);
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(this, "HashMap", 0)]);
    $.listSuperNativeTypeCheck(t1, "$isIterable");
    t2 = new $.HashMap_values_closure(this);
    $.assertFunctionSubtype(t2, "dynamic__E", "IterableBase", t1);
    t3 = $.getRuntimeTypeArgument(t1, "IterableBase", 0);
    $.listSuperNativeTypeCheck(t1, "$isIterable");
    $.assertFunctionSubtype(t2, "T__S", "MappedIterable", null, [t3, null]);
    t2 = new $.MappedIterable($.listSuperNativeTypeCheck(t1, "$isIterable"), $.assertFunctionSubtype(t2, "T__S", "MappedIterable", null, [t3, null]));
    $.setRuntimeTypeInfo(t2, [t3, null]);
    return $.listSuperNativeTypeCheck(t2, "$isIterable");
  },
  containsKey$1: function(key) {
    var strings, nums, rest;
    if (false) {
      strings = this._strings;
      return strings == null ? false : strings[key] != null;
    } else if ((key & 0x3ffffff) === key) {
      nums = this._nums;
      return nums == null ? false : nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.HashMap__findBucketIndex($.listTypeCheck(rest[$.JSInt_methods.get$hashCode(key) & 0x3ffffff]), key) >= 0;
    }
  },
  $index: function(_, key) {
    var strings, t1, entry, $arguments, t2, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      $arguments = $.substitute(this.$asHashMap, $.getRuntimeTypeInfo(this));
      if ($arguments == null)
        t2 = null;
      else {
        $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
        t2 = $arguments[1];
      }
      return $.assertSubtypeOfRuntimeType(t1, t2);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      $arguments = $.substitute(this.$asHashMap, $.getRuntimeTypeInfo(this));
      if ($arguments == null)
        t2 = null;
      else {
        $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
        t2 = $arguments[1];
      }
      return $.assertSubtypeOfRuntimeType(t1, t2);
    } else {
      rest = this._rest;
      if (rest == null) {
        $arguments = $.substitute(this.$asHashMap, $.getRuntimeTypeInfo(this));
        if ($arguments == null)
          t1 = null;
        else {
          $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
          t1 = $arguments[1];
        }
        return $.assertSubtypeOfRuntimeType(null, t1);
      }
      bucket = $.listTypeCheck(rest[$.get$hashCode$(key) & 0x3ffffff]);
      index = $.HashMap__findBucketIndex(bucket, key);
      t1 = index < 0 ? null : bucket[index + 1];
      $arguments = $.substitute(this.$asHashMap, $.getRuntimeTypeInfo(this));
      if ($arguments == null)
        t2 = null;
      else {
        $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
        t2 = $arguments[1];
      }
      return $.assertSubtypeOfRuntimeType(t1, t2);
    }
  },
  $indexSet: function(_, key, value) {
    var $arguments, t1, strings, table, nums, rest, hash, bucket, index;
    $arguments = $.substitute(this.$asHashMap, $.getRuntimeTypeInfo(this));
    if ($arguments == null)
      t1 = null;
    else {
      $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
      t1 = $arguments[0];
    }
    $.assertSubtypeOfRuntimeType(key, t1);
    $arguments = $.substitute(this.$asHashMap, $.getRuntimeTypeInfo(this));
    if ($arguments == null)
      t1 = null;
    else {
      $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
      t1 = $arguments[1];
    }
    $.assertSubtypeOfRuntimeType(value, t1);
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      $arguments = $.substitute(this.$asHashMap, $.getRuntimeTypeInfo(this));
      if ($arguments == null)
        t1 = null;
      else {
        $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
        t1 = $arguments[0];
      }
      $.assertSubtypeOfRuntimeType(key, t1);
      $arguments = $.substitute(this.$asHashMap, $.getRuntimeTypeInfo(this));
      if ($arguments == null)
        t1 = null;
      else {
        $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
        t1 = $arguments[1];
      }
      $.assertSubtypeOfRuntimeType(value, t1);
      if (strings[key] == null) {
        this._liblib1$_length = this._liblib1$_length + 1;
        this._keys = null;
      }
      if (value == null)
        strings[key] = strings;
      else
        strings[key] = value;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      $arguments = $.substitute(this.$asHashMap, $.getRuntimeTypeInfo(this));
      if ($arguments == null)
        t1 = null;
      else {
        $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
        t1 = $arguments[0];
      }
      $.assertSubtypeOfRuntimeType(key, t1);
      $arguments = $.substitute(this.$asHashMap, $.getRuntimeTypeInfo(this));
      if ($arguments == null)
        t1 = null;
      else {
        $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
        t1 = $arguments[1];
      }
      $.assertSubtypeOfRuntimeType(value, t1);
      if (nums[key] == null) {
        this._liblib1$_length = this._liblib1$_length + 1;
        this._keys = null;
      }
      if (value == null)
        nums[key] = nums;
      else
        nums[key] = value;
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null) {
        t1 = [key, value];
        if (t1 == null)
          rest[hash] = rest;
        else
          rest[hash] = t1;
        this._liblib1$_length = this._liblib1$_length + 1;
        this._keys = null;
      } else {
        index = $.HashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._liblib1$_length = this._liblib1$_length + 1;
          this._keys = null;
        }
      }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__")
      return $.assertSubtypeOfRuntimeType(this._removeHashTableEntry$2(this._strings, key), $.getRuntimeTypeArgument(this, "HashMap", 1));
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return $.assertSubtypeOfRuntimeType(this._removeHashTableEntry$2(this._nums, key), $.getRuntimeTypeArgument(this, "HashMap", 1));
    else {
      rest = this._rest;
      if (rest == null)
        return $.assertSubtypeOfRuntimeType(null, $.getRuntimeTypeArgument(this, "HashMap", 1));
      bucket = $.listTypeCheck(rest[$.get$hashCode$(key) & 0x3ffffff]);
      index = $.HashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return $.assertSubtypeOfRuntimeType(null, $.getRuntimeTypeArgument(this, "HashMap", 1));
      this._liblib1$_length = this._liblib1$_length - 1;
      this._keys = null;
      return $.assertSubtypeOfRuntimeType(bucket.splice(index, 2)[1], $.getRuntimeTypeArgument(this, "HashMap", 1));
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    $.assertFunctionSubtype(action, "void__K_V0", "HashMap", this);
    keys = this._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw $.wrapException(new $.ConcurrentModificationError(this));
    }
  },
  toString$0: function(_) {
    return $.Maps_mapToString(this);
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = $.List_List(this._liblib1$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    $.assertHelper(index === this._liblib1$_length);
    this._keys = result;
    return result;
  },
  _removeHashTableEntry$2: function(table, key) {
    var value;
    $.assertSubtypeOfRuntimeType(key, $.getRuntimeTypeArgument(this, "HashMap", 0));
    if (table != null && table[key] != null) {
      value = $.assertSubtypeOfRuntimeType($.HashMap__getTableEntry(table, key), $.getRuntimeTypeArgument(this, "HashMap", 1));
      delete table[key];
      this._liblib1$_length = this._liblib1$_length - 1;
      this._keys = null;
      return $.assertSubtypeOfRuntimeType(value, $.getRuntimeTypeArgument(this, "HashMap", 1));
    } else
      return $.assertSubtypeOfRuntimeType(null, $.getRuntimeTypeArgument(this, "HashMap", 1));
  },
  $isMap: true,
  $asObject: null,
  static: {
HashMap__getTableEntry: function(table, key) {
  var entry = table[key];
  return entry === table ? null : entry;
},

HashMap__findBucketIndex: function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; i += 2)
    if ($.$eq(bucket[i], key))
      return i;
  return -1;
}}

},

_HashSetBase: {"": "IterableBase;",
  toString$0: function(_) {
    return $.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  $asIterableBase: null,
  $asIterableBase: null,
  $asSet: null,
  $asIterable: null,
  $asIterableBase: null,
  $asObject: null,
  $isSet: true,
  $isIterable: true
},

IterableBase: {"": "Object;",
  forEach$1: function(_, f) {
    var t1, element, $arguments, t2;
    $.assertFunctionSubtype(f, "void__E", "IterableBase", this);
    for (t1 = this.get$iterator(this); $.boolConversionCheck(t1.moveNext$0());) {
      element = t1.get$current();
      $arguments = $.substitute(this.$asIterableBase, $.getRuntimeTypeInfo(this));
      if ($arguments == null)
        t2 = null;
      else {
        $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
        t2 = $arguments[0];
      }
      f.call$1($.assertSubtypeOfRuntimeType(element, t2));
    }
  },
  join$1: function(_, separator) {
    var iterator, buffer, t1, str, t2;
    iterator = $.assertSubtype(this.get$iterator(this), "$isIterator", [$.getRuntimeTypeArgument(this, "IterableBase", 0)], "$asIterator");
    if (!$.boolConversionCheck(iterator.moveNext$0()))
      return "";
    buffer = $.StringBuffer$("");
    if (separator == null || separator === "")
      do {
        t1 = $.S(iterator.get$current());
        buffer._contents = buffer._contents + t1;
      } while ($.boolConversionCheck(iterator.moveNext$0()));
    else {
      buffer.write$1($.S(iterator.get$current()));
      for (t1 = typeof separator === "string"; $.boolConversionCheck(iterator.moveNext$0());) {
        str = t1 ? separator : separator;
        buffer._contents = buffer._contents + str;
        t2 = $.S(iterator.get$current());
        buffer._contents = buffer._contents + t2;
      }
    }
    return buffer._contents;
  },
  toList$1$growable: function(_, growable) {
    return $.interceptedTypeCheck($.List_List$from(this, growable, $.getRuntimeTypeArgument(this, "IterableBase", 0)), "$isList");
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; $.boolConversionCheck(it.moveNext$0());)
      ++count;
    return count;
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element, $arguments, t2;
    $.intTypeCheck(index);
    if (index == null)
      return this.elementAt$1$bailout(1, index);
    if (index < 0)
      throw $.wrapException(new $.RangeError("value " + index));
    for (t1 = this.get$iterator(this), remaining = index; $.boolConversionCheck(t1.moveNext$0());) {
      element = t1.get$current();
      $arguments = $.substitute(this.$asIterableBase, $.getRuntimeTypeInfo(this));
      if ($arguments == null)
        t2 = null;
      else {
        $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
        t2 = $arguments[0];
      }
      $.assertSubtypeOfRuntimeType(element, t2);
      if (remaining === 0) {
        $arguments = $.substitute(this.$asIterableBase, $.getRuntimeTypeInfo(this));
        if ($arguments == null)
          t1 = null;
        else {
          $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
          t1 = $arguments[0];
        }
        return $.assertSubtypeOfRuntimeType(element, t1);
      }
      --remaining;
    }
    throw $.wrapException(new $.RangeError("value " + index));
  },
  elementAt$1$bailout: function(state0, index) {
    var t1, remaining, element, $arguments, t2;
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    for (t1 = this.get$iterator(this), remaining = index; $.boolConversionCheck(t1.moveNext$0());) {
      element = t1.get$current();
      $arguments = $.substitute(this.$asIterableBase, $.getRuntimeTypeInfo(this));
      if ($arguments == null)
        t2 = null;
      else {
        $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
        t2 = $arguments[0];
      }
      $.assertSubtypeOfRuntimeType(element, t2);
      if (remaining === 0) {
        $arguments = $.substitute(this.$asIterableBase, $.getRuntimeTypeInfo(this));
        if ($arguments == null)
          t1 = null;
        else {
          $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
          t1 = $arguments[0];
        }
        return $.assertSubtypeOfRuntimeType(element, t1);
      }
      if (remaining == null)
        throw remaining.$sub();
      --remaining;
    }
    throw $.wrapException(new $.RangeError("value " + $.S(index)));
  },
  $isIterable: true,
  $asIterable: null,
  $asObject: null
},

LinkedHashMap: {"": "Object;_liblib1$_length,_strings,_nums,_rest,_first,_last,_modifications",
  $index: function(_, key) {
    var strings, $arguments, t1, cell, t2, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        $arguments = $.substitute(this.$asLinkedHashMap, $.getRuntimeTypeInfo(this));
        if ($arguments == null)
          t1 = null;
        else {
          $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
          t1 = $arguments[1];
        }
        return $.assertSubtypeOfRuntimeType(null, t1);
      }
      cell = $.propertyTypeCheck(strings[key], "$isLinkedHashMapCell");
      t1 = cell == null ? null : cell._value;
      $arguments = $.substitute(this.$asLinkedHashMap, $.getRuntimeTypeInfo(this));
      if ($arguments == null)
        t2 = null;
      else {
        $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
        t2 = $arguments[1];
      }
      return $.assertSubtypeOfRuntimeType(t1, t2);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        $arguments = $.substitute(this.$asLinkedHashMap, $.getRuntimeTypeInfo(this));
        if ($arguments == null)
          t1 = null;
        else {
          $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
          t1 = $arguments[1];
        }
        return $.assertSubtypeOfRuntimeType(null, t1);
      }
      cell = $.propertyTypeCheck(nums[key], "$isLinkedHashMapCell");
      t1 = cell == null ? null : cell._value;
      $arguments = $.substitute(this.$asLinkedHashMap, $.getRuntimeTypeInfo(this));
      if ($arguments == null)
        t2 = null;
      else {
        $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
        t2 = $arguments[1];
      }
      return $.assertSubtypeOfRuntimeType(t1, t2);
    } else {
      rest = this._rest;
      if (rest == null) {
        $arguments = $.substitute(this.$asLinkedHashMap, $.getRuntimeTypeInfo(this));
        if ($arguments == null)
          t1 = null;
        else {
          $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
          t1 = $arguments[1];
        }
        return $.assertSubtypeOfRuntimeType(null, t1);
      }
      bucket = $.listTypeCheck(rest[$.get$hashCode$(key) & 0x3ffffff]);
      index = $.LinkedHashMap__findBucketIndex(bucket, key);
      if (index < 0) {
        $arguments = $.substitute(this.$asLinkedHashMap, $.getRuntimeTypeInfo(this));
        if ($arguments == null)
          t1 = null;
        else {
          $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
          t1 = $arguments[1];
        }
        return $.assertSubtypeOfRuntimeType(null, t1);
      }
      t1 = $.propertyTypeCheck(bucket[index], "$isLinkedHashMapCell")._value;
      $arguments = $.substitute(this.$asLinkedHashMap, $.getRuntimeTypeInfo(this));
      if ($arguments == null)
        t2 = null;
      else {
        $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
        t2 = $arguments[1];
      }
      return $.assertSubtypeOfRuntimeType(t1, t2);
    }
  },
  $indexSet: function(_, key, value) {
    var $arguments, t1, strings, table, cell, nums, rest, hash, bucket, index;
    $arguments = $.substitute(this.$asLinkedHashMap, $.getRuntimeTypeInfo(this));
    if ($arguments == null)
      t1 = null;
    else {
      $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
      t1 = $arguments[0];
    }
    $.assertSubtypeOfRuntimeType(key, t1);
    $arguments = $.substitute(this.$asLinkedHashMap, $.getRuntimeTypeInfo(this));
    if ($arguments == null)
      t1 = null;
    else {
      $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
      t1 = $arguments[1];
    }
    $.assertSubtypeOfRuntimeType(value, t1);
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        $.assertHelper(table != null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      $arguments = $.substitute(this.$asLinkedHashMap, $.getRuntimeTypeInfo(this));
      if ($arguments == null)
        t1 = null;
      else {
        $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
        t1 = $arguments[0];
      }
      $.assertSubtypeOfRuntimeType(key, t1);
      $arguments = $.substitute(this.$asLinkedHashMap, $.getRuntimeTypeInfo(this));
      if ($arguments == null)
        t1 = null;
      else {
        $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
        t1 = $arguments[1];
      }
      $.assertSubtypeOfRuntimeType(value, t1);
      cell = $.propertyTypeCheck(strings[key], "$isLinkedHashMapCell");
      if (cell == null) {
        t1 = this._newLinkedCell$2(key, value);
        $.assertHelper(true);
        strings[key] = t1;
      } else
        cell._value = value;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        $.assertHelper(table != null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      $arguments = $.substitute(this.$asLinkedHashMap, $.getRuntimeTypeInfo(this));
      if ($arguments == null)
        t1 = null;
      else {
        $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
        t1 = $arguments[0];
      }
      $.assertSubtypeOfRuntimeType(key, t1);
      $arguments = $.substitute(this.$asLinkedHashMap, $.getRuntimeTypeInfo(this));
      if ($arguments == null)
        t1 = null;
      else {
        $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
        t1 = $arguments[1];
      }
      $.assertSubtypeOfRuntimeType(value, t1);
      cell = $.propertyTypeCheck(nums[key], "$isLinkedHashMapCell");
      if (cell == null) {
        t1 = this._newLinkedCell$2(key, value);
        $.assertHelper(true);
        nums[key] = t1;
      } else
        cell._value = value;
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        $.assertHelper(table != null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null) {
        t1 = [this._newLinkedCell$2(key, value)];
        $.assertHelper(t1 != null);
        rest[hash] = t1;
      } else {
        index = $.LinkedHashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          $.propertyTypeCheck(bucket[index], "$isLinkedHashMapCell")._value = value;
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    $.assertFunctionSubtype(action, "void__K_V", "LinkedHashMap", this);
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$2(cell._key, cell._value);
      if (modifications !== this._modifications)
        throw $.wrapException(new $.ConcurrentModificationError(this));
      cell = cell._next;
    }
  },
  get$keys: function() {
    var t1 = new $.LinkedHashMapKeyIterable(this);
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(this, "LinkedHashMap", 0)]);
    return $.listSuperNativeTypeCheck(t1, "$isIterable");
  },
  get$values: function(_) {
    var t1, t2, t3;
    t1 = new $.LinkedHashMapKeyIterable(this);
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(this, "LinkedHashMap", 0)]);
    $.listSuperNativeTypeCheck(t1, "$isIterable");
    t2 = new $.LinkedHashMap_values_closure(this);
    $.assertFunctionSubtype(t2, "dynamic__E", "IterableBase", t1);
    t3 = $.getRuntimeTypeArgument(t1, "IterableBase", 0);
    $.listSuperNativeTypeCheck(t1, "$isIterable");
    $.assertFunctionSubtype(t2, "T__S", "MappedIterable", null, [t3, null]);
    t2 = new $.MappedIterable($.listSuperNativeTypeCheck(t1, "$isIterable"), $.assertFunctionSubtype(t2, "T__S", "MappedIterable", null, [t3, null]));
    $.setRuntimeTypeInfo(t2, [t3, null]);
    return $.listSuperNativeTypeCheck(t2, "$isIterable");
  },
  get$length: function(_) {
    return this._liblib1$_length;
  },
  toString$0: function(_) {
    return $.Maps_mapToString(this);
  },
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = new $.LinkedHashMapCell($.assertSubtypeOfRuntimeType(key, $.getRuntimeTypeArgument(this, "LinkedHashMap", 0)), $.assertSubtypeOfRuntimeType(value, $.getRuntimeTypeArgument(this, "LinkedHashMap", 1)), null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last._next = cell;
      this._last = cell;
    }
    this._liblib1$_length = this._liblib1$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  $isMap: true,
  $asObject: null,
  static: {
LinkedHashMap__findBucketIndex: function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; ++i)
    if ($.$eq($.propertyTypeCheck(bucket[i], "$isLinkedHashMapCell")._key, key))
      return i;
  return -1;
}}

},

LinkedHashSet: {"": "_HashSetBase;_liblib1$_length,_strings,_nums,_rest,_first,_last,_modifications",
  get$iterator: function(_) {
    var t1 = new $.LinkedHashSetIterator(this, this._modifications, null, $.assertSubtypeOfRuntimeType(null, null));
    $.setRuntimeTypeInfo(t1, [null]);
    t1._cell = t1._set._first;
    return $.assertSubtype(t1, "$isIterator", [$.getRuntimeTypeArgument(this, "LinkedHashSet", 0)], "$asIterator");
  },
  get$length: function(_) {
    return this._liblib1$_length;
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    $.assertFunctionSubtype(action, "void__E5", "LinkedHashSet", this);
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$1(cell._liblib1$_element);
      if (modifications !== this._modifications)
        throw $.wrapException(new $.ConcurrentModificationError(this));
      cell = cell._next;
    }
  },
  add$1: function(_, element) {
    var $arguments, t1, strings, table, nums, rest, hash, bucket;
    $arguments = $.substitute(this.$asLinkedHashSet, $.getRuntimeTypeInfo(this));
    if ($arguments == null)
      t1 = null;
    else {
      $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
      t1 = $arguments[0];
    }
    $.assertSubtypeOfRuntimeType(element, t1);
    if (typeof element === "string" && element !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        $.assertHelper(table != null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      this._addHashTableEntry$2(strings, element);
    } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        $.assertHelper(table != null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      this._addHashTableEntry$2(nums, element);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        $.assertHelper(table != null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(element) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null) {
        t1 = [this._newLinkedCell$1(element)];
        $.assertHelper(t1 != null);
        rest[hash] = t1;
      } else {
        if ($.LinkedHashSet__findBucketIndex(bucket, element) >= 0)
          return;
        bucket.push(this._newLinkedCell$1(element));
      }
    }
  },
  _addHashTableEntry$2: function(table, element) {
    var t1;
    $.assertSubtypeOfRuntimeType(element, $.getRuntimeTypeArgument(this, "LinkedHashSet", 0));
    if ($.propertyTypeCheck(table[element], "$isLinkedHashSetCell") != null)
      return;
    t1 = this._newLinkedCell$1(element);
    $.assertHelper(true);
    table[element] = t1;
  },
  _newLinkedCell$1: function(element) {
    var cell, last;
    cell = new $.LinkedHashSetCell($.assertSubtypeOfRuntimeType(element, $.getRuntimeTypeArgument(this, "LinkedHashSet", 0)), null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last._next = cell;
      this._last = cell;
    }
    this._liblib1$_length = this._liblib1$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  $as_HashSetBase: null,
  $asIterableBase: null,
  $asSet: null,
  $asIterable: null,
  $asIterableBase: null,
  $asObject: null,
  static: {
LinkedHashSet__findBucketIndex: function(bucket, element) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; ++i)
    if ($.$eq($.propertyTypeCheck(bucket[i], "$isLinkedHashSetCell")._liblib1$_element, element))
      return i;
  return -1;
}}

},

ListBase: {"": "Object+ListMixin;", $isList: true, $asList: null, $isIterable: true, $asIterable: null, $asObject: null},

ListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    var t1, t2;
    t1 = $.getRuntimeTypeArgument(receiver, "ListMixin", 0);
    $.listSuperNativeTypeCheck(receiver, "$isIterable");
    t2 = this.get$length(receiver);
    t2 = new $.ListIterator($.listSuperNativeTypeCheck(receiver, "$isIterable"), t2, 0, $.assertSubtypeOfRuntimeType(null, t1));
    $.setRuntimeTypeInfo(t2, [t1]);
    return $.assertSubtype(t2, "$isIterator", [$.getRuntimeTypeArgument(receiver, "ListMixin", 0)], "$asIterator");
  },
  elementAt$1: function(receiver, index) {
    return $.assertSubtypeOfRuntimeType(this.$index(receiver, index), $.getRuntimeTypeArgument(receiver, "ListMixin", 0));
  },
  forEach$1: function(receiver, action) {
    var $length, i;
    $.assertFunctionSubtype(action, "void__E1", "ListMixin", receiver);
    $length = this.get$length(receiver);
    if ($length == null)
      return this.forEach$1$bailout(1, action, receiver, $length);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.$index(receiver, i));
      if ($length !== this.get$length(receiver))
        throw $.wrapException(new $.ConcurrentModificationError(receiver));
    }
  },
  forEach$1$bailout: function(state0, action, receiver, $length) {
    var i, t1;
    for (i = 0; $.JSInt_methods.$lt(i, $length); ++i) {
      action.call$1(this.$index(receiver, i));
      t1 = this.get$length(receiver);
      if ($length == null ? t1 != null : $length !== t1)
        throw $.wrapException(new $.ConcurrentModificationError(receiver));
    }
  },
  where$1: function(receiver, test) {
    var t1, t2;
    $.assertFunctionSubtype(test, "bool__E", "ListMixin", receiver);
    t1 = $.getRuntimeTypeArgument(receiver, "ListMixin", 0);
    $.listSuperNativeTypeCheck(receiver, "$isIterable");
    $.assertFunctionSubtype(test, "bool__dynamic");
    t2 = new $.WhereIterable($.listSuperNativeTypeCheck(receiver, "$isIterable"), test);
    $.setRuntimeTypeInfo(t2, [t1]);
    return $.listSuperNativeTypeCheck(t2, "$isIterable");
  },
  toList$1$growable: function(receiver, growable) {
    var result, t1, t2, i, t3;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !$.isJsIndexable(receiver, receiver[$.dispatchPropertyName])))
      return this.toList$1$growable$bailout(1, growable, receiver);
    if (growable) {
      result = $.List_List(null, $.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      $.JSArray_methods.set$length(result, receiver.length);
      $.interceptedTypeCheck(result, "$isList");
    } else {
      result = $.List_List(receiver.length, $.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      $.interceptedTypeCheck(result, "$isList");
    }
    if (typeof result !== "object" || result === null || (result.constructor !== Array || !!result.immutable$list) && !$.isJsIndexable(result, result[$.dispatchPropertyName]))
      return this.toList$1$growable$bailout(2, 0, receiver, result);
    for (t1 = receiver.length, t2 = result.length, i = 0; i < t1; ++i) {
      t3 = receiver[i];
      if (i >= t2)
        throw $.ioore(i);
      result[i] = t3;
    }
    return $.interceptedTypeCheck(result, "$isList");
  },
  toList$1$growable$bailout: function(state0, growable, receiver, result) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        if (growable) {
          result = $.List_List(null, $.getRuntimeTypeArgument(receiver, "ListMixin", 0));
          $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
          $.JSArray_methods.set$length(result, this.get$length(receiver));
          $.interceptedTypeCheck(result, "$isList");
        } else {
          result = $.List_List(this.get$length(receiver), $.getRuntimeTypeArgument(receiver, "ListMixin", 0));
          $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
          $.interceptedTypeCheck(result, "$isList");
        }
      case 2:
        var t1, i;
        state0 = 0;
        for (t1 = $.getInterceptor$ax(result), i = 0; $.JSInt_methods.$lt(i, this.get$length(receiver)); ++i)
          t1.$indexSet(result, i, this.$index(receiver, i));
        return $.interceptedTypeCheck(result, "$isList");
    }
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, element) {
    var t1;
    $.assertSubtypeOfRuntimeType(element, $.getRuntimeTypeArgument(receiver, "ListMixin", 0));
    t1 = this.get$length(receiver);
    if (t1 == null)
      throw t1.$add();
    this.set$length(receiver, t1 + 1);
    this.$indexSet(receiver, t1, element);
  },
  addAll$1: function(receiver, iterable) {
    var t1, element, $arguments, t2;
    for (t1 = $.get$iterator$ax($.listSuperNativeTypeCheck(iterable, "$isIterable")); $.boolConversionCheck(t1.moveNext$0());) {
      element = t1.get$current();
      $arguments = $.substitute(receiver.$asListMixin, $.getRuntimeTypeInfo(receiver));
      if ($arguments == null)
        t2 = null;
      else {
        $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
        t2 = $arguments[0];
      }
      $.assertSubtypeOfRuntimeType(element, t2);
      t2 = this.get$length(receiver);
      if (t2 == null)
        throw t2.$add();
      this.set$length(receiver, t2 + 1);
      this.$indexSet(receiver, t2, element);
    }
  },
  toString$0: function(receiver) {
    var result, i, t1;
    for (i = 0; i < $.get$ListMixin__toStringList().length; ++i) {
      t1 = $.get$ListMixin__toStringList();
      if (i >= t1.length)
        throw $.ioore(i);
      if (t1[i] === receiver)
        return "[...]";
    }
    result = $.StringBuffer$("");
    try {
      $.JSArray_methods.add$1($.get$ListMixin__toStringList(), receiver);
      result.write$1("[");
      result.writeAll$2(receiver, ", ");
      result.write$1("]");
    } finally {
      $.assertHelper($.JSArray_methods.get$last($.get$ListMixin__toStringList()) === receiver);
      t1 = $.get$ListMixin__toStringList();
      if (0 >= t1.length)
        throw $.ioore(0);
      t1.pop();
    }
    return result.get$_contents();
  },
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null,
  $asObject: null
},

Maps_mapToString_closure: {"": "Closure;box_0,result_1",
  call$2: function(k, v) {
    var t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1(", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t1.write$1(k);
    t1.write$1(": ");
    t1.write$1(v);
  },
  $isFunction: true,
  $asObject: null,
  $is_void__K_V: true,
  $is_void__dynamic_SendPort: true,
  $is_dynamic__dynamic_dynamic: true,
  $is_void__String_String: true,
  $is_void__K_V0: true
},

ListQueue: {"": "IterableBase;_table,_head,_tail,_modificationCount",
  set$_table: function(v) {
    this._table = $.listTypeCheck(v);
  },
  get$iterator: function(_) {
    return $.assertSubtype($._ListQueueIterator$(this, $.getRuntimeTypeArgument(this, "ListQueue", 0)), "$isIterator", [$.getRuntimeTypeArgument(this, "ListQueue", 0)], "$asIterator");
  },
  forEach$1: function(_, action) {
    var modificationCount, i, t1;
    $.assertFunctionSubtype(action, "void__E6", "ListQueue", this);
    modificationCount = this._modificationCount;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      action.call$1(t1[i]);
      if (modificationCount !== this._modificationCount)
        $.throwExpression(new $.ConcurrentModificationError(this));
    }
  },
  get$length: function(_) {
    return (this._tail - this._head & this._table.length - 1) >>> 0;
  },
  elementAt$1: function(_, index) {
    var t1, t2, t3;
    if (index == null)
      throw index.$lt();
    if (index < 0 || index > this.get$length(this)) {
      t1 = this.get$length(this);
      throw $.wrapException(new $.RangeError("value " + index + " not in range 0.." + t1));
    }
    t1 = this._table;
    t2 = t1.length;
    t3 = (this._head + index & t2 - 1) >>> 0;
    if (t3 < 0 || t3 >= t2)
      throw $.ioore(t3);
    return $.assertSubtypeOfRuntimeType(t1[t3], $.getRuntimeTypeArgument(this, "ListQueue", 0));
  },
  add$1: function(_, element) {
    this._add$1($.assertSubtypeOfRuntimeType(element, $.getRuntimeTypeArgument(this, "ListQueue", 0)));
  },
  toString$0: function(_) {
    return $.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  removeFirst$0: function() {
    var t1, t2, result, $arguments;
    if (this._head === this._tail)
      throw $.wrapException(new $.StateError("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    result = t1[t2];
    $arguments = $.substitute(this.$asListQueue, $.getRuntimeTypeInfo(this));
    if ($arguments == null)
      t1 = null;
    else {
      $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
      t1 = $arguments[0];
    }
    $.assertSubtypeOfRuntimeType(result, t1);
    this._head = (this._head + 1 & this._table.length - 1) >>> 0;
    $arguments = $.substitute(this.$asListQueue, $.getRuntimeTypeInfo(this));
    if ($arguments == null)
      t1 = null;
    else {
      $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
      t1 = $arguments[0];
    }
    return $.assertSubtypeOfRuntimeType(result, t1);
  },
  _add$1: function(element) {
    var $arguments, t1, t2, t3;
    $arguments = $.substitute(this.$asListQueue, $.getRuntimeTypeInfo(this));
    if ($arguments == null)
      t1 = null;
    else {
      $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
      t1 = $arguments[0];
    }
    $.assertSubtypeOfRuntimeType(element, t1);
    t1 = this._table;
    t2 = this._tail;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    t1[t2] = element;
    this._tail = (t2 + 1 & t3 - 1) >>> 0;
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _grow$0: function() {
    var newTable, t1, t2, split, t3;
    newTable = $.List_List(this._table.length * 2, $.getRuntimeTypeArgument(this, "ListQueue", 0));
    $.setRuntimeTypeInfo(newTable, [$.getRuntimeTypeArgument(this, "ListQueue", 0)]);
    $.interceptedTypeCheck(newTable, "$isList");
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    $.listSuperNativeTypeCheck(t1, "$isIterable");
    t3 = typeof newTable !== "object" || newTable === null || !!newTable.immutable$list;
    if (t3)
      $.throwExpression(new $.UnsupportedError("set range"));
    $.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
    t1 = this._head;
    t2 = this._table;
    $.listSuperNativeTypeCheck(t2, "$isIterable");
    if (t3)
      $.throwExpression(new $.UnsupportedError("set range"));
    $.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
    this._head = 0;
    this._tail = this._table.length;
    this.set$_table(newTable);
  },
  ListQueue$1: function(initialCapacity, E) {
    var t1;
    if (true)
      initialCapacity = 8;
    else {
      if (typeof initialCapacity !== "number")
        throw initialCapacity.$sub();
      if ((initialCapacity & initialCapacity - 1) >>> 0 !== 0)
        initialCapacity = $.ListQueue__nextPowerOf2(initialCapacity);
    }
    $.intTypeCheck(initialCapacity);
    if (initialCapacity == null)
      throw initialCapacity.$sub();
    $.assertHelper((initialCapacity & initialCapacity - 1) >>> 0 === 0);
    t1 = $.List_List(initialCapacity, E);
    $.setRuntimeTypeInfo(t1, [E]);
    this.set$_table(t1);
  },
  $isListQueue: true,
  $asIterableBase: null,
  $asIterableBase: null,
  $asQueue: null,
  $asIterable: null,
  $asObject: null,
  $isQueue: true,
  $isIterable: true,
  static: {
"": "ListQueue__INITIAL_CAPACITY",
ListQueue$: function(initialCapacity, E) {
  var t1 = new $.ListQueue($.interceptedTypeCheck(null, "$isList"), 0, 0, 0);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.ListQueue$1(initialCapacity, E);
  return t1;
},

ListQueue__nextPowerOf2: function(number) {
  var nextNumber;
  if (number == null)
    throw number.$gt();
  $.assertHelper(number > 0);
  number = (number << 2 >>> 0) - 1;
  for (; true; number = nextNumber) {
    nextNumber = (number & number - 1) >>> 0;
    if (nextNumber === 0)
      return number;
  }
}}

},

_ListQueueIterator: {"": "Object;_queue,_end,_modificationCount,_liblib1$_position,_liblib1$_current?",
  get$current: function() {
    var t1, $arguments, t2;
    t1 = this._liblib1$_current;
    $arguments = $.substitute(this.$as_ListQueueIterator, $.getRuntimeTypeInfo(this));
    if ($arguments == null)
      t2 = null;
    else {
      $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
      t2 = $arguments[0];
    }
    return $.assertSubtypeOfRuntimeType(t1, t2);
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    if (this._modificationCount !== t1._modificationCount)
      $.throwExpression(new $.ConcurrentModificationError(t1));
    t2 = this._liblib1$_position;
    if (t2 === this._end) {
      this.set$_liblib1$_current(null);
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw $.ioore(t2);
    this.set$_liblib1$_current(t3[t2]);
    this._liblib1$_position = (this._liblib1$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  },
  $isIterator: true,
  $asObject: null,
  static: {
_ListQueueIterator$: function(queue, E) {
  var t1 = new $._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, $.assertSubtypeOfRuntimeType(null, E));
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
}}

}}],
["dart.core", "dart:core", , {
List_List: function($length, E) {
  if ($length == null)
    return $.interceptedTypeCheck(new Array(0), "$isList");
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw $.wrapException(new $.ArgumentError("Length must be a positive integer: " + $.S($length) + "."));
  return $.interceptedTypeCheck($.Primitives_newFixedList($length), "$isList");
},

List_List$from: function(other, growable, E) {
  var list, t1, t2, $length, fixedList, i;
  list = $.List_List(null, E);
  $.setRuntimeTypeInfo(list, [E]);
  $.interceptedTypeCheck(list, "$isList");
  for (t1 = $.get$iterator$ax(other), t2 = $.getInterceptor$asx(list); $.boolConversionCheck(t1.moveNext$0());)
    t2.add$1(list, $.assertSubtypeOfRuntimeType(t1.get$current(), E));
  if ($.boolConversionCheck(growable))
    return $.interceptedTypeCheck(list, "$isList");
  $length = t2.get$length(list);
  if ($length == null)
    return $.List_List$from$bailout(1, list, E, t2, $length);
  fixedList = $.List_List($length, E);
  $.setRuntimeTypeInfo(fixedList, [E]);
  $.interceptedTypeCheck(fixedList, "$isList");
  if (typeof fixedList !== "object" || fixedList === null || (fixedList.constructor !== Array || !!fixedList.immutable$list) && !$.isJsIndexable(fixedList, fixedList[$.dispatchPropertyName]))
    return $.List_List$from$bailout(2, list, E, t2, $length, fixedList);
  for (i = 0; i < $length; ++i) {
    t1 = t2.$index(list, i);
    if (i >= fixedList.length)
      throw $.ioore(i);
    fixedList[i] = t1;
  }
  return $.interceptedTypeCheck(fixedList, "$isList");
},

List_List$from$bailout: function(state0, list, E, t2, $length, fixedList) {
  switch (state0) {
    case 0:
      list = $.List_List(null, E);
      $.setRuntimeTypeInfo(list, [E]);
      $.interceptedTypeCheck(list, "$isList");
      for (t1 = $.get$iterator$ax(other), t2 = $.getInterceptor$asx(list); $.boolConversionCheck(t1.moveNext$0());)
        t2.add$1(list, $.assertSubtypeOfRuntimeType(t1.get$current(), E));
      if ($.boolConversionCheck(growable))
        return $.interceptedTypeCheck(list, "$isList");
      $length = t2.get$length(list);
    case 1:
      state0 = 0;
      fixedList = $.List_List($length, E);
      $.setRuntimeTypeInfo(fixedList, [E]);
      $.interceptedTypeCheck(fixedList, "$isList");
    case 2:
      var t1, i;
      state0 = 0;
      for (t1 = $.getInterceptor$ax(fixedList), i = 0; $.JSInt_methods.$lt(i, $length); ++i)
        t1.$indexSet(fixedList, i, t2.$index(list, i));
      return $.interceptedTypeCheck(fixedList, "$isList");
  }
},

NoSuchMethodError_toString_closure: {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1;
    $.stringTypeCheck(key);
    t1 = this.box_0;
    if (t1.i_1 > 0)
      t1.sb_0.write$1(", ");
    t1.sb_0.write$1(key);
    t1.sb_0.write$1(": ");
    t1.sb_0.write$1($.Error_safeToString(value));
    t1.i_1 = t1.i_1 + 1;
  },
  $isFunction: true,
  $asObject: null,
  $signature: function() {
    return {func: "dynamic__String_dynamic", args: [$.JSString, null]};
  }
},

Duration: {"": "Object;_duration",
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isDuration)
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return this._duration & 0x1FFFFFFF;
  },
  toString$0: function(_) {
    var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new $.Duration_toString_twoDigits();
    t2 = this._duration;
    if (t2 < 0)
      return "-" + $.S($.Duration$(0, 0, -t2, 0, 0, 0));
    twoDigitMinutes = $.stringTypeCheck(t1.call$1($.JSInt_methods.remainder$1($.JSInt_methods.$tdiv(t2, 60000000), 60)));
    twoDigitSeconds = $.stringTypeCheck(t1.call$1($.JSInt_methods.remainder$1($.JSInt_methods.$tdiv(t2, 1000000), 60)));
    sixDigitUs = $.stringTypeCheck(new $.Duration_toString_sixDigits().call$1($.JSInt_methods.remainder$1(t2, 1000000)));
    return "" + $.JSInt_methods.$tdiv(t2, 3600000000) + ":" + twoDigitMinutes + ":" + twoDigitSeconds + "." + sixDigitUs;
  },
  $isDuration: true,
  $asObject: null,
  static: {
"": "Duration_MICROSECONDS_PER_MILLISECOND,Duration_MILLISECONDS_PER_SECOND,Duration_SECONDS_PER_MINUTE,Duration_MINUTES_PER_HOUR,Duration_HOURS_PER_DAY,Duration_MICROSECONDS_PER_SECOND,Duration_MICROSECONDS_PER_MINUTE,Duration_MICROSECONDS_PER_HOUR,Duration_MICROSECONDS_PER_DAY,Duration_MILLISECONDS_PER_MINUTE,Duration_MILLISECONDS_PER_HOUR,Duration_MILLISECONDS_PER_DAY,Duration_SECONDS_PER_HOUR,Duration_SECONDS_PER_DAY,Duration_MINUTES_PER_DAY,Duration_ZERO",
Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
  return new $.Duration($.JSInt_methods.$add(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000, $.intTypeCheck(microseconds)));
}}

},

Duration_toString_sixDigits: {"": "Closure;",
  call$1: function(n) {
    $.intTypeCheck(n);
    if (n == null)
      throw n.$ge();
    if (n >= 100000)
      return "" + n;
    if (n >= 10000)
      return "0" + n;
    if (n >= 1000)
      return "00" + n;
    if (n >= 100)
      return "000" + n;
    if (n > 10)
      return "0000" + n;
    return "00000" + n;
  },
  $isFunction: true,
  $asObject: null,
  $signature: function() {
    return {func: "String__int", ret: $.JSString, args: [$.JSInt]};
  }
},

Duration_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    $.intTypeCheck(n);
    if (n == null)
      throw n.$ge();
    if (n >= 10)
      return "" + n;
    return "0" + n;
  },
  $isFunction: true,
  $asObject: null,
  $signature: function() {
    return {func: "String__int", ret: $.JSString, args: [$.JSInt]};
  }
},

Error: {"": "Object;", static: {
Error_safeToString: function(object) {
  var t1;
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString$0(object);
  if (typeof object === "string") {
    t1 = $.JSString_methods.replaceAll$2(object, "\\", "\\\\");
    t1 = $.stringReplaceAllUnchecked(t1, "\n", "\\n");
    t1 = $.stringReplaceAllUnchecked(t1, "\r", "\\r");
    return "\"" + $.stringReplaceAllUnchecked(t1, "\"", "\\\"") + "\"";
  }
  return "Instance of '" + $.Primitives_objectTypeName(object) + "'";
}}
},

AssertionError: {"": "Error;"},

TypeError: {"": "AssertionError;"},

NullThrownError: {"": "Error;",
  toString$0: function(_) {
    return "Throw of null.";
  }
},

ArgumentError: {"": "Error;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
},

RangeError: {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + $.S(this.message);
  }
},

FallThroughError: {"": "Error;"},

AbstractClassInstantiationError: {"": "Error;_className",
  toString$0: function(_) {
    return "Cannot instantiate abstract class: '" + this._className + "'";
  }
},

NoSuchMethodError: {"": "Error;_liblib0$_receiver,_memberName,_liblib0$_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function(_) {
    var t1, t2, t3, t4, actualParameters, i, str, formalParameters;
    t1 = {};
    t1.sb_0 = $.StringBuffer$("");
    t1.i_1 = 0;
    t2 = this._liblib0$_arguments;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.isJsIndexable(t2, t2[$.dispatchPropertyName])))
      return this.toString$0$bailout1(1, t1, t2);
    for (; t3 = t1.i_1, t3 < t2.length; t1.i_1 = t1.i_1 + 1) {
      if (t3 > 0) {
        t3 = t1.sb_0;
        t3._contents = t3._contents + ", ";
      }
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 < 0 || t4 >= t2.length)
        throw $.ioore(t4);
      t4 = $.Error_safeToString(t2[t4]);
      t3._contents = t3._contents + t4;
    }
    t2 = this._namedArguments;
    if (t2 != null)
      $.forEach$1$ax(t2, new $.NoSuchMethodError_toString_closure(t1));
    t2 = this._existingArgumentNames;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.isJsIndexable(t2, t2[$.dispatchPropertyName])))
      return this.toString$0$bailout1(2, t1, t2);
    actualParameters = t1.sb_0._contents;
    t1.sb_0 = $.StringBuffer$("");
    for (i = 0; i < t2.length; ++i) {
      if (i > 0) {
        t3 = t1.sb_0;
        t3._contents = t3._contents + ", ";
      }
      t3 = t1.sb_0;
      if (i >= t2.length)
        throw $.ioore(i);
      str = t2[i];
      str = $.stringTypeCheck(typeof str === "string" ? str : $.S(str));
      t3._contents = t3._contents + str;
    }
    formalParameters = t1.sb_0._contents;
    t1 = this._memberName;
    return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\nReceiver: " + $.Error_safeToString(this._liblib0$_receiver) + "\nTried calling: " + $.S(t1) + "(" + actualParameters + ")\nFound: " + $.S(t1) + "(" + formalParameters + ")";
  },
  toString$0$bailout1: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = {};
        t1.sb_0 = $.StringBuffer$("");
        t1.i_1 = 0;
        t2 = this._liblib0$_arguments;
      case 1:
        state0 = 0;
        if (t2 != null)
          for (t3 = $.getInterceptor$asx(t2); $.JSInt_methods.$lt(t1.i_1, t3.get$length(t2)); t1.i_1 = t1.i_1 + 1) {
            if (t1.i_1 > 0) {
              t4 = t1.sb_0;
              t4._contents = t4._contents + ", ";
            }
            t4 = t1.sb_0;
            t5 = $.Error_safeToString(t3.$index(t2, t1.i_1));
            t4._contents = t4._contents + t5;
          }
        t2 = this._namedArguments;
        if (t2 != null)
          $.forEach$1$ax(t2, new $.NoSuchMethodError_toString_closure(t1));
        t2 = this._existingArgumentNames;
      case 2:
        var t3, t4, t5, actualParameters, i, str, formalParameters;
        state0 = 0;
        if (t2 == null)
          return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\nReceiver: " + $.Error_safeToString(this._liblib0$_receiver) + "\nArguments: [" + $.S(t1.sb_0) + "]";
        else {
          actualParameters = t1.sb_0._contents;
          t1.sb_0 = $.StringBuffer$("");
          for (t3 = $.getInterceptor$asx(t2), i = 0; $.JSInt_methods.$lt(i, t3.get$length(t2)); ++i) {
            if (i > 0) {
              t4 = t1.sb_0;
              t4._contents = t4._contents + ", ";
            }
            t4 = t1.sb_0;
            str = t3.$index(t2, i);
            str = $.stringTypeCheck(typeof str === "string" ? str : $.S(str));
            t4._contents = t4._contents + str;
          }
          formalParameters = t1.sb_0._contents;
          t1 = this._memberName;
          return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\nReceiver: " + $.Error_safeToString(this._liblib0$_receiver) + "\nTried calling: " + $.S(t1) + "(" + actualParameters + ")\nFound: " + $.S(t1) + "(" + formalParameters + ")";
        }
    }
  }
},

UnsupportedError: {"": "Error;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  }
},

UnimplementedError: {"": "Error;message",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + t1 : "UnimplementedError";
  },
  $asObject: null
},

StateError: {"": "Error;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  }
},

ConcurrentModificationError: {"": "Error;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.Error_safeToString(t1) + ".";
  }
},

StackOverflowError: {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  },
  $asObject: null
},

CyclicInitializationError: {"": "Error;variableName",
  toString$0: function(_) {
    return "Reading static variable '" + this.variableName + "' during its initialization";
  }
},

_ExceptionImplementation: {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  $isException: true,
  $asObject: null
},

FormatException: {"": "Object;message",
  toString$0: function(_) {
    return "FormatException: " + this.message;
  },
  $isException: true,
  $asObject: null
},

IntegerDivisionByZeroException: {"": "Object;",
  toString$0: function(_) {
    return "IntegerDivisionByZeroException";
  },
  $isException: true,
  $asObject: null
},

Expando: {"": "Object;name",
  toString$0: function(_) {
    return "Expando:" + this.name;
  },
  $index: function(_, object) {
    var values, t1, $arguments, t2;
    values = $.Primitives_getProperty(object, "expando$values");
    t1 = values == null ? null : $.Primitives_getProperty(values, this._getKey$0());
    $arguments = $.substitute(this.$asExpando, $.getRuntimeTypeInfo(this));
    if ($arguments == null)
      t2 = null;
    else {
      $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
      t2 = $arguments[0];
    }
    return $.assertSubtypeOfRuntimeType(t1, t2);
  },
  $indexSet: function(_, object, value) {
    var values;
    $.assertSubtypeOfRuntimeType(value, $.getRuntimeTypeArgument(this, "Expando", 0));
    values = $.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = new $.Object();
      $.Primitives_setProperty(object, "expando$values", values);
    }
    $.Primitives_setProperty(values, this._getKey$0(), value);
  },
  _getKey$0: function() {
    var key, t1;
    key = $.stringTypeCheck($.Primitives_getProperty(this, "expando$key"));
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = t1 + 1;
      key = "expando$key$" + t1;
      $.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  },
  $isExpando: true,
  static: {
"": "Expando__KEY_PROPERTY_NAME,Expando__EXPANDO_PROPERTY_NAME,Expando__keyCount",
}

},

Function: {"": "Object;", $isFunction: true},

Iterator: {"": "Object;", $isIterator: true},

Map: {"": "Object;", $isMap: true},

Object: {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return $.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return $.Primitives_objectToString(this);
  },
  $isObject: true,
  $asObject: null
},

Set: {"": "IterableBase;", $isSet: true, $asIterableBase: null, $asIterableBase: null, $asIterable: null, $asObject: null},

StringBuffer: {"": "Object;_contents<",
  get$length: function(_) {
    return this._contents.length;
  },
  write$1: function(obj) {
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    this._contents = this._contents + obj;
  },
  write$1$bailout: function(state0, obj) {
    var str = $.stringTypeCheck(typeof obj === "string" ? obj : $.S(obj));
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str, t1;
    iterator = $.get$iterator$ax(objects);
    if (!$.boolConversionCheck(iterator.moveNext$0()))
      return;
    if ($.get$isEmpty$asx(separator))
      do {
        str = iterator.get$current();
        str = $.stringTypeCheck(typeof str === "string" ? str : $.S(str));
        this._contents = this._contents + str;
      } while ($.boolConversionCheck(iterator.moveNext$0()));
    else {
      this.write$1(iterator.get$current());
      for (t1 = typeof separator === "string"; $.boolConversionCheck(iterator.moveNext$0());) {
        str = t1 ? separator : separator;
        this._contents = this._contents + str;
        str = iterator.get$current();
        str = $.stringTypeCheck(typeof str === "string" ? str : $.S(str));
        this._contents = this._contents + str;
      }
    }
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  },
  $isStringBuffer: true,
  $asObject: null,
  static: {
StringBuffer$: function($content) {
  var t1 = new $.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
}}

}}],
["dart.dom.html", "dart:html", , {
DocumentFragment_DocumentFragment$html: function(html) {
  var fragment = document.createDocumentFragment();
  $.set$innerHtml$x(fragment, html);
  return fragment;
},

HttpRequest_getString: function(url, onProgress, withCredentials) {
  return $.assertSubtype($.HttpRequest_request(url, null, null, $.assertFunctionSubtype(onProgress, "void__ProgressEvent"), null, null, null, withCredentials).then$1(new $.HttpRequest_getString_closure()), "$isFuture", [$.JSString], "$asFuture");
},

HttpRequest_request: function(url, method, mimeType, onProgress, requestHeaders, responseType, sendData, withCredentials) {
  var t1, t2, t3, t4, xhr, t5, t6;
  $.assertFunctionSubtype(onProgress, "void__ProgressEvent");
  $.assertSubtype(requestHeaders, "$isMap", [$.JSString, $.JSString], "$asMap");
  t1 = $.HttpRequest;
  t2 = t1;
  t3 = t2;
  t4 = new $._FutureImpl(0, $.get$_Zone__current().fork$0(), null);
  $.setRuntimeTypeInfo(t4, [t3]);
  t4 = new $._AsyncCompleter($.assertSubtype(t4, "$isFuture", [t3], "$asFuture"), false);
  $.setRuntimeTypeInfo(t4, [t2]);
  t4._Completer$0(t3);
  $.assertSubtype(t4, "$isCompleter", [t1], "$asCompleter");
  xhr = new XMLHttpRequest();
  $.HttpRequest_methods.open$3$async(xhr, "GET", url, true);
  if (requestHeaders != null)
    requestHeaders.forEach$1(requestHeaders, new $.HttpRequest_request_closure(xhr));
  $.EventStreamProvider_load.forTarget$2$useCapture;
  t1 = new $._EventStream(xhr, $.EventStreamProvider_load._eventType, false);
  $.setRuntimeTypeInfo(t1, [null]);
  t1 = $.assertSubtype($.assertSubtype(t1, "$isStream", [$.getRuntimeTypeArgument($.EventStreamProvider_load, "EventStreamProvider", 0)], "$asStream"), "$isStream", [$.ProgressEvent], "$asStream");
  t2 = new $.HttpRequest_request_closure0(t4, xhr);
  $.assertFunctionSubtype(t2, "void__T2", "_EventStream", t1);
  $.assertFunctionSubtype(null, "void_");
  $.assertFunctionSubtype(null, "void__dynamic");
  t3 = t1.get$_liblib3$_target();
  t5 = t1.get$_eventType();
  t6 = t1.get$_useCapture();
  t6 = new $._EventStreamSubscription(0, t3, t5, t2, t6);
  $.setRuntimeTypeInfo(t6, [$.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
  t6._tryResume$0();
  $.assertSubtype(t6, "$isStreamSubscription", [$.getRuntimeTypeArgument(t1, "_EventStream", 0)], "$asStreamSubscription");
  $.EventStreamProvider_error.forTarget$2$useCapture;
  t1 = new $._EventStream(xhr, $.EventStreamProvider_error._eventType, false);
  $.setRuntimeTypeInfo(t1, [null]);
  t1 = $.assertSubtype($.assertSubtype(t1, "$isStream", [$.getRuntimeTypeArgument($.EventStreamProvider_error, "EventStreamProvider", 0)], "$asStream"), "$isStream", [$.ProgressEvent], "$asStream");
  t6 = new $.HttpRequest_request_closure1(t4);
  $.assertFunctionSubtype(t6, "void__T2", "_EventStream", t1);
  t2 = t1.get$_liblib3$_target();
  t5 = t1.get$_eventType();
  t3 = t1.get$_useCapture();
  t3 = new $._EventStreamSubscription(0, t2, t5, t6, t3);
  $.setRuntimeTypeInfo(t3, [$.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
  t3._tryResume$0();
  $.assertSubtype(t3, "$isStreamSubscription", [$.getRuntimeTypeArgument(t1, "_EventStream", 0)], "$asStreamSubscription");
  xhr.send();
  return $.assertSubtype(t4.get$future(), "$isFuture", [$.HttpRequest], "$asFuture");
},

ImageElement_ImageElement: function(height, src, width) {
  var e = $.HtmlDocument_methods.$$dom_createElement$1(document, "img");
  return $.interceptedTypeCheck(e, "$isImageElement");
},

_ChildrenElementList: {"": "ListBase;_element,_childElements",
  get$length: function(_) {
    return this._childElements.length;
  },
  $index: function(_, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = this._childElements;
    if (t1 == null)
      return this.$$index$bailout(1, index, t1);
    return $.interceptedTypeCheck($.$index$asx(t1, index), "$isElement");
  },
  $$index$bailout: function(state0, index, t1) {
    return $.interceptedTypeCheck($.$index$asx(t1, index), "$isElement");
  },
  $indexSet: function(_, index, value) {
    var t1, t2;
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isElement");
    t1 = this._element;
    t2 = this._childElements;
    if (t2 == null)
      return this.$$indexSet$bailout(1, t2, value, index, t1);
    $.$$dom_replaceChild$2$x(t1, value, $.$index$asx(t2, index));
  },
  $$indexSet$bailout: function(state0, t2, value, index, t1) {
    $.$$dom_replaceChild$2$x(t1, value, $.$index$asx(t2, index));
  },
  set$length: function(_, newLength) {
    $.intTypeCheck(newLength);
    throw $.wrapException(new $.UnsupportedError("Cannot resize element lists"));
  },
  add$1: function(_, value) {
    $.interceptedTypeCheck(value, "$isElement");
    $.append$1$x(this._element, value);
    return value;
  },
  get$iterator: function(_) {
    return $.assertSubtype($.get$iterator$ax(this.toList$0(this)), "$isIterator", [$.Element], "$asIterator");
  },
  addAll$1: function(_, iterable) {
    var t1, t2, t3;
    $.listSuperNativeTypeCheck(iterable, "$isIterable");
    for (t1 = $.get$iterator$ax(typeof iterable === "object" && iterable !== null && !!$.getInterceptor(iterable).$is_ChildNodeListLazy ? $.listSuperNativeTypeCheck($.List_List$from(iterable, true, null), "$isIterable") : iterable), t2 = this._element, t3 = $.getInterceptor$x(t2); $.boolConversionCheck(t1.moveNext$0());)
      t3.append$1(t2, $.interceptedTypeCheck(t1.get$current(), "$isElement"));
  },
  $asListMixin: function() {
    return [$.Element];
  },
  $asList: function() {
    return [$.Element];
  },
  $asIterable: function() {
    return [$.Element];
  },
  $asObject: null
},

Interceptor_ListMixin: {"": "Interceptor+ListMixin;", $isList: true,
  $asList: function(E) {
    return [$.Node];
  },
  $isIterable: true,
  $asIterable: function(E) {
    return [$.Node];
  },
  $asObject: null
},

Interceptor_ListMixin_ImmutableListMixin: {"": "Interceptor_ListMixin+ImmutableListMixin;", $isList: true,
  $asList: function(E) {
    return [$.Node];
  },
  $isIterable: true,
  $asIterable: function(E) {
    return [$.Node];
  },
  $asObject: null
},

HttpRequest_getString_closure: {"": "Closure;",
  call$1: function(xhr) {
    return $.get$responseText$x(xhr);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function() {
    return {func: "dynamic__dynamic", args: [null]};
  }
},

HttpRequest_request_closure: {"": "Closure;xhr_0",
  call$2: function(header, value) {
    $.HttpRequest_methods.setRequestHeader$2(this.xhr_0, header, value);
  },
  $isFunction: true,
  $asObject: null,
  $is_void__K_V: true,
  $is_void__dynamic_SendPort: true,
  $is_dynamic__dynamic_dynamic: true,
  $is_void__String_String: true,
  $is_void__K_V0: true
},

HttpRequest_request_closure0: {"": "Closure;completer_1,xhr_2",
  call$1: function(e) {
    var t1, t2, t3;
    t1 = this.xhr_2;
    t2 = t1.status;
    if (t2 == null)
      throw t2.$ge();
    t2 = t2 >= 200 && t2 < 300 || t2 === 0 || t2 === 304;
    t3 = this.completer_1;
    if (t2)
      t3.complete$1(t3, t1);
    else
      t3.completeError$1(e);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function() {
    return {func: "dynamic__dynamic", args: [null]};
  }
},

HttpRequest_request_closure1: {"": "Closure;completer_3",
  call$1: function(e) {
    this.completer_3.completeError$1(e);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function() {
    return {func: "dynamic__dynamic", args: [null]};
  }
},

_ChildNodeListLazy: {"": "ListBase;_this<",
  add$1: function(_, value) {
    $.append$1$x(this._this, $.interceptedTypeCheck(value, "$isNode"));
  },
  addAll$1: function(_, iterable) {
    var t1, t2, len, t3, i;
    $.listSuperNativeTypeCheck(iterable, "$isIterable");
    if (typeof iterable === "object" && iterable !== null && !!$.getInterceptor(iterable).$is_ChildNodeListLazy) {
      t1 = iterable._this;
      t2 = this._this;
      if (t1 !== t2)
        for (len = t1.childNodes.length, t3 = $.getInterceptor$x(t2), i = 0; i < len; ++i)
          t3.append$1(t2, t1.firstChild);
      return;
    }
    for (t1 = $.get$iterator$ax(iterable), t2 = this._this, t3 = $.getInterceptor$x(t2); $.boolConversionCheck(t1.moveNext$0());)
      t3.append$1(t2, $.interceptedTypeCheck(t1.get$current(), "$isNode"));
  },
  $indexSet: function(_, index, value) {
    var t1;
    $.intTypeCheck(index);
    t1 = this._this;
    $.$$dom_replaceChild$2$x(t1, $.interceptedTypeCheck(value, "$isNode"), $.NodeList_methods.$index(t1.childNodes, index));
  },
  get$iterator: function(_) {
    return $.assertSubtype($.NodeList_methods.get$iterator(this._this.childNodes), "$isIterator", [$.Node], "$asIterator");
  },
  get$length: function(_) {
    return this._this.childNodes.length;
  },
  set$length: function(_, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot set length on immutable List."));
  },
  $index: function(_, index) {
    $.intTypeCheck(index);
    return $.NodeList_methods.$index(this._this.childNodes, index);
  },
  $is_ChildNodeListLazy: true,
  $asListMixin: function() {
    return [$.Node];
  },
  $asList: function() {
    return [$.Node];
  },
  $asIterable: function() {
    return [$.Node];
  },
  $asObject: null
},

Interceptor_ListMixin0: {"": "Interceptor+ListMixin;", $isList: true,
  $asList: function(E) {
    return [$.Node];
  },
  $isIterable: true,
  $asIterable: function(E) {
    return [$.Node];
  },
  $asObject: null
},

Interceptor_ListMixin_ImmutableListMixin0: {"": "Interceptor_ListMixin0+ImmutableListMixin;", $isList: true,
  $asList: function(E) {
    return [$.Node];
  },
  $isIterable: true,
  $asIterable: function(E) {
    return [$.Node];
  },
  $asObject: null
},

Interceptor_ListMixin1: {"": "Interceptor+ListMixin;", $isList: true,
  $asList: function(E) {
    return [$.Node];
  },
  $isIterable: true,
  $asIterable: function(E) {
    return [$.Node];
  },
  $asObject: null
},

Interceptor_ListMixin_ImmutableListMixin1: {"": "Interceptor_ListMixin1+ImmutableListMixin;", $isList: true,
  $asList: function(E) {
    return [$.Node];
  },
  $isIterable: true,
  $asIterable: function(E) {
    return [$.Node];
  },
  $asObject: null
},

_AttributeMap: {"": "Object;_element<",
  forEach$1: function(_, f) {
    var t1, t2, t3, $arguments;
    $.assertFunctionSubtype(f, "void__String_String");
    for (t1 = this.get$keys(), t2 = $.getRuntimeTypeArgument(t1, "JSArray", 0), $.listSuperNativeTypeCheck(t1, "$isIterable"), t3 = t1.length, t3 = new $.ListIterator($.listSuperNativeTypeCheck(t1, "$isIterable"), t3, 0, $.assertSubtypeOfRuntimeType(null, t2)), $.setRuntimeTypeInfo(t3, [t2]), $.assertSubtype(t3, "$isIterator", [$.getRuntimeTypeArgument(t1, "JSArray", 0)], "$asIterator"); $.boolConversionCheck(t3.moveNext$0());) {
      t1 = t3.get$_liblib$_current();
      $arguments = $.substitute(t3.$asListIterator, $.getRuntimeTypeInfo(t3));
      if ($arguments == null)
        t2 = null;
      else {
        $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
        t2 = $arguments[0];
      }
      $.assertSubtypeOfRuntimeType(t1, t2);
      f.call$2(t1, this.$index(this, t1));
    }
  },
  get$keys: function() {
    var attributes, keys, len, i, t1;
    attributes = this._element.attributes;
    keys = $.List_List(null, $.JSString);
    $.setRuntimeTypeInfo(keys, [$.JSString]);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      t1 = attributes[i];
      if (this._matches$1(t1))
        $.JSArray_methods.add$1(keys, $.get$name$x(t1));
    }
    return $.listSuperNativeTypeCheck(keys, "$isIterable");
  },
  get$values: function(_) {
    var attributes, values, len, i, t1;
    attributes = this._element.attributes;
    values = $.List_List(null, $.JSString);
    $.setRuntimeTypeInfo(values, [$.JSString]);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      t1 = attributes[i];
      if (this._matches$1(t1))
        $.JSArray_methods.add$1(values, $.get$value$x(t1));
    }
    return $.listSuperNativeTypeCheck(values, "$isIterable");
  },
  $isMap: true,
  $asMap: function() {
    return [$.JSString, $.JSString];
  },
  $asObject: null
},

_ElementAttributeMap: {"": "_AttributeMap;_element",
  $index: function(_, key) {
    return $.$$dom_getAttribute$1$x(this._element, $.stringTypeCheck(key));
  },
  $indexSet: function(_, key, value) {
    $.$$dom_setAttribute$2$x(this._element, $.stringTypeCheck(key), $.stringTypeCheck(value));
  },
  get$length: function(_) {
    return this.get$keys().length;
  },
  _matches$1: function(node) {
    return node.namespaceURI == null;
  }
},

_ElementCssClassSet: {"": "CssClassSetImpl;_element",
  readClasses$0: function() {
    var s, t1, t2, t3, $arguments, trimmed;
    s = new $.LinkedHashSet(0, null, null, null, null, null, 0);
    $.setRuntimeTypeInfo(s, [$.JSString]);
    for (t1 = this._element.className.split(" "), t2 = $.getRuntimeTypeArgument(t1, "JSArray", 0), $.listSuperNativeTypeCheck(t1, "$isIterable"), t3 = t1.length, t3 = new $.ListIterator($.listSuperNativeTypeCheck(t1, "$isIterable"), t3, 0, $.assertSubtypeOfRuntimeType(null, t2)), $.setRuntimeTypeInfo(t3, [t2]), $.assertSubtype(t3, "$isIterator", [$.getRuntimeTypeArgument(t1, "JSArray", 0)], "$asIterator"); $.boolConversionCheck(t3.moveNext$0());) {
      t1 = t3.get$_liblib$_current();
      $arguments = $.substitute(t3.$asListIterator, $.getRuntimeTypeInfo(t3));
      if ($arguments == null)
        t2 = null;
      else {
        $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
        t2 = $arguments[0];
      }
      trimmed = $.trim$0$s($.stringTypeCheck($.assertSubtypeOfRuntimeType(t1, t2)));
      if (trimmed.length !== 0)
        s.add$1(s, trimmed);
    }
    return $.assertSubtype(s, "$isSet", [$.JSString], "$asSet");
  },
  writeClasses$1: function(s) {
    $.assertSubtype(s, "$isSet", [$.JSString], "$asSet");
    $.List_List$from(s, true, null);
    this._element.className = s.join$1(s, " ");
  }
},

_EventStream: {"": "Stream;_liblib3$_target<,_eventType<,_useCapture<",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1;
    $.assertFunctionSubtype(onData, "void__T2", "_EventStream", this);
    $.assertFunctionSubtype(onDone, "void_");
    $.assertFunctionSubtype(onError, "void__dynamic");
    t1 = new $._EventStreamSubscription(0, this._liblib3$_target, this._eventType, onData, this._useCapture);
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(this, "_EventStream", 0)]);
    t1._tryResume$0();
    return $.assertSubtype(t1, "$isStreamSubscription", [$.getRuntimeTypeArgument(this, "_EventStream", 0)], "$asStreamSubscription");
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  $asStream: null,
  $asStream: null,
  $asObject: null
},

_EventStreamSubscription: {"": "StreamSubscription;_pauseCount,_liblib3$_target,_eventType,_onData,_useCapture",
  cancel$0: function() {
    if (this._liblib3$_target == null)
      return;
    this._unlisten$0();
    this._liblib3$_target = null;
    this._onData = null;
  },
  pause$1: function(_, resumeSignal) {
    if (this._liblib3$_target == null)
      return;
    this._pauseCount = this._pauseCount + 1;
    this._unlisten$0();
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  resume$0: function() {
    if (this._liblib3$_target == null || this._pauseCount <= 0)
      return;
    this._pauseCount = this._pauseCount - 1;
    this._tryResume$0();
  },
  _tryResume$0: function() {
    var t1 = this._onData;
    if (t1 != null && this._pauseCount <= 0)
      $.$$dom_addEventListener$3$x(this._liblib3$_target, this._eventType, t1, this._useCapture);
  },
  _unlisten$0: function() {
    var t1 = this._onData;
    if (t1 != null)
      $.$$dom_removeEventListener$3$x(this._liblib3$_target, this._eventType, t1, this._useCapture);
  },
  $asStreamSubscription: null,
  $asObject: null
},

EventStreamProvider: {"": "Object;_eventType"},

ImmutableListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return $.assertSubtype($.FixedSizeListIterator$(receiver, $.getRuntimeTypeArgument(receiver, "ImmutableListMixin", 0)), "$isIterator", [$.getRuntimeTypeArgument(receiver, "ImmutableListMixin", 0)], "$asIterator");
  },
  add$1: function(receiver, value) {
    $.assertSubtypeOfRuntimeType(value, $.getRuntimeTypeArgument(receiver, "ImmutableListMixin", 0));
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    $.listSuperNativeTypeCheck(iterable, "$isIterable");
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null,
  $asObject: null
},

FixedSizeListIterator: {"": "Object;_array,_length,_position,_current?",
  moveNext$0: function() {
    var nextPosition, t1;
    nextPosition = this._position + 1;
    t1 = this._length;
    if (nextPosition < t1) {
      t1 = this._array;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
        return this.moveNext$0$bailout(1, t1, nextPosition);
      if (nextPosition < 0 || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this.set$_current(t1[nextPosition]);
      this._position = nextPosition;
      return true;
    }
    this.set$_current(null);
    this._position = t1;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, nextPosition) {
    switch (state0) {
      case 0:
        nextPosition = this._position + 1;
        t1 = this._length;
      case 1:
        if (state0 === 1 || state0 === 0 && nextPosition < t1)
          switch (state0) {
            case 0:
              t1 = this._array;
            case 1:
              state0 = 0;
              this.set$_current($.$index$asx(t1, nextPosition));
              this._position = nextPosition;
              return true;
          }
        this.set$_current(null);
        this._position = t1;
        return false;
    }
  },
  get$current: function() {
    var t1, $arguments, t2;
    t1 = this._current;
    $arguments = $.substitute(this.$asFixedSizeListIterator, $.getRuntimeTypeInfo(this));
    if ($arguments == null)
      t2 = null;
    else {
      $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
      t2 = $arguments[0];
    }
    return $.assertSubtypeOfRuntimeType(t1, t2);
  },
  $isIterator: true,
  $asObject: null,
  static: {
FixedSizeListIterator$: function(array, T) {
  var t1;
  $.interceptedTypeCheck(array, "$isList");
  t1 = $.get$length$asx(array);
  t1 = new $.FixedSizeListIterator($.interceptedTypeCheck(array, "$isList"), t1, -1, $.assertSubtypeOfRuntimeType(null, T));
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
}}

},

_HTMLElement: {"": "Element;"},

AnchorElement: {"": "_HTMLElement;name=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
},

ButtonElement: {"": "_HTMLElement;name=,value="},

CanvasElement: {"": "_HTMLElement;", $asObject: null},

CharacterData: {"": "Node;length=", $asObject: null},

DivElement: {"": "_HTMLElement;", $isDivElement: true, $asDivElement: null},

Document: {"": "Node;",
  $$dom_createElement$2: function(receiver, localName_OR_tagName, typeExtension) {
    return receiver.createElement(localName_OR_tagName, typeExtension);
  },
  $$dom_createElement$1: function($receiver, localName_OR_tagName) {
    return $receiver.createElement(localName_OR_tagName);
  },
  query$1: function(receiver, selectors) {
    return receiver.querySelector(selectors);
  }
},

DocumentFragment: {"": "Node;",
  set$innerHtml: function(receiver, value) {
    var e, nodes;
    $.interceptedTypeCheck(new $._ChildNodeListLazy(receiver), "$isList").get$_this().textContent = "";
    e = $.interceptedTypeCheck(document.createElement("div"), "$isElement");
    $.set$innerHtml$x(e, value);
    e.get$nodes;
    nodes = $.List_List$from($.interceptedTypeCheck(new $._ChildNodeListLazy(e), "$isList"), false, null);
    $.addAll$1$ax($.interceptedTypeCheck(new $._ChildNodeListLazy(receiver), "$isList"), nodes);
  },
  $isDocumentFragment: true,
  $asDocumentFragment: null,
  $asObject: null
},

DocumentType: {"": "Node;", $asObject: null},

DomException: {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
},

Element: {"": "Node;$$dom_children:children=",
  set$innerHtml: function(receiver, v) {
    receiver.innerHTML = $.stringTypeCheck(v);
  },
  get$children: function(receiver) {
    return $.interceptedTypeCheck(new $._ChildrenElementList(receiver, this.get$$$dom_children(receiver)), "$isList");
  },
  toString$0: function(receiver) {
    return receiver.localName;
  },
  insertAdjacentHtml$2: function(receiver, where, html) {
    if (!!receiver.insertAdjacentHTML)
      this._insertAdjacentHtml$2(receiver, where, html);
    else
      this._insertAdjacentNode$2(receiver, where, $.DocumentFragment_DocumentFragment$html(html));
  },
  _insertAdjacentHtml$2: function(receiver, where, text) {
    return receiver.insertAdjacentHTML(where, text);
  },
  _insertAdjacentNode$2: function(receiver, where, node) {
    var t1, first;
    switch (where.toLowerCase()) {
      case "beforebegin":
        $.insertBefore$2$x(receiver.parentNode, node, receiver);
        break;
      case "afterbegin":
        if ($.interceptedTypeCheck(new $._ChildNodeListLazy(receiver), "$isList").get$_this().childNodes.length > 0) {
          t1 = $.interceptedTypeCheck(new $._ChildNodeListLazy(receiver), "$isList").get$_this().childNodes;
          if (0 >= t1.length)
            throw $.ioore(0);
          first = t1[0];
        } else
          first = null;
        this.insertBefore$2(receiver, node, first);
        break;
      case "beforeend":
        this.append$1(receiver, node);
        break;
      case "afterend":
        $.insertBefore$2$x(receiver.parentNode, node, receiver.nextSibling);
        break;
      default:
        throw $.wrapException(new $.ArgumentError("Invalid position " + where));
    }
  },
  $$dom_getAttribute$1: function(receiver, $name) {
    return receiver.getAttribute($name);
  },
  $$dom_setAttribute$2: function(receiver, $name, value) {
    return receiver.setAttribute($name, value);
  },
  $isElement: true,
  $asElement: null,
  $asObject: null
},

EmbedElement: {"": "_HTMLElement;name="},

Event: {"": "Interceptor;"},

EventTarget: {"": "Interceptor;", $isEventTarget: true, $asEventTarget: null},

FieldSetElement: {"": "_HTMLElement;name="},

FileException: {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
},

FormElement: {"": "_HTMLElement;length=,name="},

HRElement: {"": "_HTMLElement;", $isHRElement: true, $asHRElement: null},

HtmlCollection: {"": "Interceptor_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isNode");
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $isHtmlCollection: true,
  $asHtmlCollection: null,
  $isList: true,
  $asList: function() {
    return [$.Node];
  },
  $isIterable: true,
  $asIterable: function() {
    return [$.Node];
  },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
},

HtmlDocument: {"": "Document;", $isHtmlDocument: true, $asHtmlDocument: null},

HttpRequest: {"": "EventTarget;responseText=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  open$5$async$password$user: function(receiver, method, url, async, password, user) {
    return receiver.open(method, url, async, user, password);
  },
  open$3$async: function($receiver, method, url, async) {
    return $receiver.open(method, url, async);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  setRequestHeader$2: function(receiver, header, value) {
    return receiver.setRequestHeader($.stringTypeCheck(header), $.stringTypeCheck(value));
  },
  $isHttpRequest: true,
  $asHttpRequest: null
},

IFrameElement: {"": "_HTMLElement;name=", $isIFrameElement: true, $asIFrameElement: null},

ImageElement: {"": "_HTMLElement;", $isImageElement: true, $asImageElement: null, $asObject: null},

InputElement: {"": "_HTMLElement;name=,value=", $isElement: true, $asElement: null, $asObject: null, $isNode: true, $asNode: null, $isEventTarget: true, $asEventTarget: null},

KeygenElement: {"": "_HTMLElement;name="},

LIElement: {"": "_HTMLElement;value="},

MapElement: {"": "_HTMLElement;name="},

MediaElement: {"": "_HTMLElement;"},

MetaElement: {"": "_HTMLElement;name="},

MeterElement: {"": "_HTMLElement;value="},

Node: {"": "EventTarget;",
  remove$0: function(receiver) {
    var t1 = receiver.parentNode;
    if (t1 != null)
      $.$$dom_removeChild$1$x(t1, receiver);
  },
  replaceWith$1: function(receiver, otherNode) {
    var $parent, exception;
    try {
      $parent = receiver.parentNode;
      $.$$dom_replaceChild$2$x($parent, otherNode, receiver);
    } catch (exception) {
      $.unwrapException(exception);
    }

    return receiver;
  },
  toString$0: function(receiver) {
    var t1 = receiver.nodeValue;
    return t1 == null ? $.Interceptor.prototype.toString$0.call(this, receiver) : t1;
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  append$1: function(receiver, newChild) {
    return receiver.appendChild(newChild);
  },
  insertBefore$2: function(receiver, newChild, refChild) {
    return receiver.insertBefore(newChild, refChild);
  },
  $$dom_removeChild$1: function(receiver, oldChild) {
    return receiver.removeChild(oldChild);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_replaceChild$2: function(receiver, newChild, oldChild) {
    return receiver.replaceChild(newChild, oldChild);
  },
  $isNode: true,
  $asNode: null
},

NodeList: {"": "Interceptor_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isNode");
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $isList: true,
  $asList: function() {
    return [$.Node];
  },
  $isIterable: true,
  $asIterable: function() {
    return [$.Node];
  },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
},

ObjectElement: {"": "_HTMLElement;name="},

OptionElement: {"": "_HTMLElement;value="},

OutputElement: {"": "_HTMLElement;name=,value="},

ParagraphElement: {"": "_HTMLElement;", $isParagraphElement: true, $asParagraphElement: null},

ParamElement: {"": "_HTMLElement;name=,value="},

ProgressElement: {"": "_HTMLElement;value="},

ProgressEvent: {"": "Event;", $isProgressEvent: true, $asProgressEvent: null},

SelectElement: {"": "_HTMLElement;length=,name=,value="},

ShadowRoot: {"": "DocumentFragment;",
  set$innerHtml: function(receiver, v) {
    receiver.innerHTML = $.stringTypeCheck(v);
  }
},

TextAreaElement: {"": "_HTMLElement;name=,value="},

VideoElement: {"": "MediaElement;", $asObject: null},

Window: {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  $asObject: null
},

_Attr: {"": "Node;name=,value="},

_NamedNodeMap: {"": "Interceptor_ListMixin_ImmutableListMixin1;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isNode");
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $isList: true,
  $asList: function() {
    return [$.Node];
  },
  $isIterable: true,
  $asIterable: function() {
    return [$.Node];
  },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
}}],
["dart.dom.svg", "dart:svg", , {
_AttributeClassSet: {"": "CssClassSetImpl;_liblib4$_element",
  readClasses$0: function() {
    var classname, s, t1, t2, t3, $arguments, trimmed;
    classname = $.$$dom_getAttribute$1$x($.assertSubtype(new $._ElementAttributeMap(this._liblib4$_element), "$isMap", [$.JSString, $.JSString], "$asMap").get$_element(), "class");
    s = new $.LinkedHashSet(0, null, null, null, null, null, 0);
    $.setRuntimeTypeInfo(s, [$.JSString]);
    $.assertSubtype(s, "$isSet", [$.JSString], "$asSet");
    if (classname == null)
      return $.assertSubtype(s, "$isSet", [$.JSString], "$asSet");
    for (t1 = classname.split(" "), t2 = $.getRuntimeTypeArgument(t1, "JSArray", 0), $.listSuperNativeTypeCheck(t1, "$isIterable"), t3 = t1.length, t3 = new $.ListIterator($.listSuperNativeTypeCheck(t1, "$isIterable"), t3, 0, $.assertSubtypeOfRuntimeType(null, t2)), $.setRuntimeTypeInfo(t3, [t2]), $.assertSubtype(t3, "$isIterator", [$.getRuntimeTypeArgument(t1, "JSArray", 0)], "$asIterator"); $.boolConversionCheck(t3.moveNext$0());) {
      t1 = t3.get$_liblib$_current();
      $arguments = $.substitute(t3.$asListIterator, $.getRuntimeTypeInfo(t3));
      if ($arguments == null)
        t2 = null;
      else {
        $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
        t2 = $arguments[0];
      }
      trimmed = $.trim$0$s($.stringTypeCheck($.assertSubtypeOfRuntimeType(t1, t2)));
      if (trimmed.length !== 0)
        s.add$1(s, trimmed);
    }
    return $.assertSubtype(s, "$isSet", [$.JSString], "$asSet");
  },
  writeClasses$1: function(s) {
    var t1, t2;
    t1 = $.assertSubtype(new $._ElementAttributeMap(this._liblib4$_element), "$isMap", [$.JSString, $.JSString], "$asMap");
    t2 = s.join$1(s, " ");
    $.$$dom_setAttribute$2$x(t1.get$_element(), "class", t2);
  }
},

AElement: {"": "StyledElement;", $asObject: null},

AltGlyphElement: {"": "TextPositioningElement;", $asObject: null},

AnimationElement: {"": "SvgElement;", $asObject: null},

CircleElement: {"": "StyledElement;", $asObject: null},

ClipPathElement: {"": "StyledElement;", $asObject: null},

DefsElement: {"": "StyledElement;", $asObject: null},

DescElement: {"": "StyledElement;", $asObject: null},

EllipseElement: {"": "StyledElement;", $asObject: null},

FEBlendElement: {"": "StyledElement;", $asObject: null},

FEColorMatrixElement: {"": "StyledElement;", $asObject: null},

FEComponentTransferElement: {"": "StyledElement;", $asObject: null},

FECompositeElement: {"": "StyledElement;", $asObject: null},

FEConvolveMatrixElement: {"": "StyledElement;", $asObject: null},

FEDiffuseLightingElement: {"": "StyledElement;", $asObject: null},

FEDisplacementMapElement: {"": "StyledElement;", $asObject: null},

FEFloodElement: {"": "StyledElement;", $asObject: null},

FEGaussianBlurElement: {"": "StyledElement;", $asObject: null},

FEImageElement: {"": "StyledElement;", $asObject: null},

FEMergeElement: {"": "StyledElement;", $asObject: null},

FEMorphologyElement: {"": "StyledElement;", $asObject: null},

FEOffsetElement: {"": "StyledElement;", $asObject: null},

FESpecularLightingElement: {"": "StyledElement;", $asObject: null},

FETileElement: {"": "StyledElement;", $asObject: null},

FETurbulenceElement: {"": "StyledElement;", $asObject: null},

FilterElement: {"": "StyledElement;", $asObject: null},

ForeignObjectElement: {"": "StyledElement;", $asObject: null},

GElement: {"": "StyledElement;", $asObject: null},

ImageElement0: {"": "StyledElement;", $asObject: null},

LineElement: {"": "StyledElement;", $asObject: null},

MarkerElement: {"": "StyledElement;", $asObject: null},

MaskElement: {"": "StyledElement;", $asObject: null},

PathElement: {"": "StyledElement;", $asObject: null},

PatternElement: {"": "StyledElement;", $asObject: null},

PolygonElement: {"": "StyledElement;", $asObject: null},

PolylineElement: {"": "StyledElement;", $asObject: null},

RectElement: {"": "StyledElement;", $asObject: null},

ScriptElement: {"": "SvgElement;", $asObject: null},

StyleElement: {"": "SvgElement;", $asObject: null},

StyledElement: {"": "SvgElement;"},

SvgElement: {"": "Element;",
  get$children: function(receiver) {
    var t1 = new $.FilteredElementList(receiver, $.interceptedTypeCheck($.interceptedTypeCheck(new $._ChildNodeListLazy(receiver), "$isList"), "$isList"));
    $.setRuntimeTypeInfo(t1, [$.Element]);
    return $.interceptedTypeCheck(t1, "$isList");
  },
  set$children: function(receiver, value) {
    var t1;
    $.interceptedTypeCheck(value, "$isList");
    t1 = new $.FilteredElementList(receiver, $.interceptedTypeCheck($.interceptedTypeCheck(new $._ChildNodeListLazy(receiver), "$isList"), "$isList"));
    $.setRuntimeTypeInfo(t1, [$.Element]);
    $.interceptedTypeCheck(t1, "$isList");
    t1.get$_childNodes()._this.textContent = "";
    $.addAll$1$ax(t1, value);
  },
  set$innerHtml: function(receiver, svg) {
    var container, t1;
    container = $.interceptedTypeCheck(document.createElement("div"), "$isElement");
    t1 = $.getInterceptor$x(container);
    t1.set$innerHtml(container, "<svg version=\"1.1\">" + svg + "</svg>");
    t1 = t1.get$children(container);
    this.set$children(receiver, $.get$children$x(t1.$index(t1, 0)));
  },
  get$$$dom_children: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot get dom_children on SVG."));
  }
},

SvgSvgElement: {"": "StyledElement;", $asObject: null},

SwitchElement: {"": "StyledElement;", $asObject: null},

SymbolElement: {"": "StyledElement;", $asObject: null},

TextContentElement: {"": "StyledElement;", $asObject: null},

TextElement: {"": "TextPositioningElement;", $asObject: null},

TextPathElement: {"": "TextContentElement;", $asObject: null},

TextPositioningElement: {"": "TextContentElement;"},

TitleElement: {"": "StyledElement;", $asObject: null},

UseElement: {"": "StyledElement;", $asObject: null},

ViewElement: {"": "SvgElement;", $asObject: null},

_GradientElement: {"": "StyledElement;", $asObject: null}}],
["dart.isolate", "dart:isolate", , {
_Isolate_port: function() {
  if ($.lazyPort == null)
    $.lazyPort = $.ReceivePortImpl$();
  return $.lazyPort;
},

SendPort: {"": "Object;", $isSendPort: true, $isFunction: true, $asObject: null,
  $signature: function() {
    return {func: "Future__dynamic", ret: $.Future, args: [null]};
  }
},

ReceivePort: {"": "Object;", $isReceivePort: true}}],
["dart.json", "dart:json", , {
_convertJsonToDart: function(json, reviver) {
  var revive;
  $.assertFunctionSubtype(reviver, "dynamic__dynamic_dynamic");
  revive = new $._convertJsonToDart_closure();
  return revive.call$2("", new $._convertJsonToDart_walk(revive).call$1(json));
},

parse: function(json, reviver) {
  var parsed, e, t1, exception;
  $.assertFunctionSubtype(reviver, "dynamic__dynamic_dynamic");
  t1 = json;
  if (typeof t1 !== "string")
    throw $.wrapException(new $.ArgumentError(json));
  parsed = null;
  try {
    parsed = JSON.parse(json);
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.wrapException(new $.FormatException(String(e)));
  }

  return $._convertJsonToDart(parsed, reviver);
},

_convertJsonToDart_closure: {"": "Closure;",
  call$2: function(key, value) {
    return value;
  },
  $isFunction: true,
  $asObject: null,
  $is_void__K_V: true,
  $is_void__dynamic_SendPort: true,
  $is_dynamic__dynamic_dynamic: true,
  $is_void__String_String: true,
  $is_void__K_V0: true
},

_convertJsonToDart_walk: {"": "Closure;revive_0",
  call$1: function(e) {
    var list, t1, i, keys, map, key, proto;
    if (e == null || typeof e != "object")
      return e;
    if (Object.getPrototypeOf(e) === Array.prototype) {
      list = e;
      for (t1 = this.revive_0, i = 0; i < list.length; ++i)
        list[i] = t1.call$2(i, this.call$1(list[i]));
      return list;
    }
    keys = Object.keys(e);
    map = $.makeLiteralMap([]);
    for (t1 = this.revive_0, i = 0; i < keys.length; ++i) {
      key = $.stringTypeCheck(keys[i]);
      map.$indexSet(map, key, t1.call$2(key, this.call$1(e[key])));
    }
    proto = e.__proto__;
    if (typeof proto !== "undefined" && proto !== Object.prototype)
      map.$indexSet(map, "__proto__", t1.call$2("__proto__", this.call$1(proto)));
    return map;
  },
  $isFunction: true,
  $asObject: null,
  $signature: function() {
    return {func: "dynamic__dynamic", args: [null]};
  }
}}],
["dart.typed_data", "dart:typed_data", , {
TypedData_ListMixin: {"": "TypedData+ListMixin;", $isList: true,
  $asList: function(E) {
    return [$.JSInt];
  },
  $isIterable: true,
  $asIterable: function(E) {
    return [$.JSInt];
  },
  $asObject: null
},

TypedData_ListMixin_FixedLengthListMixin: {"": "TypedData_ListMixin+FixedLengthListMixin;", $asObject: null},

TypedData: {"": "Interceptor;"},

Uint8ClampedList: {"": "Uint8List;",
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    if (index == null)
      return this.$$index$bailout1(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression(new $.RangeError("value " + index + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + index));
    return receiver[index];
  },
  $$index$bailout1: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (!(index >>> 0 != index)) {
      if (index == null)
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2) {
      if (index == null)
        throw index.$lt();
      if (index < 0 || index >= t1)
        $.throwExpression(new $.RangeError("value " + index + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + index));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    $.intTypeCheck(index);
    if (index == null)
      return this.$$indexSet$bailout1(1, index, value, receiver);
    $.intTypeCheck(value);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression(new $.RangeError("value " + index + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + index));
    receiver[index] = value;
  },
  $$indexSet$bailout1: function(state0, index, value, receiver) {
    var t1, t2;
    $.intTypeCheck(value);
    t1 = receiver.length;
    if (!(index >>> 0 != index)) {
      if (index == null)
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2) {
      if (index == null)
        throw index.$lt();
      if (index < 0 || index >= t1)
        $.throwExpression(new $.RangeError("value " + index + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + index));
    }
    receiver[index] = value;
  }
},

Uint8List: {"": "TypedData_ListMixin_FixedLengthListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    if (index == null)
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression(new $.RangeError("value " + index + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + index));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (!(index >>> 0 != index)) {
      if (index == null)
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2) {
      if (index == null)
        throw index.$lt();
      if (index < 0 || index >= t1)
        $.throwExpression(new $.RangeError("value " + index + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + index));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    $.intTypeCheck(index);
    if (index == null)
      return this.$$indexSet$bailout(1, index, value, receiver);
    $.intTypeCheck(value);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression(new $.RangeError("value " + index + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + index));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    $.intTypeCheck(value);
    t1 = receiver.length;
    if (!(index >>> 0 != index)) {
      if (index == null)
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2) {
      if (index == null)
        throw index.$lt();
      if (index < 0 || index >= t1)
        $.throwExpression(new $.RangeError("value " + index + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + index));
    }
    receiver[index] = value;
  },
  $isList: true,
  $asList: function() {
    return [$.JSInt];
  },
  $isIterable: true,
  $asIterable: function() {
    return [$.JSInt];
  },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
}}],
["html_common", "dart:html_common", , {
CssClassSetImpl: {"": "Object;",
  toString$0: function(_) {
    var t1 = this.readClasses$0();
    return t1.join$1(t1, " ");
  },
  get$iterator: function(_) {
    var t1, t2;
    t1 = this.readClasses$0();
    t2 = new $.LinkedHashSetIterator(t1, t1._modifications, null, $.assertSubtypeOfRuntimeType(null, null));
    $.setRuntimeTypeInfo(t2, [null]);
    t2._cell = t2._set._first;
    return $.assertSubtype($.assertSubtype(t2, "$isIterator", [$.getRuntimeTypeArgument(t1, "LinkedHashSet", 0)], "$asIterator"), "$isIterator", [$.JSString], "$asIterator");
  },
  forEach$1: function(_, f) {
    var t1;
    $.assertFunctionSubtype(f, "void__String");
    t1 = this.readClasses$0();
    t1.forEach$1(t1, f);
  },
  join$1: function(_, separator) {
    var t1;
    $.stringTypeCheck(separator);
    t1 = this.readClasses$0();
    return t1.join$1(t1, separator);
  },
  get$length: function(_) {
    return this.readClasses$0()._liblib1$_length;
  },
  add$1: function(_, value) {
    var t1, s;
    t1 = new $.CssClassSetImpl_add_closure(value);
    $.assertFunctionSubtype(t1, "dynamic__Set");
    s = $.assertSubtype(this.readClasses$0(), "$isSet", [$.JSString], "$asSet");
    t1.call$1(s);
    this.writeClasses$1(s);
  },
  elementAt$1: function(_, index) {
    var t1 = this.readClasses$0();
    return $.stringTypeCheck(t1.elementAt$1(t1, index));
  },
  $isCssClassSet: true,
  $isSet: true,
  $asSet: function() {
    return [$.JSString];
  },
  $isIterable: true,
  $asIterable: function() {
    return [$.JSString];
  },
  $asObject: null
},

CssClassSetImpl_add_closure: {"": "Closure;value_0",
  call$1: function(s) {
    return $.add$1$ax(s, this.value_0);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function() {
    return {func: "dynamic__dynamic", args: [null]};
  }
},

FilteredElementList: {"": "ListBase;_node,_childNodes<",
  get$_filtered: function() {
    var t1 = this._childNodes;
    return $.interceptedTypeCheck($.List_List$from(t1.where$1(t1, new $.FilteredElementList__filtered_closure()), true, $.Element), "$isList");
  },
  forEach$1: function(_, f) {
    var t1;
    $.assertFunctionSubtype(f, "void__Element");
    t1 = this.get$_filtered();
    $.assertFunctionSubtype(f, "void__E0", "JSArray", t1);
    $.voidTypeCheck($.IterableMixinWorkaround_forEach(t1, f));
  },
  $indexSet: function(_, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isElement");
    $.replaceWith$1$x($.interceptedTypeCheck($.JSArray_methods.$index(this.get$_filtered(), index), "$isElement"), value);
  },
  set$length: function(_, newLength) {
    var len;
    $.intTypeCheck(newLength);
    if (newLength == null)
      return this.set$length$bailout(1, newLength);
    len = this.get$_filtered().length;
    if (newLength >= len)
      return;
    else if (newLength < 0)
      throw $.wrapException(new $.ArgumentError("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  set$length$bailout: function(state0, newLength) {
    var len = this.get$_filtered().length;
    if (newLength == null)
      throw newLength.$ge();
    if (newLength >= len)
      return;
    else if (newLength < 0)
      throw $.wrapException(new $.ArgumentError("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  add$1: function(_, value) {
    $.append$1$x(this._childNodes._this, $.interceptedTypeCheck(value, "$isElement"));
  },
  addAll$1: function(_, iterable) {
    var t1, t2, t3;
    for (t1 = $.get$iterator$ax($.listSuperNativeTypeCheck(iterable, "$isIterable")), t2 = this._childNodes._this, t3 = $.getInterceptor$x(t2); $.boolConversionCheck(t1.moveNext$0());)
      t3.append$1(t2, $.interceptedTypeCheck(t1.get$current(), "$isElement"));
  },
  removeRange$2: function(_, start, end) {
    var t1, t2;
    t1 = $.JSArray_methods.sublist$2(this.get$_filtered(), start, end);
    t2 = new $.FilteredElementList_removeRange_closure();
    $.assertFunctionSubtype(t2, "void__E0", "JSArray", t1);
    $.voidTypeCheck($.IterableMixinWorkaround_forEach(t1, t2));
  },
  get$length: function(_) {
    return this.get$_filtered().length;
  },
  $index: function(_, index) {
    $.intTypeCheck(index);
    return $.interceptedTypeCheck($.JSArray_methods.$index(this.get$_filtered(), index), "$isElement");
  },
  get$iterator: function(_) {
    var t1, t2, t3;
    t1 = this.get$_filtered();
    t2 = $.getRuntimeTypeArgument(t1, "JSArray", 0);
    $.listSuperNativeTypeCheck(t1, "$isIterable");
    t3 = t1.length;
    t3 = new $.ListIterator($.listSuperNativeTypeCheck(t1, "$isIterable"), t3, 0, $.assertSubtypeOfRuntimeType(null, t2));
    $.setRuntimeTypeInfo(t3, [t2]);
    return $.assertSubtype($.assertSubtype(t3, "$isIterator", [$.getRuntimeTypeArgument(t1, "JSArray", 0)], "$asIterator"), "$isIterator", [$.Element], "$asIterator");
  },
  $asListBase: null,
  $asListMixin: null,
  $asList: null,
  $asIterable: null,
  $asObject: null
},

FilteredElementList__filtered_closure: {"": "Closure;",
  call$1: function(n) {
    return typeof n === "object" && n !== null && !!$.getInterceptor(n).$isElement;
  },
  $isFunction: true,
  $asObject: null,
  $signature: function() {
    return {func: "dynamic__dynamic", args: [null]};
  }
},

FilteredElementList_removeRange_closure: {"": "Closure;",
  call$1: function(el) {
    return $.remove$0$ax(el);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function() {
    return {func: "dynamic__dynamic", args: [null]};
  }
}}],
["metadata", "../dart-sdk/lib/html/html_common/metadata.dart", , {
SupportedBrowser: {"": "Object;browserName,minimumVersion", static: {
"": "SupportedBrowser_CHROME,SupportedBrowser_FIREFOX,SupportedBrowser_IE,SupportedBrowser_OPERA,SupportedBrowser_SAFARI",
}
},

Experimental: {"": "Object;"},

DomName: {"": "Object;name"},

DocsEditable: {"": "Object;"},

Unstable: {"": "Object;"}}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

$.IsolateNatives__processWorkerMessage$closure = new $.Closure$_processWorkerMessage($.IsolateNatives__processWorkerMessage, "IsolateNatives__processWorkerMessage$closure");
$.wrapException$closure = new $.Closure$wrapException($.wrapException, "wrapException$closure");
$.DartError_toStringWrapper$closure = new $.Closure$toStringWrapper($.DartError_toStringWrapper, "DartError_toStringWrapper$closure");
$.invokeClosure$closure = new $.Closure$invokeClosure($.invokeClosure, "invokeClosure$closure");
$.isAssignable$closure = new $.Closure$isAssignable($.isAssignable, "isAssignable$closure");
$.typeNameInChrome$closure = new $.Closure$typeNameInChrome($.typeNameInChrome, "typeNameInChrome$closure");
$.typeNameInSafari$closure = new $.Closure$typeNameInSafari($.typeNameInSafari, "typeNameInSafari$closure");
$.typeNameInOpera$closure = new $.Closure$typeNameInOpera($.typeNameInOpera, "typeNameInOpera$closure");
$.typeNameInFirefox$closure = new $.Closure$typeNameInFirefox($.typeNameInFirefox, "typeNameInFirefox$closure");
$.typeNameInIE$closure = new $.Closure$typeNameInIE($.typeNameInIE, "typeNameInIE$closure");
$.constructorNameFallback$closure = new $.Closure$constructorNameFallback($.constructorNameFallback, "constructorNameFallback$closure");
$.callDartFunctionWith1Arg$closure = new $.Closure$callDartFunctionWith1Arg($.callDartFunctionWith1Arg, "callDartFunctionWith1Arg$closure");
$.main$closure = new $.Closure$main($.main, "main$closure");
$.onActivityDataLoaded$closure = new $.Closure$onActivityDataLoaded($.onActivityDataLoaded, "onActivityDataLoaded$closure");
$.addActivity$closure = new $.Closure$addActivity($.addActivity, "addActivity$closure");
$._asyncRunCallback$closure = new $.Closure$_asyncRunCallback($._asyncRunCallback, "_asyncRunCallback$closure");
$._nullDataHandler$closure = new $.Closure$_nullDataHandler($._nullDataHandler, "_nullDataHandler$closure");
$._nullErrorHandler$closure = new $.Closure$_nullErrorHandler($._nullErrorHandler, "_nullErrorHandler$closure");
$._nullDoneHandler$closure = new $.Closure$_nullDoneHandler($._nullDoneHandler, "_nullDoneHandler$closure");
$.Duration.$isObject = true;
$.JSBool.$isbool = true;
$.JSBool.$isObject = true;
$.Object.$isObject = true;
$.Map.$isMap = true;
$.Map.$isObject = true;
$.Node.$isObject = true;
$.Node.$isNode = true;
$._EventSink.$is_EventSink = true;
$._EventSink.$isObject = true;
$.Set.$isSet = true;
$.Set.$isObject = true;
$.ProgressEvent.$isProgressEvent = true;
$.ProgressEvent.$isEvent = true;
$.ProgressEvent.$isObject = true;
$.Element.$isObject = true;
$.Element.$isElement = true;
$.Element.$isNode = true;
$.ReceivePort.$isReceivePort = true;
$.ReceivePort.$isObject = true;
$.JSArray.$isList = true;
$.JSArray.$isObject = true;
$.JSNumber.$isObject = true;
$.JSInt.$isint = true;
$.JSInt.$isObject = true;
$.SendPort.$isSendPort = true;
$.SendPort.$isObject = true;
$.JSString.$isString = true;
$.JSString.$isObject = true;
$.HttpRequest.$isHttpRequest = true;
$.HttpRequest.$isObject = true;
$._IsolateContext.$is_IsolateContext = true;
$._IsolateContext.$isObject = true;
$.Event.$isEvent = true;
$.Event.$isObject = true;
$._IsolateEvent.$is_IsolateEvent = true;
$._IsolateEvent.$isObject = true;
$.Function.$isFunction = true;
$.Function.$isObject = true;
$.Future.$isFuture = true;
$.Future.$isObject = true;
$.$signature_void__Element = {func: "void__Element", void: true, args: [$.Element]};
$.$signature_void__ProgressEvent = {func: "void__ProgressEvent", void: true, args: [$.ProgressEvent]};
$.$signature_void__dynamic_SendPort = {func: "void__dynamic_SendPort", void: true, args: [null, $.SendPort]};
$.$signature_dynamic__dynamic = {func: "dynamic__dynamic", args: [null]};
$.$signature_void__String = {func: "void__String", void: true, args: [$.JSString]};
$.$signature_void__dynamic = {func: "void__dynamic", void: true, args: [null]};
$.$signature_dynamic__Set = {func: "dynamic__Set", args: [[$.Set, $.JSString]]};
$.$signature_dynamic__dynamic_dynamic = {func: "dynamic__dynamic_dynamic", args: [null, null]};
$.$signature_bool__dynamic = {func: "bool__dynamic", ret: $.JSBool, args: [null]};
$.$signature_void__String_String = {func: "void__String_String", void: true, args: [$.JSString, $.JSString]};
$.$signature_dynamic__Event = {func: "dynamic__Event", args: [$.Event]};
$.ListIterable.$signature_void__E2 = function(E) {
  return {func: "void__E2", void: true, args: [E]};
};
$.MappedIterable.$signature_T__S = function(S, T) {
  return {func: "T__S", ret: T, args: [S]};
};
$.MappedIterator.$signature_T__S0 = function(S, T) {
  return {func: "T__S0", ret: T, args: [S]};
};
$._FutureImpl.$signature_dynamic__T = function(T) {
  return {func: "dynamic__T", args: [T]};
};
$._EventStream.$signature_void__T2 = function(T) {
  return {func: "void__T2", void: true, args: [T]};
};
$._BufferingStreamSubscription.$signature_void__T1 = function(T) {
  return {func: "void__T1", void: true, args: [T]};
};
$.JSArray.$signature_void__E0 = function(E) {
  return {func: "void__E0", void: true, args: [E]};
};
$._SubscribeFuture.$signature_dynamic__S = function(S, T) {
  return {func: "dynamic__S", args: [S]};
};
$.Stream.$signature_void__T3 = function(T) {
  return {func: "void__T3", void: true, args: [T]};
};
$.HashMap.$signature_void__K_V0 = function(K, V) {
  return {func: "void__K_V0", void: true, args: [K, V]};
};
$.ListMixin.$signature_void__E1 = function(E) {
  return {func: "void__E1", void: true, args: [E]};
};
$.ListMixin.$signature_bool__E = function(E) {
  return {func: "bool__E", ret: $.JSBool, args: [E]};
};
$.LinkedHashSet.$signature_void__E5 = function(E) {
  return {func: "void__E5", void: true, args: [E]};
};
$.LinkedHashMap.$signature_void__K_V = function(K, V) {
  return {func: "void__K_V", void: true, args: [K, V]};
};
$.HashMapKeyIterable.$signature_void__E4 = function(E) {
  return {func: "void__E4", void: true, args: [E]};
};
$.IterableBase.$signature_void__E = function(E) {
  return {func: "void__E", void: true, args: [E]};
};
$.IterableBase.$signature_dynamic__E = function(E) {
  return {func: "dynamic__E", args: [E]};
};
$._ForwardingStream.$signature_void__T = function(S, T) {
  return {func: "void__T", void: true, args: [T]};
};
$._ForwardingStreamSubscription.$signature_void__T0 = function(S, T) {
  return {func: "void__T0", void: true, args: [T]};
};
$.LinkedHashMapKeyIterable.$signature_void__E3 = function(E) {
  return {func: "void__E3", void: true, args: [E]};
};
$.ListQueue.$signature_void__E6 = function(E) {
  return {func: "void__E6", void: true, args: [E]};
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.UnknownJavaScriptObject.prototype;
  return receiver;
};
$.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.UnknownJavaScriptObject.prototype;
  return receiver;
};
$.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  return $.getNativeInterceptor(receiver);
};
$.C_CloseToken = new $.CloseToken();
$.C_UnknownJavaScriptObject = new $.UnknownJavaScriptObject();
$.C__DelayedDone = new $._DelayedDone();
$.Duration_0 = new $.Duration(0);
$.EventStreamProvider_error = $.setRuntimeTypeInfo(new $.EventStreamProvider("error"), [$.ProgressEvent]);
$.EventStreamProvider_load = $.setRuntimeTypeInfo(new $.EventStreamProvider("load"), [$.ProgressEvent]);
$.EventStreamProvider_progress = $.setRuntimeTypeInfo(new $.EventStreamProvider("progress"), [$.ProgressEvent]);
$.HtmlDocument_methods = $.HtmlDocument.prototype;
$.HttpRequest_methods = $.HttpRequest.prototype;
$.JSArray_methods = $.JSArray.prototype;
$.JSInt_methods = $.JSInt.prototype;
$.JSString_methods = $.JSString.prototype;
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.List_empty = Isolate.makeConstantList([]);
$.NodeList_methods = $.NodeList.prototype;
$.dispatchPropertyName = null;
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.interceptorsByTag = null;
$.leafTags = null;
$._callbacksAreEnqueued = false;
$.Expando__keyCount = 0;
$.$$dom_addEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_addEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_getAttribute$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).$$dom_getAttribute$1(receiver, a0);
};
$.$$dom_removeChild$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).$$dom_removeChild$1(receiver, a0);
};
$.$$dom_removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_removeEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_replaceChild$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).$$dom_replaceChild$2(receiver, a0, a1);
};
$.$$dom_setAttribute$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).$$dom_setAttribute$2(receiver, a0, a1);
};
$.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return $.getInterceptor$n(receiver).$ge(receiver, a0);
};
$.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string")
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return $.getInterceptor$asx(receiver).$index(receiver, a0);
};
$.add$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).add$1(receiver, a0);
};
$.addAll$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).addAll$1(receiver, a0);
};
$.append$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).append$1(receiver, a0);
};
$.elementAt$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
$.forEach$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
$.get$children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$children(receiver);
};
$.get$hashCode$ = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.get$isEmpty$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
$.get$iterator$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$iterator(receiver);
};
$.get$length$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$length(receiver);
};
$.get$name$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$name(receiver);
};
$.get$responseText$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$responseText(receiver);
};
$.get$value$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$value(receiver);
};
$.insertAdjacentHtml$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).insertAdjacentHtml$2(receiver, a0, a1);
};
$.insertBefore$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).insertBefore$2(receiver, a0, a1);
};
$.remove$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).remove$0(receiver);
};
$.replaceWith$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
$.send$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).send$2(receiver, a0, a1);
};
$.set$innerHtml$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$innerHtml(receiver, value);
};
$.substring$2$s = function(receiver, a0, a1) {
  return $.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
};
$.toList$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).toList$0(receiver);
};
$.toString$0 = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.trim$0$s = function(receiver) {
  return $.getInterceptor$s(receiver).trim$0(receiver);
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() { return this; }();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.boolTypeCheck($.get$globalThis().postMessage !== void 0);
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return $.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  var t1 = new $.Expando(null);
  $.setRuntimeTypeInfo(t1, [$.JSInt]);
  return $.assertSubtype(t1, "$isExpando", [$.JSInt], "$asExpando");
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return $.TypeErrorDecoder_extractPattern($.TypeErrorDecoder_provokeCallErrorOn({ toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return $.TypeErrorDecoder_extractPattern($.TypeErrorDecoder_provokeCallErrorOn({ $method$: null, toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return $.TypeErrorDecoder_extractPattern($.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return $.TypeErrorDecoder_extractPattern($.TypeErrorDecoder_provokeCallErrorOnNull());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return $.TypeErrorDecoder_extractPattern($.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return $.TypeErrorDecoder_extractPattern($.TypeErrorDecoder_provokeCallErrorOnUndefined());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return $.TypeErrorDecoder_extractPattern($.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return $.TypeErrorDecoder_extractPattern($.TypeErrorDecoder_provokePropertyErrorOnNull());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return $.TypeErrorDecoder_extractPattern($.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return $.TypeErrorDecoder_extractPattern($.TypeErrorDecoder_provokePropertyErrorOnUndefined());
});
Isolate.$lazy($, "getTypeNameOf", "getTypeNameOf", "get$getTypeNameOf", function() {
  return $.getFunctionForTypeNameOf();
});
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return $.List_List(null, null);
});
Isolate.$lazy($, "_stackTraceExpando", "_stackTraceExpando", "get$_stackTraceExpando", function() {
  var t1 = new $.Expando("asynchronous error");
  $.setRuntimeTypeInfo(t1, [null]);
  return t1;
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  var t1 = {func: "void_", void: true};
  return $.assertSubtype($.assertSubtype($.ListQueue$(null, t1), "$isQueue", [t1], "$asQueue"), "$isQueue", [{func: "void_", void: true}], "$asQueue");
});
Isolate.$lazy($, "_current", "_Zone__current", "get$_Zone__current", function() {
  var t1 = $.interceptedTypeCheck([], "$isList");
  $.assertHelper(true);
  return new $._DefaultZone(null, t1, 0, false);
});
Isolate.$lazy($, "_toStringList", "ListMixin__toStringList", "get$ListMixin__toStringList", function() {
  return $.List_List(null, null);
});
Isolate.$lazy($, "_toStringList", "Maps__toStringList", "get$Maps__toStringList", function() {
  return $.List_List(null, null);
});
// Native classes
$.defineNativeMethods("DOMError|FileError|MediaError|MediaKeyError|Navigator|NavigatorUserMediaError|PositionError|SQLError|SQLException|SVGAnimatedNumberList", $.Interceptor);

$.defineNativeMethods("HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMenuElement|HTMLModElement|HTMLOListElement|HTMLOptGroupElement|HTMLPreElement|HTMLQuoteElement|HTMLScriptElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTemplateElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement", $._HTMLElement);

$.defineNativeMethodsNonleaf("HTMLElement", $._HTMLElement);

$.defineNativeMethods("HTMLAnchorElement", $.AnchorElement);

$.defineNativeMethods("HTMLButtonElement", $.ButtonElement);

$.defineNativeMethods("HTMLCanvasElement", $.CanvasElement);

$.defineNativeMethods("CDATASection|CharacterData|Comment|Text", $.CharacterData);

$.defineNativeMethods("HTMLDivElement", $.DivElement);

$.defineNativeMethods("SVGDocument", $.Document);

$.defineNativeMethodsNonleaf("Document", $.Document);

$.defineNativeMethodsNonleaf("DocumentFragment", $.DocumentFragment);

$.defineNativeMethods("DocumentType", $.DocumentType);

$.defineNativeMethods("DOMException", $.DomException);

$.defineNativeMethodsNonleaf("Element", $.Element);

$.defineNativeMethods("HTMLEmbedElement", $.EmbedElement);

$.defineNativeMethods("AudioProcessingEvent|AutocompleteErrorEvent|BeforeLoadEvent|CSSFontFaceLoadEvent|CloseEvent|CompositionEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|DragEvent|ErrorEvent|FocusEvent|HashChangeEvent|IDBVersionChangeEvent|KeyboardEvent|MIDIConnectionEvent|MIDIMessageEvent|MediaKeyEvent|MediaKeyMessageEvent|MediaKeyNeededEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MouseEvent|MouseScrollEvent|MouseWheelEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|SVGZoomEvent|SecurityPolicyViolationEvent|SpeechInputEvent|SpeechRecognitionError|SpeechRecognitionEvent|SpeechSynthesisEvent|StorageEvent|TextEvent|TouchEvent|TrackEvent|TransitionEvent|UIEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent|WheelEvent", $.Event);

$.defineNativeMethodsNonleaf("Event", $.Event);

$.defineNativeMethodsNonleaf("EventTarget", $.EventTarget);

$.defineNativeMethods("HTMLFieldSetElement", $.FieldSetElement);

$.defineNativeMethods("FileException", $.FileException);

$.defineNativeMethods("HTMLFormElement", $.FormElement);

$.defineNativeMethods("HTMLHRElement", $.HRElement);

$.defineNativeMethods("HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection", $.HtmlCollection);

$.defineNativeMethods("HTMLDocument", $.HtmlDocument);

$.defineNativeMethods("XMLHttpRequest", $.HttpRequest);

$.defineNativeMethods("HTMLIFrameElement", $.IFrameElement);

$.defineNativeMethods("HTMLImageElement", $.ImageElement);

$.defineNativeMethods("HTMLInputElement", $.InputElement);

$.defineNativeMethods("HTMLKeygenElement", $.KeygenElement);

$.defineNativeMethods("HTMLLIElement", $.LIElement);

$.defineNativeMethods("HTMLMapElement", $.MapElement);

$.defineNativeMethods("HTMLAudioElement", $.MediaElement);

$.defineNativeMethodsNonleaf("HTMLMediaElement", $.MediaElement);

$.defineNativeMethods("HTMLMetaElement", $.MetaElement);

$.defineNativeMethods("HTMLMeterElement", $.MeterElement);

$.defineNativeMethods("Entity|Notation|ProcessingInstruction", $.Node);

$.defineNativeMethodsNonleaf("Node", $.Node);

$.defineNativeMethods("NodeList|RadioNodeList", $.NodeList);

$.defineNativeMethods("HTMLObjectElement", $.ObjectElement);

$.defineNativeMethods("HTMLOptionElement", $.OptionElement);

$.defineNativeMethods("HTMLOutputElement", $.OutputElement);

$.defineNativeMethods("HTMLParagraphElement", $.ParagraphElement);

$.defineNativeMethods("HTMLParamElement", $.ParamElement);

$.defineNativeMethods("HTMLProgressElement", $.ProgressElement);

$.defineNativeMethods("ProgressEvent|ResourceProgressEvent|XMLHttpRequestProgressEvent", $.ProgressEvent);

$.defineNativeMethods("HTMLSelectElement", $.SelectElement);

$.defineNativeMethods("ShadowRoot", $.ShadowRoot);

$.defineNativeMethods("HTMLTextAreaElement", $.TextAreaElement);

$.defineNativeMethods("HTMLVideoElement", $.VideoElement);

$.defineNativeMethods("DOMWindow|Window", $.Window);

$.defineNativeMethods("Attr", $._Attr);

$.defineNativeMethods("MozNamedAttrMap|NamedNodeMap", $._NamedNodeMap);

$.defineNativeMethods("SVGAElement", $.AElement);

$.defineNativeMethods("SVGAltGlyphElement", $.AltGlyphElement);

$.defineNativeMethods("SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGSetElement", $.AnimationElement);

$.defineNativeMethods("SVGCircleElement", $.CircleElement);

$.defineNativeMethods("SVGClipPathElement", $.ClipPathElement);

$.defineNativeMethods("SVGDefsElement", $.DefsElement);

$.defineNativeMethods("SVGDescElement", $.DescElement);

$.defineNativeMethods("SVGEllipseElement", $.EllipseElement);

$.defineNativeMethods("SVGFEBlendElement", $.FEBlendElement);

$.defineNativeMethods("SVGFEColorMatrixElement", $.FEColorMatrixElement);

$.defineNativeMethods("SVGFEComponentTransferElement", $.FEComponentTransferElement);

$.defineNativeMethods("SVGFECompositeElement", $.FECompositeElement);

$.defineNativeMethods("SVGFEConvolveMatrixElement", $.FEConvolveMatrixElement);

$.defineNativeMethods("SVGFEDiffuseLightingElement", $.FEDiffuseLightingElement);

$.defineNativeMethods("SVGFEDisplacementMapElement", $.FEDisplacementMapElement);

$.defineNativeMethods("SVGFEFloodElement", $.FEFloodElement);

$.defineNativeMethods("SVGFEGaussianBlurElement", $.FEGaussianBlurElement);

$.defineNativeMethods("SVGFEImageElement", $.FEImageElement);

$.defineNativeMethods("SVGFEMergeElement", $.FEMergeElement);

$.defineNativeMethods("SVGFEMorphologyElement", $.FEMorphologyElement);

$.defineNativeMethods("SVGFEOffsetElement", $.FEOffsetElement);

$.defineNativeMethods("SVGFESpecularLightingElement", $.FESpecularLightingElement);

$.defineNativeMethods("SVGFETileElement", $.FETileElement);

$.defineNativeMethods("SVGFETurbulenceElement", $.FETurbulenceElement);

$.defineNativeMethods("SVGFilterElement", $.FilterElement);

$.defineNativeMethods("SVGForeignObjectElement", $.ForeignObjectElement);

$.defineNativeMethods("SVGGElement", $.GElement);

$.defineNativeMethods("SVGImageElement", $.ImageElement0);

$.defineNativeMethods("SVGLineElement", $.LineElement);

$.defineNativeMethods("SVGMarkerElement", $.MarkerElement);

$.defineNativeMethods("SVGMaskElement", $.MaskElement);

$.defineNativeMethods("SVGPathElement", $.PathElement);

$.defineNativeMethods("SVGPatternElement", $.PatternElement);

$.defineNativeMethods("SVGPolygonElement", $.PolygonElement);

$.defineNativeMethods("SVGPolylineElement", $.PolylineElement);

$.defineNativeMethods("SVGRectElement", $.RectElement);

$.defineNativeMethods("SVGScriptElement", $.ScriptElement);

$.defineNativeMethods("SVGStyleElement", $.StyleElement);

$.defineNativeMethods("SVGStopElement", $.StyledElement);

$.defineNativeMethodsNonleaf("SVGStyledElement", $.StyledElement);

$.defineNativeMethods("SVGComponentTransferFunctionElement|SVGFEDistantLightElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFEPointLightElement|SVGFESpotLightElement|SVGMetadataElement", $.SvgElement);

$.defineNativeMethodsNonleaf("SVGElement", $.SvgElement);

$.defineNativeMethods("SVGSVGElement", $.SvgSvgElement);

$.defineNativeMethods("SVGSwitchElement", $.SwitchElement);

$.defineNativeMethods("SVGSymbolElement", $.SymbolElement);

$.defineNativeMethodsNonleaf("SVGTextContentElement", $.TextContentElement);

$.defineNativeMethods("SVGTextElement", $.TextElement);

$.defineNativeMethods("SVGTextPathElement", $.TextPathElement);

$.defineNativeMethods("SVGTSpanElement", $.TextPositioningElement);

$.defineNativeMethodsNonleaf("SVGTextPositioningElement", $.TextPositioningElement);

$.defineNativeMethods("SVGTitleElement", $.TitleElement);

$.defineNativeMethods("SVGUseElement", $.UseElement);

$.defineNativeMethods("SVGViewElement", $.ViewElement);

$.defineNativeMethods("SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement", $._GradientElement);

$.defineNativeMethodsNonleaf("ArrayBufferView", $.TypedData);

$.defineNativeMethods("CanvasPixelArray|Uint8ClampedArray", $.Uint8ClampedList);

$.defineNativeMethodsNonleaf("Uint8Array", $.Uint8List);


init.metadata = [];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
$.initializeDispatchProperty(function(a) {
  $.getDispatchProperty = a;
}, "___dart_dispatch_record_ZxYxX_0_", $.PlainJavaScriptObject.prototype);
// BEGIN invoke [main].
if (typeof document !== "undefined" && document.readyState !== "complete") {
  document.addEventListener("readystatechange", function () {
    if (document.readyState == "complete") {
      if (typeof dartMainRunner === "function") {
        dartMainRunner(function() { $.startRootIsolate($.main$closure); });
      } else {
        $.startRootIsolate($.main$closure);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { $.startRootIsolate($.main$closure); });
  } else {
    $.startRootIsolate($.main$closure);
  }
}
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, prototype) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        prototype["get$" + accessorName] = new Function(args, body);
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        prototype["set$" + accessorName] = new Function(args, body);
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields, prototype) {
    var constructor;
    if (typeof fields == "function") {
      constructor = fields;
    } else {
      var str = "function " + cls + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = generateAccessor(fields[i], prototype);
        var parameter = "parameter_" + field;
        str += parameter;
        body += "this." + field + " = " + parameter + ";\n";
      }
      str += ") {" + body + "}\nreturn " + cls;
      constructor = new Function(str)();
    }
    constructor.prototype = prototype;
    constructor.builtin$cls = name;
    return constructor;
  }
  var supportsProto = false;
  var tmp = defineClass("c", "c", ["f<"], {}).prototype;
  if (tmp.__proto__) {
    tmp.__proto__ = {};
    if (typeof tmp.get$f != "undefined")
      supportsProto = true;
  }
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        if (typeof fields == "string") {
          var s = fields.split(";");
          fields = s[1] == "" ? [] : s[1].split(",");
          supr = s[0];
        } else {
          supr = desc.super;
          if (!!desc.$name)
            name = desc.$name;
        }
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        var constructor = defineClass(name, cls, fields, desc);
        isolateProperties[cls] = constructor;
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = isolateProperties[cls];
      var superConstructor = isolateProperties[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var getter = new Function("{ return this." + fieldName + ";}");
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            $.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = getter;
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    isolateProperties.$currentScript = typeof document == "object" ? document.currentScript || document.scripts[document.scripts.length - 1] : null;
    var isolatePrototype = oldIsolate.prototype;
    var str = "{\n";
    str += "var properties = arguments.callee.$isolateProperties;\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var staticName in isolateProperties) {
      if (hasOwnProperty.call(isolateProperties, staticName)) {
        str += "this." + staticName + "= properties." + staticName + ";\n";
      }
    }
    str += "}\n";
    var newIsolate = new Function(str);
    newIsolate.prototype = isolatePrototype;
    isolatePrototype.constructor = newIsolate;
    newIsolate.$isolateProperties = isolateProperties;
    newIsolate.makeConstantList = oldIsolate.makeConstantList;
    newIsolate.$finishClasses = oldIsolate.$finishClasses;
    return newIsolate;
  };
}
})()

//# sourceMappingURL=app.dart.js.map
//@ sourceMappingURL=app.dart.js.map
